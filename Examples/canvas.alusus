import "Srl/Math";
import "Apm";
Apm.importFile("Alusus/WebPlatform");
use Srl;
use WebPlatform;

//==============================================================================
// Backend

@assetsRoute def assetsRoute: "Assets/";

//==============================================================================
// Frontend

def PRIMARY_COLOR: Color("8e50ef");

func createHeader (): SrdRef[Widget] {
    return Box({}).{
        style.{
            width = "100%";
            height = "40pt";
            padding = Quad(5, 0);
            background = PRIMARY_COLOR;
            borderColor = PRIMARY_COLOR;
            borderWidth = Quad(1.5);
            borderStyle = "solid";
            display = "flex";
            layout = "column";
        };
        addChildren({
            Text(String("Alusus Web Platform Examples - Canvas")).{ style.{
                fontColor = Color("fff");
                fontSize = 21.0;
                width = "100%";
                height = "100%";
                background = PRIMARY_COLOR;
                margin = Quad(5, 15);
            } },
        });
    }~cast[SrdRef[Widget]];
}

class Position {
    def x: Int;
    def y: Int;
}

@uiEndpoint["/", "WebPlatform Example - Canvas"]
func main {
    // Load assets from the server.
    def img: ImageResource;
    def music: AudioResource;
    def sound: AudioResource;
    await(Promises.Promise[Int].all({
        img.load("Assets/logo.svg"),
        loadFont("AlususMono", "Assets/AlususMono.otf"),
        music.load("Assets/music.mp3"),
        sound.load("Assets/sound.mp3")
    }).ignoreResult());

    def pos: Position;
    pos.x = 200;
    pos.y = 150;
    def delta: Position;
    delta.x = delta.y = 0;
    def pressed: Bool = 0;
    def pointerLocked: Bool = false;
    def fullscreen: Bool = false;
    def gamepadsCount: Int = 0;

    // Build the view
    def canvas: SrdRef[Canvas];
    Window.instance.style.{
        padding = "0";
        margin = "0";
    };
    Window.instance.setView(Box({}).{
        style.{
            align = "center";
            display = "flex";
            layout = "column";
        };
        addChildren({
            createHeader(),
            Box({}).{
                style.display = "flex";
                style.layout = "row";
                addChildren({
                    Button(String("Play Music")).{
                        style.{
                            height = "30pt";
                            width = "120pt";
                            background = Color(200, 200, 200);
                            fontSize = 16.0;
                        };
                        onClick.connect(closure (music: by_ref)&(widget: ref[Widget], payload: ref[Int]) {
                            music.play(true);
                        });
                    },
                    Button(String("Stop Music")).{
                        style.{
                            height = "30pt";
                            width = "120pt";
                            background = Color(200, 200, 200);
                            fontSize = 16.0;
                        };
                        onClick.connect(closure (music: by_ref)&(widget: ref[Widget], payload: ref[Int]) {
                            music.stop();
                        });
                    },
                    Button(String("Play Sound")).{
                        style.{
                            height = "30pt";
                            width = "120pt";
                            background = Color(200, 200, 200);
                            fontSize = 16.0;
                        };
                        onClick.connect(closure (sound: by_ref)&(widget: ref[Widget], payload: ref[Int]) {
                            sound.play(false);
                        });
                    },
                    Button(String("Play Repeating Sound")).{
                        style.{
                            height = "30pt";
                            width = "180pt";
                            background = Color(200, 200, 200);
                            fontSize = 16.0;
                        };
                        onClick.connect(closure (sound: by_ref)&(widget: ref[Widget], payload: ref[Int]) {
                            sound.play(true);
                        });
                    },
                    Button(String("Stop Sound")).{
                        style.{
                            height = "30pt";
                            width = "120pt";
                            background = Color(200, 200, 200);
                            fontSize = 16.0;
                        };
                        onClick.connect(closure (sound: by_ref)&(widget: ref[Widget], payload: ref[Int]) {
                            sound.stop();
                        });
                    }
                });
            }
            Canvas().{
                canvas = this;
                bitmapWidth = String("1280px");
                bitmapHeight = String("800px");
                style.{
                    width = "100%";
                    height = "100%";
                    maxWidth = "1280px";
                    maxHeight = "800px";
                    borderWidth = Quad(2);
                    borderStyle = "solid";
                    borderColor = Color(0, 0, 0);
                    background = Color(220, 220, 220);
                };
                def dim: Dimensions(1, 1);
                onMouseMove.connect(closure (
                    pos: by_ref, dim: by_ref, pointerLocked: by_ref
                )&(
                    widget: ref[Widget], payload: ref[MouseMovePayload]
                ) {
                    if pointerLocked {
                        pos.x += payload.deltaX;
                        pos.y += payload.deltaY;
                    } else {
                        pos.x = payload.posX * 1280 / dim.width;
                        pos.y = payload.posY * 800 / dim.height;
                    }
                });
                onMouseEnter.connect(closure (widget: ref[Widget], payload: ref[Int]) {
                    this.style.borderColor = Color(0, 0, 0);
                });
                onMouseOut.connect(closure (widget: ref[Widget], payload: ref[Int]) {
                    this.style.borderColor = Color(255, 0, 0);
                });
                onMouseDown.connect(closure (pressed: by_ref)&(widget: ref[Widget], payload: ref[Int]) {
                    if payload == 0 pressed = 1;
                });
                onMouseUp.connect(closure (pressed: by_ref)&(widget: ref[Widget], payload: ref[Int]) {
                    if payload == 0 pressed = 0;
                });
                onResize.connect(closure (dim: by_ref)&(widget: ref[Widget], payload: ref[Int]) {
                    dim = this.getDimensions();
                });
            }
        });
    });

    Window.instance.{
        keysToSwallow = "ArrowUp,ArrowDown,ArrowLeft,ArrowRight";
        onKeyDown.connect(closure (
            delta: by_ref, pointerLocked: by_ref, fullscreen: by_ref
        )&(
            window: ref[Window], payload: ref[String]
        ) {
            if payload == "ArrowUp" delta.y = -5
            else if payload == "ArrowDown" delta.y = 5
            else if payload == "ArrowRight" delta.x = 5
            else if payload == "ArrowLeft" delta.x = -5
            else if payload == "Enter" {
                if fullscreen exitFullScreen()
                else canvas.requestFullScreen();
            }
            else if payload == "Space" {
                if pointerLocked exitPointerLock()
                else canvas.requestPointerLock();
            }
        });
        onKeyUp.connect(closure (delta: by_ref)&(window: ref[Window], payload: ref[String]) {
            if payload == "ArrowUp" delta.y = 0
            else if payload == "ArrowDown" delta.y = 0
            else if payload == "ArrowRight" delta.x = 0
            else if payload == "ArrowLeft" delta.x = 0;
        });
        onPointerLockChange.connect(closure (pointerLocked: by_ref)&(window: ref[Window], payload: ref[Bool]) {
            pointerLocked = payload;
        });
        onFullScreenChange.connect(closure (fullscreen: by_ref)&(window: ref[Window], payload: ref[Bool]) {
            fullscreen = payload;
            if payload canvas.requestPointerLock()
            else exitPointerLock();
        });
        onGamepadConnected.connect(closure (gamepadsCount: by_ref)&(window: ref[Window], payload: ref[String]) {
            gamepadsCount = getGamepadsCount();
        });
        onGamepadDisconnected.connect(closure (gamepadsCount: by_ref)&(window: ref[Window], payload: ref[String]) {
            gamepadsCount = getGamepadsCount();
        });
    };

    // Generate an image dynamically.
    def dynImg: ImageResource;
    def canvasRes: CanvasResource(100, 100);
    canvasRes.setLineWidth(5);
    canvasRes.setStrokeStyle("#ff5555");
    canvasRes.drawLine(0, 0, 100, 100);
    canvasRes.drawLine(100, 0, 0, 100);
    def points: Array [Int]({ 25, 25, 75, 25, 75, 75, 25, 75 });
    canvasRes.drawPolygon(4, points.buf, false);
    dynImg.initFromCanvas(canvasRes);

    // Animation loop.
    def x: Int = -80;
    startTimer(8000, closure (
        x: by_ref, img: by_ref, dynImg: by_ref, pos: by_ref, delta: by_ref, pressed: by_ref, gamepadsCount: by_ref
    ) & (json: Json) {
        canvas.clear();
        canvas.drawLine(0,0, 100,100);
        canvas.drawCircle(100,180, 90,0 );
        def points: Array [Int]({ 50, 50, 100, 50, 100, 100, 50, 100, 25, 75 });
        canvas.setFillStyle("black", "blue", 0, 0, 100, 100);
        canvas.drawPolygon(5, points.buf, true);
        def TEXT: "Alusus";
        canvas.drawText(TEXT, "30px AlususMono", 550, 150);

        def size: Int = Math.sin(3.14 * x / 320.0) * 40 + 100;
        def y1: Int = Math.sin(3.14 * x / 320.0) * 100 + 400 - size / 2;
        def y2: Int = Math.cos(3.14 * x / 320.0) * 100 + 400 - size / 2;
        def alpha: Float = Math.sin(3.14 * x / 80.0) / 4 + 0.75;
        canvas.drawImage(img, x, y1, size, size, alpha);
        canvas.drawImage(dynImg, x, y2, size, size, alpha);

        if gamepadsCount > 0 {
            delta.x = getGamepadAxis(0, 0) * 5;
            delta.y = getGamepadAxis(0, 1) * 5;
            pressed = getGamepadButton(0, 0) > 0.5;
        }

        if pressed canvas.drawImage(img, pos.x, pos.y, size, size, alpha)
        else canvas.drawImage(dynImg, pos.x, pos.y, size, size, alpha);
        if ++x >= 1280 x = -80;
        pos.x += delta.x;
        pos.y += delta.y;
    });

    runEventLoop();
}


Console.print("Starting server on port 8010...\nURL: http://localhost:8010/\n");
runServer({ "listening_ports", "8010", "static_file_max_age", "0" });

