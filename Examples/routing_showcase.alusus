import "Apm";
Apm.importFile("Alusus/WebPlatform");
use Srl;
use WebPlatform;

//==============================================================================
// Backend

@assetsRoute def assetsRoute: "Assets/";

//==============================================================================
// Constants

def loremIpsum:
    "# Lorem Ipsum\n"
    "\n"
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna"
    "aliqua. Libero id faucibus nisl tincidunt eget nullam. Dui accumsan sit amet nulla facilisi morbi. Vulputate mi sit"
    "amet mauris commodo quis imperdiet massa. Eget lorem dolor sed viverra ipsum. Tristique magna sit amet purus gravida"
    "quis blandit turpis cursus. Iaculis nunc sed augue lacus.\n"
    "\n"
    "Curabitur vitae nunc sed velit dignissim. Et malesuada fames ac turpis. Lorem ipsum dolor sit amet consectetur"
    "adipiscing elit duis. Maecenas pharetra convallis posuere morbi leo urna molestie at elementum. Vitae aliquet nec"
    "ullamcorper sit. Egestas egestas fringilla phasellus faucibus scelerisque eleifend donec pretium. Aenean vel elit"
    "scelerisque mauris pellentesque pulvinar pellentesque habitant.\n"
    "\n"
    "## Sub Section\n"
    "\n"
    "* item 1\n"
    "* item 2\n"
    "* item 3\n"
    "  * item 3.1\n"
    "  * item 3.2\n"
    "\n"
    "## Credit\n"
    "\n"
    "Developed using [Alusus Language](https://alusus.org) and "
    "[Alusus Web Platform](https://github.com/Alusus/WebPlatform).";

//==============================================================================
// Frontend Components

class MenuButton {
    @injection def component: Component;

    handler this~init(link: String, label: String) {
        this.view = Box({}).{
            style.{
                layout = Layout.ROW;
                align = Align.CENTER;
                textAlign = TextAlign.CENTER;
                width = Length.pt(60);
                cursor = Cursor.POINTER;
                transformTransition = Transition(0.3);
            };
            style(">label").{
                fontSize = Length.pt(14.0);
                fontColor = Color("444");
            }
            style({ StateSelector.HOVER }).{
                transform = Transform.scale(1.3);
            }
            style({ StateSelector.HOVER, ">label" }).{
                fontSize = Length.pt(14.0);
                fontColor = Color("000");
            }
            onClick.connect(closure (widget: ref[Widget], payload: ref[Int]) {
                Window.instance.pushLocation(link);
            });
            addChildren({
                Text(label).{
                    className = String("label")
                }
            });
        };
    }

    handler this_type(link: String, label: String): SrdRef[MenuButton] {
        return SrdRef[MenuButton]().{ alloc()~init(link, label) };
    }
}

class SideButton {
    @injection def component: Component;
    def onButtonClicked: closure();

    handler this~init(label: String) {
        def self: ref[this_type](this);
        this.view = Box({}).{
            style.{
                align = Align.CENTER;
                cursor = Cursor.POINTER;
                width = Length.pt(40);
                textAlign = TextAlign.CENTER;
            };
            style(">label").{
                fontSize = Length.pt(14.0);
                fontColor = Color("444");
            }
            style({ StateSelector.HOVER, ">label" }).{
                fontSize = Length.pt(14.0);
                fontColor = Color("000");
            }
            onClick.connect(closure (widget: ref[Widget], payload: ref[Int]) {
                self.onButtonClicked();
            });
            addChildren({
                Text(label).{
                    className = String("label")
                }
            });
        };
    }

    handler this_type(label: String): SrdRef[SideButton] {
        return SrdRef[SideButton]().{ alloc()~init(label) };
    }
}

class Header {
    @injection def component: Component;
    def indicator: SrdRef[Box];

    handler this~init() {
        def self: ref[this_type](this);
        this.view = Box({}).{
            style.{
                width = Length.percent(100);
                height = Length.pt(85);
                padding = Length4.pt(4, 0, 0, 0);
                borderWidth = Length4.pt(0, 0, 3, 0);
                borderStyle = BorderStyle.SOLID;
                borderColor = Color("666");
                justify = Justify.SPACE_BETWEEN;
                align = Align.CENTER;
                display = Display.FLEX;
                layout = Layout.COLUMN;
            };
            def i: Int;
            for i = 0, i < 3, ++i {
                style(String(">>indicator")+i).{
                    width = Length.pt(60);
                    height = Length.pt(3);
                    background = Background(Color(0, 0, 150));
                    transform = Transform.translate(Length.pt(i * 60), Length.pt(0));
                    transformTransition = Transition(0.5);
                };
            }

            addChildren({
                Box({}).{
                    style.{
                        display = Display.FLEX;
                        layout = Layout.ROW;
                        justify = Justify.SPACE_BETWEEN;
                        align = Align.CENTER;
                    };
                    addChildren({
                        Image().{
                            url = String("/Assets/wblogo.svg");
                            style.{
                                height = Length.pt(50);
                                padding = Length4.pt(0, 10);
                            };
                        },
                        Box({ Text(String("Alusus Web Platform Example")).{ style.{
                            fontColor = Color("000");
                            fontSize = Length.pt(21.0);
                            height = Length.percent(100);
                            padding = Length4.pt(0, 10);
                            textShadow = TextShadow(Length.pt(2), Length.pt(2), Length.pt(4), Color(0, 0, 0, 100));
                        } } })
                    });
                },
                Box({}).{
                    style.{
                        display = Display.FLEX;
                        layout = Layout.ROW;
                        justify = Justify.CENTER;
                    };
                    addChildren({
                        MenuButton(String("/one"), String("One")),
                        MenuButton(String("/two"), String("Two")),
                        MenuButton(String("/three"), String("Three"))
                    });
                },
                Box({}).{
                    style.{
                        display = Display.FLEX;
                        layout = Layout.ROW;
                        justify = Justify.START;
                        width = Length.pt(180);
                        padding = Length4.pt(0, 0, 4, 0);
                    };
                    addChildren({
                        Box({}).{
                            self.indicator = this;
                        }
                    });
                }
            });
        };
    }

    handler this.updateIndicator(i: Int) {
        this.indicator.className = String("indicator") + i;
    }

    handler this_type(): SrdRef[Header] {
        return SrdRef[Header].construct();
    }
}

def article: String(loremIpsum);

class Article {
    @injection def component: Component;
    def docView: SrdRef[DocView];

    handler this~init() {
        def self: ref[this_type](this);
        this.view = Box({}).{
            style.{
                align = Align.END;
                display = Display.FLEX;
                layout = Layout.COLUMN;
                height = Length.percent(100);
                overflowY = Overflow.SCROLL;
            };
            addChildren({
                SideButton(String("ðŸ–‰")).{
                    onButtonClicked = closure() {
                        Window.instance.pushLocation("/three/edit");
                    }
                },
                DocView().{
                    self.docView = this;
                    style.{
                        width = Length.percent(100);
                        fontColor = Color(0, 0, 0);
                        fontSize = Length.pt(20.0);
                    }
                    setMarkdown(article);
                }
            });
        };
    }

    handler this_type(): SrdRef[Article] {
        return SrdRef[Article].construct();
    }
}

class ArticleEditor {
    @injection def component: Component;
    def textInput: SrdRef[TextInput];
    def onUpdated: closure(String);

    handler this~init(str: String) {
        def self: ref[this_type](this);
        this.view = Box({}).{
            style.{
                width = Length.percent(100);
                height = Length.percent(100);
                align = Align.END;
                display = Display.FLEX;
                layout = Layout.COLUMN;
                background = Background(Color("fff"));
            };
            addChildren({
                SideButton(String("ðŸ’¾")).{ onButtonClicked = closure() {
                    self.onUpdated(self.textInput.text);
                } },
                TextInput().{
                    style.{
                        width = Length.percent(100);
                        height = Length.percent(100);
                        fontSize = Length.pt(20.0);
                    };
                    text = str;
                    self.textInput = this;
                },
            });
        };
    }

    handler this_type(label: String): SrdRef[ArticleEditor] {
        return SrdRef[ArticleEditor]().{ alloc()~init(label) };
    }
}

class ArticleView {
    @injection def component: Component;
    def articleView: SrdRef[Article];

    handler this~init() {
        def self: ref[this_type](this);
        this.view = RoutingStack().{
            style.{
                width = Length.percent(100);
                height = Length.percent(100);
            };
            setTransition(
                createSlideStackTransition(0.5, true, false),
                createSlideStackTransition(0.5, true, true)
            );
            route(String("^/three")) = closure(RoutePayload): SrdRef[Widget] {
                self.articleView = Article();
                return self.articleView;
            };
            route(String("^/three/edit")) = closure(RoutePayload): SrdRef[Widget] {
                return ArticleEditor(article).{
                    this.onUpdated = closure(t: String) {
                        article = t;
                        self.articleView.docView.setMarkdown(article);
                        Window.instance.pushLocation("/three");
                    }
                };
            };
        };
    }

    handler this_type(): SrdRef[ArticleView] {
        return SrdRef[ArticleView].construct();
    }
}

class ImgView {
    @injection def component: Component;

    handler this~init(path: String) {
        this.view = Image().{
            url = path;
            style.{
                width = Length.percent(100);
                height = Length.percent(100);
            };
        };
    }

    handler this_type(path: String): SrdRef[ImgView] {
        return SrdRef[ImgView]().{ alloc()~init(path) };
    }
}

class ImageViewer {
    @injection def component: Component;

    handler this~init() {
        this.view = Box({}).{
            style.{
                width = Length.percent(100);
                height = Length.percent(100);
                display = Display.FLEX;
                layout = Layout.ROW;
            };
            addChildren({
                Box({}).{
                    style.{
                        layout = Layout.COLUMN;
                        background = Background(Color("eee"));
                    };
                    addChildren({
                        SideButton(String("1")).{ onButtonClicked = closure() { Window.instance.pushLocation("/one/img1") } },
                        SideButton(String("2")).{ onButtonClicked = closure() { Window.instance.pushLocation("/one/img2") } },
                        SideButton(String("3")).{ onButtonClicked = closure() { Window.instance.pushLocation("/one/img3") } },
                    });
                },
                Box({}).{
                    style.{
                        flex = Flex(1, 1);
                    };
                    addChildren({
                        RoutingSwitcher().{
                            style.{
                                flex = Flex(1, 1);
                                height = Length.pt(500);
                            };
                            setTransition(
                                createFadeSwitcherTransition(1.0),
                                createFadeSwitcherTransition(1.0)
                            );
                            route("^/one/img1$") = closure(RoutePayload): SrdRef[Widget] {
                                return ImgView(String("/Assets/wblogo.svg"));
                            };
                            route("^/one/img2$") = closure(RoutePayload): SrdRef[Widget] {
                                return ImgView(String("/Assets/future-musume.jpg"));
                            };
                            route("^/one/img3$") = closure(RoutePayload): SrdRef[Widget] {
                                return ImgView(String("/Assets/bridge.png"));
                            };
                        }
                    });
                }
            });
        }
    }

    handler this_type(): SrdRef[ImageViewer] {
        return SrdRef[ImageViewer].construct();
    }
}

class DigitView {
    @injection def component: Component;

    handler this~init(label: String) {
        this.view = Box({}).{
            style.{
                width = Length.percent(100);
                height = Length.percent(100);
                display = Display.FLEX;
                align = Align.CENTER;
                justify = Justify.CENTER;
            };
            addChildren({
                Box({}).{
                    style.{
                        width = Length.percent(90);
                        height = Length.percent(90);
                        borderRadius = Length4.pt(30);
                        borderColor = Color("444");
                        borderStyle = BorderStyle.SOLID;
                        borderWidth = Length4.pt(10);
                        display = Display.FLEX;
                        align = Align.CENTER;
                        justify = Justify.CENTER;
                        boxShadow = BoxShadow(Length.pt(3), Length.pt(3), Length.pt(5), Length.pt(0), Color(0, 0, 0, 100));
                    };
                    addChildren({
                        Text(label).{
                            style.{
                                fontColor = Color(0, 0, 0);
                                fontSize = Length.pt(250.0);
                            }
                        }
                    });
                }
            });
        };
    }

    handler this_type(label: String): SrdRef[DigitView] {
        return SrdRef[DigitView]().{ alloc()~init(label) };
    }
}

class CounterView {
    @injection def component: Component;
    @shared def currentIndex: Int;
    def switcher: SrdRef[Switcher];

    handler this~init() {
        def self: ref[this_type](this);
        this.view = Box({}).{
            style.{
                width = Length.percent(100);
                height = Length.percent(100);
                display = Display.FLEX;
                layout = Layout.ROW;
            };
            addChildren({
                Box({}).{
                    style.{
                        layout = Layout.COLUMN;
                        background = Background(Color("eee"));
                    };
                    addChildren({
                        SideButton(String("-")).{ onButtonClicked = closure() {
                            self.switcher.switchTo(DigitView(String() + (--currentIndex)), String("backward"));
                        } },
                        SideButton(String("+")).{ onButtonClicked = closure() {
                            self.switcher.switchTo(DigitView(String() + (++currentIndex)), String("forward"));
                        } }
                    });
                },
                Box({}).{
                    style.{
                        flex = Flex(1, 1);
                    };
                    addChildren({
                        Switcher().{
                            style.{
                                flex = Flex(1, 1);
                                height = Length.pt(500);
                            };
                            setTransition(String("forward"), createSlideSwitcherTransition(0.5, true, false));
                            setTransition(String("backward"), createSlideSwitcherTransition(0.5, true, true));
                            switchTo(DigitView(String() + currentIndex));
                            self.switcher = this;
                        }
                    });
                }
            });
        }
    }

    handler this_type(): SrdRef[CounterView] {
        return SrdRef[CounterView].construct();
    }
}

//==============================================================================
// Frontend Pages

@uiEndpoint["/*"]
@title["WebPlatform Example"]
func main {
    def switcher: SrdRef[Switcher];
    def header: SrdRef[Header];
    Window.instance.style.{
        padding = Length4.pt(0);
        margin = Length4.pt(0);
    };
    Window.instance.setView(Box({}).{
        style.{
            display = Display.FLEX;
            layout = Layout.COLUMN;
            align = Align.CENTER;
        };
        addChildren({
            Header().{ header = this },
            RoutingSwitcher().{
                style.{
                    width = Length.percent(100);
                    maxWidth = Length.pt(600);
                    minHeight = Length.pt(500);
                };
                setTransition(
                    createSlideSwitcherTransition(0.5, false, false),
                    createSlideSwitcherTransition(0.5, false, true)
                );
                route("^/one") = closure(RoutePayload): SrdRef[Widget] {
                    header.updateIndicator(0);
                    return ImageViewer();
                };
                route("^/two$") = closure(RoutePayload): SrdRef[Widget] {
                    header.updateIndicator(1);
                    return CounterView();
                };
                route("^/three") = closure(RoutePayload): SrdRef[Widget] {
                    header.updateIndicator(2);
                    return ArticleView();
                };
            }
        });
    });

    runEventLoop();
}


Console.print("Starting server on port 8010...\nURL: http://localhost:8010/\n");
runServer({ "listening_ports", "8010", "static_file_max_age", "0" });

