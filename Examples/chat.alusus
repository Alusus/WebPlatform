import "Apm";
Apm.importFile("Alusus/WebPlatform");
use Srl;
use WebPlatform;

//==============================================================================
// Backend

def MAX_MESSAGES: 12;
def messages: Array[String];

@beEndpoint["POST", "/messages"]
func postMessages (conn: ptr[Http.Connection]) {
    def postData: array[Char, 1024];
    def postDataSize: Int = Http.read(conn, postData~ptr, postData~size);
    if messages.getLength() >= MAX_MESSAGES messages.remove(0);
    messages.add(String(postData~ptr, postDataSize));
    Http.print(conn, "HTTP/1.1 200 Ok\r\n\r\n");
}

@beEndpoint["GET", "/messages"]
func getMessages (conn: ptr[Http.Connection]) {
    def response: String = String.merge(messages, "<br>");
    Http.print(conn, "HTTP/1.1 200 Ok\r\n");
    Http.print(conn, "Content-Type: text/plain\r\n");
    Http.print(conn, "Cache-Control: no-cache\r\n");
    Http.print(conn, "Content-Length: %d\r\n\r\n", response.getLength());
    Http.print(conn, response.buf);
}

@assetsRoute def assetsRoute: "Assets/";

//==============================================================================
// Frontend Components

def PRIMARY_COLOR: Color("8e50ef");
def LIGHT_COLOR: Color("c380ff");

class MenuButton {
    @injection def component: Component;

    handler this~init(link: String, label: String, icon: String) {
        this.view = Box({}).{
            style.{
                padding = Quad(3);
                background = LIGHT_COLOR;
                display = "flex";
                layout = "row";
                align = "center";
            };
            style(">>icon").{
                padding = Quad(0, 4);
                width = "20pt";
                height = "0pt";
                transition = ".2s";
            }
            style(">>label").{
                fontSize = 16.0;
                fontColor = Color("eee");
            }
            style({ StateSelector.HOVER, ">>icon" }).{
                height = "20pt";
                transition = ".2s";
            }
            style({ StateSelector.HOVER, ">>label" }).{
                fontSize = 16.0;
                fontColor = Color("fff");
            }
            addChildren({
                Hyperlink(link, Text(label).{
                    className = String("label")
                }),
                Hyperlink(link, Image().{
                    url = icon;
                    className = String("icon");
                })
            });
        };
    }

    handler this_type(link: String, label: String, icon: String): SrdRef[MenuButton] {
        return SrdRef[MenuButton]().{ alloc()~init(link, label, icon) };
    }
}

class Header {
    @injection def component: Component;

    handler this~init() {
        this.view = Box({}).{
            style.{
                width = "calc(100% - 3pt)";
                height = "85pt";
                padding = Quad(4, 0, 0, 0);
                background = PRIMARY_COLOR;
                borderWidth = Quad(1.5);
                borderStyle = "solid";
                borderColor = PRIMARY_COLOR;
                justify = "space-between";
                display = "flex";
                layout = "column";
            };

            addChildren({
                Box({}).{
                    style.{
                        display = "flex";
                        layout = "row";
                        justify = "space-between";
                        align = "center";
                    };
                    addChildren({
                        Box({ Text(String("Alusus Web Platform Examples - Chat")).{ style.{
                            fontColor = Color("fff");
                            fontSize = 18.0;
                            height = "100%";
                            padding = Quad(0, 10);
                        } } }),
                        Image().{
                            url = String("/Assets/wblogo.svg");
                            style.{
                                height = "50pt";
                                padding = Quad(0, 10);
                            };
                        }
                    });
                },
                Box({}).{
                    style.{
                        display = "flex";
                        layout = "row";
                        justify = "space-between";
                    };
                    addChildren({
                        MenuButton(String("/"), String("Main"), String("/Assets/chat.svg")),
                        MenuButton(String("/about"), String("About"), String("/Assets/about.svg"))
                    });
                }
            });
        };
    }

    handler this_type(): SrdRef[Header] {
        return SrdRef[Header].construct();
    }
}

class TextEntry {
    @injection def component: Component;

    def onNewEntry: closure (String);
    def textInput: SrdRef[TextInput];

    handler this.width = String {
        this.view.style.width = value;
        return value;
    }

    handler this.height = String {
        this.view.style.height = value;
        return value;
    }

    handler this~init() {
        def self: ref[this_type](this);

        this.view = Box({}).{
            style.{
                display = "flex";
                layout = "row";
                justify = "space-between";
                borderWidth = Quad(1.5);
                borderStyle = "solid";
                borderColor = PRIMARY_COLOR;
                background = PRIMARY_COLOR;
            };
            addChildren({
                TextInput().{
                    self.textInput = this;
                    style.{
                        width = "100%";
                        height = "100%";
                        background = Color("fff");
                        fontSize = 12.0;
                    };
                    onKeyUp.connect(closure (widget: ref[TextInput], payload: ref[String]) {
                        if payload == "Shift+Enter" {
                            def newData: String = String("- ") + encodeHtml(widget.getText()).trim();
                            widget.setText(String());
                            if not self.onNewEntry.isNull() self.onNewEntry(newData);
                        }
                    });
                },
                Button(String("Send")).{
                    style.{
                        height = "100%";
                        width = "50pt";
                        background = Color(200, 200, 200);
                        fontSize = 16.0;
                        justify = "center";
                    };
                    onClick.connect(closure (widget: ref[Widget], payload: ref[Int]) {
                        def newData: String = String("- ") + encodeHtml(self.textInput.getText()).trim();
                        self.textInput.setText(String());
                        if not self.onNewEntry.isNull() self.onNewEntry(newData);
                    });
                }
            });
        };
    }

    handler this_type(): SrdRef[TextEntry] {
        return SrdRef[TextEntry].construct();
    }
}

func encodeHtml(str: String): String {
    return str
        .replace("\n", "<br>")
        .replace(",", "&comma;")
        .replace("\"", "&quot;");
}

//==============================================================================
// Frontend Pages

@uiEndpoint["/", "WebPlatform Example - Chat"]
func main {
    setElementAttribute("body", "style", "padding: 0; margin: 0;");

    def onFetch: closure (json: Json);

    Window.instance.setView(Box({}).{
        style.{
            height = "100%";
            justify = "space-between";
            display = "flex";
            layout = "column";
        };
        addChildren({
            Header(),
            Box({}).{
                style.{
                    width = "calc(100% - 10pt)";
                    height = "auto-flex";
                    padding = Quad(5);
                    display = "flex";
                    layout = "column";
                    flex = "auto";
                };
                def notificationLabel: SrdRef[Text];
                addChildren({
                    Text(String()).{
                        notificationLabel = this;
                        style.{
                            width = "100%";
                            height = "20pt";
                            fontColor = Color(200, 50, 50);
                            fontSize = 10.0;
                        };
                    },
                    Text(String()).{
                        style.{
                            width = "100%";
                            height = "100%";
                            fontColor = Color(50, 50, 50);
                            fontSize = 20.0;
                        };
                        onFetch = closure (json: Json) {
                            def status: Int = json.getObject("eventData").getInt("status");
                            if status >= 200 and status < 300 {
                                def data: String = json.getObject("eventData").getString("body");
                                if this.getText() != data {
                                    this.setText(data);
                                }
                                if notificationLabel.getText() != "" {
                                    notificationLabel.setText(String(""));
                                }
                            } else {
                                notificationLabel.setText(String("Connection error. HTTP status: ") + status);
                            }
                        };
                    }
                });
            },
            TextEntry().{
                width = String("calc(100% - 3pt)");
                height = String("50pt");
                onNewEntry = closure (newData: String) {
                    sendRequest(
                        "POST", "/messages", "Content-Type: application/text", newData, 10000,
                        closure (Json) {}
                    );
                    sendRequest("GET", "/messages", null, null, 500, onFetch);
                };
            }
        })
    });

    startTimer(500000, closure (json: Json) {
        sendRequest("GET", "/messages", null, null, 500, onFetch);
    });
    sendRequest("GET", "/messages", null, null, 500, onFetch);

    runEventLoop();
}

@uiEndpoint["/about", "WebPlatform Example - Chat"]
func about {
    setElementAttribute("body", "style", "padding: 0; margin: 0;");

    Window.instance.setView(Box({}).{
        style.{
            display = "flex";
            layout = "column";
        };
        addChildren({
            Header(),
            Text(String("Chat Example")).{ style.{
                fontColor = Color(0, 0, 0);
                fontSize = 30.0;
            } },
            Text(String("Built using Alusus Web Platform")).{ style.{
                fontColor = Color(0, 0, 0);
                fontSize = 20.0;
            } }
        })
    });

    runEventLoop();
}


Console.print("Starting server on port 8010...\nURL: http://localhost:8010/\n");
runServer({ "listening_ports", "8010", "static_file_max_age", "0" });

