import "Build";
import "Apm";
Apm.importFile("Alusus/Threading");
Apm.importFile("Alusus/WebPlatform");
use Srl;
use WebPlatform;

//==============================================================================
// Backend

def MAX_MESSAGES: 12;
def messages: Array[String];
def mutex: Threading.Mutex;
Threading.initMutex(mutex~ptr, 0);

@beEndpoint["POST", "/messages"]
func postMessages (conn: ptr[Http.Connection]) {
    def postData: array[Char, 1024];
    def postDataSize: Int = Http.read(conn, postData~ptr, postData~size);
    Threading.lockMutex(mutex~ptr);
    if messages.getLength() >= MAX_MESSAGES messages.remove(0);
    messages.add(String(postData~ptr, postDataSize));
    Threading.unlockMutex(mutex~ptr);
    Http.print(conn, "HTTP/1.1 200 Ok\r\n\r\n");
}

@beEndpoint["GET", "/messages"]
func getMessages (conn: ptr[Http.Connection]) {
    Threading.lockMutex(mutex~ptr);
    def response: String = String.merge(messages, "\n");
    Threading.unlockMutex(mutex~ptr);
    Http.print(conn, "HTTP/1.1 200 Ok\r\n");
    Http.print(conn, "Content-Type: text/plain\r\n");
    Http.print(conn, "Cache-Control: no-cache\r\n");
    Http.print(conn, "Content-Length: %d\r\n\r\n", response.getLength());
    Http.print(conn, response.buf);
}

@assetsRoute def assetsRoute: "Assets/";

//==============================================================================
// Frontend Components

def PRIMARY_COLOR: Color("8e50ef");
def LIGHT_COLOR: Color("c380ff");

class MenuButton {
    @injection def component: Component;

    handler this~init(link: String, label: String, icon: String) {
        this.view = Box({}).{
            style.{
                padding = Length4.pt(3);
                background = Background(LIGHT_COLOR);
                display = Display.FLEX;
                layout = Layout.ROW;
                align = Align.CENTER;
            };
            style(">>icon").{
                padding = Length4.pt(0, 4);
                width = Length.pt(20);
                height = Length.pt(0);
                heightTransition = Transition(0.2);
            }
            style(">>label").{
                fontSize = Length.pt(16.0);
                fontColor = Color("eee");
            }
            style({ StateSelector.HOVER, ">>icon" }).{
                height = Length.pt(20)
            }
            style({ StateSelector.HOVER, ">>label" }).{
                fontSize = Length.pt(16.0);
                fontColor = Color("fff");
            }
            addChildren({
                Hyperlink(link, Text(label).{
                    className = String("label")
                }).{ style.textDecoration = TextDecoration.NONE },
                Hyperlink(link, Image().{
                    url = icon;
                    className = String("icon");
                })
            });
        };
    }

    handler this_type(link: String, label: String, icon: String): SrdRef[MenuButton] {
        return SrdRef[MenuButton]().{ alloc()~init(link, label, icon) };
    }
}

class Header {
    @injection def component: Component;

    handler this~init() {
        this.view = Box({}).{
            style.{
                width = Length.percent(100) - Length.pt(3);
                height = Length.pt(85);
                padding = Length4.pt(4, 0, 0, 0);
                background = Background(PRIMARY_COLOR);
                borderWidth = Length4.pt(1.5);
                borderStyle = BorderStyle.SOLID;
                borderColor = PRIMARY_COLOR;
                justify = Justify.SPACE_BETWEEN;
                display = Display.FLEX;
                layout = Layout.COLUMN;
            };

            addChildren({
                Box({}).{
                    style.{
                        display = Display.FLEX;
                        layout = Layout.ROW;
                        justify = Justify.SPACE_BETWEEN;
                        align = Align.CENTER;
                    };
                    addChildren({
                        Box({ Text(String("Alusus Web Platform Examples - Chat")).{ style.{
                            fontColor = Color("fff");
                            fontSize = Length.pt(18.0);
                            height = Length.percent(100);
                            padding = Length4.pt(0, 10);
                        } } }),
                        Image().{
                            url = String("/Assets/wblogo.svg");
                            style.{
                                height = Length.pt(50);
                                padding = Length4.pt(0, 10);
                            };
                        }
                    });
                },
                Box({}).{
                    style.{
                        display = Display.FLEX;
                        layout = Layout.ROW;
                        justify = Justify.SPACE_BETWEEN;
                    };
                    addChildren({
                        MenuButton(String("/"), String("Main"), String("/Assets/chat.svg")),
                        MenuButton(String("/about"), String("About"), String("/Assets/about.svg"))
                    });
                }
            });
        };
    }

    handler this_type(): SrdRef[Header] {
        return SrdRef[Header].construct();
    }
}

class TextEntry {
    @injection def component: Component;

    def onNewEntry: closure (String);
    def textInput: SrdRef[TextInput];

    handler this.width = SrdRef[Length] {
        this.view.style.width = value;
        return value;
    }

    handler this.height = SrdRef[Length] {
        this.view.style.height = value;
        return value;
    }

    handler this~init() {
        def self: ref[this_type](this);

        this.view = Box({}).{
            style.{
                display = Display.FLEX;
                layout = Layout.ROW;
                justify = Justify.SPACE_BETWEEN;
                borderWidth = Length4.pt(1.5);
                borderStyle = BorderStyle.SOLID;
                borderColor = PRIMARY_COLOR;
                background = Background(PRIMARY_COLOR);
            };
            addChildren({
                TextInput().{
                    self.textInput = this;
                    style.{
                        width = Length.percent(100);
                        height = Length.percent(100);
                        background = Background(Color("fff"));
                        fontSize = Length.pt(12.0);
                    };
                    onKeyUp.connect(closure (widget: ref[TextInput], payload: ref[String]) {
                        if payload == "Shift+Enter" {
                            def newData: String = String("- ") + widget.getText().trim();
                            widget.setText(String());
                            if not self.onNewEntry.isNull() self.onNewEntry(newData);
                        }
                    });
                },
                Button(String("Send")).{
                    style.{
                        height = Length.percent(100);
                        width = Length.pt(50);
                        setRawStyle[background](String("lightblue"));
                        fontSize = Length.pt(16.0);
                        justify = Justify.CENTER;
                    };
                    onClick.connect(closure (widget: ref[Widget], payload: ref[Int]) {
                        def newData: String = String("- ") + self.textInput.getText().trim();
                        self.textInput.setText(String());
                        if not self.onNewEntry.isNull() self.onNewEntry(newData);
                    });
                }
            });
        };
    }

    handler this_type(): SrdRef[TextEntry] {
        return SrdRef[TextEntry].construct();
    }
}

//==============================================================================
// Frontend Pages

@uiEndpoint["/"]
@title["WebPlatform Example - Chat"]
func main {
    def onFetch: closure (json: Json);

    Window.instance.style.{
        padding = Length4.pt(0);
        margin = Length4.pt(0);
    };
    Window.instance.setView(Box({}).{
        style.{
            height = Length.percent(100);
            justify = Justify.SPACE_BETWEEN;
            display = Display.FLEX;
            layout = Layout.COLUMN;
        };
        addChildren({
            Header(),
            Box({}).{
                style.{
                    width = Length.percent(100) - Length.pt(10);
                    padding = Length4.pt(5);
                    display = Display.FLEX;
                    layout = Layout.COLUMN;
                    flex = Flex(1);
                };
                def notificationLabel: SrdRef[Text];
                addChildren({
                    Text(String()).{
                        notificationLabel = this;
                        style.{
                            width = Length.percent(100);
                            height = Length.pt(20);
                            fontColor = Color(200, 50, 50);
                            fontSize = Length.pt(10.0);
                        };
                    },
                    Text(String()).{
                        style.{
                            width = Length.percent(100);
                            height = Length.percent(100);
                            fontColor = Color(50, 50, 50);
                            fontSize = Length.pt(20.0);
                        };
                        onFetch = closure (json: Json) {
                            def status: Int[64] = json("eventData")("status");
                            if status >= 200 and status < 300 {
                                def data: String = json("eventData")("body");
                                if this.getText() != data {
                                    this.setText(data);
                                }
                                if notificationLabel.getText() != "" {
                                    notificationLabel.setText(String(""));
                                }
                            } else {
                                notificationLabel.setText(String("Connection error. HTTP status: ") + status);
                            }
                        };
                    }
                });
            },
            TextEntry().{
                width = Length.percent(100) - Length.pt(3);
                height = Length.pt(50);
                onNewEntry = closure (newData: String) {
                    sendRequest(
                        "POST", "/messages", "Content-Type: application/text", newData, 10000,
                        closure (Json) {}
                    );
                    sendRequest("GET", "/messages", null, null, 500, onFetch);
                };
            }
        })
    });

    startTimer(500000, closure (json: Json) {
        sendRequest("GET", "/messages", null, null, 500, onFetch);
    });
    sendRequest("GET", "/messages", null, null, 500, onFetch);

    runEventLoop();
}

@uiEndpoint["/about"]
@title["WebPlatform Example - Chat"]
func about {
    Window.instance.style.{
        padding = Length4.pt(0);
        margin = Length4.pt(0);
    };
    Window.instance.setView(Box({}).{
        style.{
            display = Display.FLEX;
            layout = Layout.COLUMN;
        };
        addChildren({
            Header(),
            Text(String("Chat Example")).{ style.{
                fontColor = Color(0, 0, 0);
                fontSize = Length.pt(30.0);
            } },
            Text(String("Built using Alusus Web Platform")).{ style.{
                fontColor = Color(0, 0, 0);
                fontSize = Length.pt(20.0);
            } }
        })
    });

    runEventLoop();
}

//==============================================================================
// Project Control

mainAssetsPath = "Build/Assets/"؛
uiEndpointsPath = "Build/UiEndpoints/"؛

func startChatServer {
    Console.print("Starting server on port 8010...\nURL: http://localhost:8010/\n");
    runServer({ "listening_ports", "8010", "static_file_max_age", "0" });
}

@expname[main]
func start (argCount: Int، args: ptr[array[CharsPtr]]): Int {
    mainAssetsPath = "Assets/"؛
    uiEndpointsPath = "UiEndpoints/"؛

    startChatServer()؛
    return 0؛
}

func buildChat {
    System.exec("cp -r Assets Build/")؛
    def exe: Build.Exe(start~ast، "Build/chat")؛
    exe.addDependencies(WebPlatform.getBuildDependencies())؛
    if exe.generate() {
        Console.print("Build complete.\n")؛
    } else {
        System.fail(1، "Build failed.")؛
    }
}

if Process.argCount == 3 {
    def arg: CharsPtr = Process.args~cnt(Process.argCount - 1)؛
    if String.isEqual(arg، "build") {
        buildChat()؛
    } else {
        Console.print(
            "Error: Invalid argument\n"
            "Usage:\n"
            "  alusus chat.alusus [build]\n"
        );
    }
} else {
    startChatServer()؛
}
