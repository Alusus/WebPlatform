@merge module WebPlatform {
    //==========================================================================
    // Widget
    // The base class of all widgets.
    class Widget {
        handler this~init() {
        }

        //--------------------
        // Abstract Properties

        handler this.id: String as_ptr;
        defineAbstractProperty[className, ClassName, String];
        handler this.style: SrdRef[StyleSet] as_ptr;
        handler this.style = SrdRef[StyleSet] as_ptr;

        //----------------
        // Abstract Events

        handler this.onResize: ref[DomEventSignal[Widget, Int]] as_ptr;
        handler this.onMouseEnter: ref[DomEventSignal[Widget, Int]] as_ptr;
        handler this.onMouseOut: ref[DomEventSignal[Widget, Int]] as_ptr;
        handler this.onMouseDown: ref[DomEventSignal[Widget, MouseButtonPayload]] as_ptr;
        handler this.onMouseUp: ref[DomEventSignal[Widget, MouseButtonPayload]] as_ptr;
        handler this.onMouseMove: ref[DomEventSignal[Widget, MouseMovePayload]] as_ptr;
        handler this.onTouchStart: ref[DomEventSignal[Widget, Array[TouchPayload]]] as_ptr;
        handler this.onTouchEnd: ref[DomEventSignal[Widget, Array[TouchPayload]]] as_ptr;
        handler this.onTouchMove: ref[DomEventSignal[Widget, Array[TouchPayload]]] as_ptr;
        handler this.onClick: ref[DomEventSignal[Widget, Int]] as_ptr;

        //-----------------
        // Abstract Methods

        handler this.build(ownerId: String, nextSiblingId: String) as_ptr;
        handler this.unbuild() as_ptr;
        handler this.update() as_ptr;

        //--------
        // Methods

        handler this.getDimensions(): Dimensions {
            if this.id == "" return Dimensions(0, 0);
            def d: Dimensions;
            getElementDimensions(this.id, d);
            return d;
        }

        handler this.getBoundingRect(): Rectangle {
            if this.id == "" return Rectangle(0, 0, 0, 0);
            def r: Rectangle;
            getElementBoundingRect(this.id, r);
            return r;
        }

        handler this.requestPointerLock() {
            if this.id == "" return;
            WebPlatform.requestPointerLock(this.id);
        }

        handler this.requestFullScreen() {
            if this.id == "" return;
            WebPlatform.requestFullScreen(this.id);
        }

        handler this.scrollIntoView() {
            if this.id == "" return;
            WebPlatform.scrollElementIntoView(this.id);
        }
    }
}
