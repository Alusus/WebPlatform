@merge module WebPlatform {
    //==========================================================================
    // Widget
    // The base class of all widgets.
    class Widget {
        // Variables
        def _style: SrdRef[StyleSet];
        def id: String;

        // Properties
        generateProperty[className, ClassName, String];

        // Events
        def onResize: DomEventSignal[Widget, Int];
        def onResizeId: ArchInt = -1;
        def onMouseEnter: DomEventSignal[Widget, Int];
        def onMouseEnterId: ArchInt = -1;
        def onMouseOut: DomEventSignal[Widget, Int];
        def onMouseOutId: ArchInt = -1;
        def onMouseDown: DomEventSignal[Widget, MouseButtonPayload];
        def onMouseDownId: ArchInt = -1;
        def onMouseUp: DomEventSignal[Widget, MouseButtonPayload];
        def onMouseUpId: ArchInt = -1;
        def onMouseMove: DomEventSignal[Widget, MouseMovePayload];
        def onMouseMoveId: ArchInt = -1;
        def onTouchStart: DomEventSignal[Widget, Array[TouchPayload]];
        def onTouchStartId: ArchInt = -1;
        def onTouchEnd: DomEventSignal[Widget, Array[TouchPayload]];
        def onTouchEndId: ArchInt = -1;
        def onTouchMove: DomEventSignal[Widget, Array[TouchPayload]];
        def onTouchMoveId: ArchInt = -1;
        def onClick: DomEventSignal[Widget, Int];
        def onClickId: ArchInt = -1;

        handler this~init() {
            this.onResize.owner~no_deref = this;
            this.onMouseEnter.owner~no_deref = this;
            this.onMouseOut.owner~no_deref = this;
            this.onMouseDown.owner~no_deref = this;
            this.onMouseUp.owner~no_deref = this;
            this.onMouseMove.owner~no_deref = this;
            this.onTouchStart.owner~no_deref = this;
            this.onTouchEnd.owner~no_deref = this;
            this.onTouchMove.owner~no_deref = this;
            this.onClick.owner~no_deref = this;
        }

        //-------------------
        // Abstract Functions

        handler this.build(ownerId: String) as_ptr;
        handler this.unbuild() as_ptr;
        handler this.update() as_ptr;

        //-----------------
        // Member Functions

        handler this.onPropUpdated() this.updateCommon();

        handler this.style: SrdRef[StyleSet] {
            if this._style.isNull() {
                this._style = StyleSet();
                this._style.enableInline(closure(css: String) {
                    if this.id != "" setElementAttribute(this.id, "style", css);
                });
                if this.id != "" {
                    this._style.build();
                    this.updateCommon();
                }
            }
            return this._style;
        }

        handler this.style = SrdRef[StyleSet] {
            if this.id != "" and not this._style.isNull() {
                this._style.unbuild();
            }
            this._style = value;
            if this.id != "" and not this._style.isNull() {
                this._style.build();
            }
            this.updateCommon();
            return this._style;
        }

        handler this.buildCommon() {
            if not this._style.isNull() this._style.build();
            this.onSignalConnectionsChanged(this.onResize~ptr, this.onResize.getConnectionCount());
            this.onSignalConnectionsChanged(this.onMouseEnter~ptr, this.onMouseEnter.getConnectionCount());
            this.onSignalConnectionsChanged(this.onMouseOut~ptr, this.onMouseOut.getConnectionCount());
            this.onSignalConnectionsChanged(this.onMouseDown~ptr, this.onMouseDown.getConnectionCount());
            this.onSignalConnectionsChanged(this.onMouseUp~ptr, this.onMouseUp.getConnectionCount());
            this.onSignalConnectionsChanged(this.onMouseMove~ptr, this.onMouseMove.getConnectionCount());
            this.onSignalConnectionsChanged(this.onTouchStart~ptr, this.onTouchStart.getConnectionCount());
            this.onSignalConnectionsChanged(this.onTouchEnd~ptr, this.onTouchEnd.getConnectionCount());
            this.onSignalConnectionsChanged(this.onTouchMove~ptr, this.onTouchMove.getConnectionCount());
            this.onSignalConnectionsChanged(this.onClick~ptr, this.onClick.getConnectionCount());
        }

        macro handleEventHandlerUnregistration[eventId] {
            if this.eventId != -1 unregisterElementEventHandler(this.eventId);
            this.eventId = -1;
        }

        handler this.unbuildCommon() {
            if not this._style.isNull() this._style.unbuild();
            handleEventHandlerUnregistration[onResizeId];
            handleEventHandlerUnregistration[onMouseEnterId];
            handleEventHandlerUnregistration[onMouseOutId];
            handleEventHandlerUnregistration[onMouseDownId];
            handleEventHandlerUnregistration[onMouseUpId];
            handleEventHandlerUnregistration[onMouseMoveId];
            handleEventHandlerUnregistration[onTouchStartId];
            handleEventHandlerUnregistration[onTouchEndId];
            handleEventHandlerUnregistration[onTouchMoveId];
            handleEventHandlerUnregistration[onClickId];
        }

        handler this.updateCommon() {
            if this.id != "" {
                if this._style.isNull() setElementAttribute(this.id, "class", this.className)
                else setElementAttribute(this.id, "class", this.className + " " + this._style.id);
            }
        }

        handler this.onSignalConnectionsChanged(signal: ptr[Signal[Widget, Int]], connectionCount: Int) {
            if this.id == "" return;

            if signal == this.onResize~ptr {
                if connectionCount > 0 and this.onResizeId == -1 {
                    this.onResizeId = observeResize(
                        this.id,
                        closure (json: Json) {
                            this.onResize.emit(Int(0));
                        }
                    );
                } else if connectionCount == 0 and this.onResizeId != -1 {
                    unobserveResize(this.onResizeId);
                }
            }

            if signal == this.onMouseEnter~ptr {
                handleSignalConnectionChanged[onMouseEnter, "mouseenter", {
                    this.onMouseEnter.emit(Int(0));
                }];
            }
            if signal == this.onMouseOut~ptr {
                handleSignalConnectionChanged[onMouseOut, "mouseout", {
                    this.onMouseOut.emit(Int(0));
                }];
            }
            if signal == this.onClick~ptr {
                handleSignalConnectionChanged[onClick, "click", {
                    this.onClick.emit(Int(0));
                }];
            }
        }

        handler this.onSignalConnectionsChanged(signal: ptr[Signal[Widget, MouseMovePayload]], connectionCount: Int) {
            if this.id == "" return;

            if signal == this.onMouseMove~ptr {
                handleSignalConnectionChanged[onMouseMove, "mousemove", {
                    this.onMouseMove.emit(MouseMovePayload().{
                        posX = data.getInt("offsetX");
                        posY = data.getInt("offsetY");
                        deltaX = data.getInt("movementX");
                        deltaY = data.getInt("movementY");
                    });
                }];
            }
        }

        handler this.onSignalConnectionsChanged(signal: ptr[Signal[Widget, MouseButtonPayload]], connectionCount: Int) {
            if this.id == "" return;

            if signal == this.onMouseDown~ptr {
                handleSignalConnectionChanged[onMouseDown, "mousedown", {
                    this.onMouseDown.emit(MouseButtonPayload().{
                        button = data.getInt("button");
                        posX = data.getInt("offsetX");
                        posY = data.getInt("offsetY");
                    });
                }];
            }

            if signal == this.onMouseUp~ptr {
                handleSignalConnectionChanged[onMouseUp, "mouseup", {
                    this.onMouseUp.emit(MouseButtonPayload().{
                        button = data.getInt("button");
                        posX = data.getInt("offsetX");
                        posY = data.getInt("offsetY");
                    });
                }];
            }
        }

        handler this.onSignalConnectionsChanged(signal: ptr[Signal[Widget, Array[TouchPayload]]], connectionCount: Int) {
            if this.id == "" return;
            macro convertJsonToPayload {
                def i: Int = 0;
                while 1 {
                    def item: Json = data.getObject(i);
                    if item.jsonString == "" break;
                    payload.add(TouchPayload().{
                        identifier = item.getString("identifier");
                        screenX = item.getFloat("screenX");
                        screenY = item.getFloat("screenY");
                        clientX = item.getFloat("clientX");
                        clientY = item.getFloat("clientY");
                        pageX = item.getFloat("pageX");
                        pageY = item.getFloat("pageY");
                        radiusX = item.getFloat("radiusX");
                        radiusY = item.getFloat("radiusY");
                        rotationAngle = item.getFloat("rotationAngle");
                        force = item.getFloat("force");
                    });
                    ++i;
                }
            }

            if signal == this.onTouchStart~ptr {
                handleSignalConnectionChanged[onTouchStart, "touchstart", {
                    this.onTouchStart.emit(Array[TouchPayload]()~use_in(payload) no_injection {
                        convertJsonToPayload[];
                    });
                }];
            }

            if signal == this.onTouchEnd~ptr {
                handleSignalConnectionChanged[onTouchEnd, "touchend", {
                    this.onTouchEnd.emit(Array[TouchPayload]()~use_in(payload) no_injection {
                        convertJsonToPayload[];
                    });
                }];
            }

            if signal == this.onTouchMove~ptr {
                handleSignalConnectionChanged[onTouchMove, "touchmove", {
                    this.onTouchMove.emit(Array[TouchPayload]()~use_in(payload) no_injection {
                        convertJsonToPayload[];
                    });
                }];
            }
        }

        handler this.getDimensions(): Dimensions {
            if this.id == "" return Dimensions(0, 0);
            def d: Dimensions;
            getElementDimensions(this.id, d);
            return d;
        }

        handler this.requestPointerLock() {
            if this.id == "" return;
            WebPlatform.requestPointerLock(this.id);
        }

        handler this.requestFullScreen() {
            if this.id == "" return;
            WebPlatform.requestFullScreen(this.id);
        }

        handler this.scrollIntoView() {
            if this.id == "" return;
            WebPlatform.scrollElementIntoView(this.id);
        }
    }
}

