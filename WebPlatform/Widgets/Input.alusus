@merge module WebPlatform {
    //==========================================================================
    // Input
    class Input {
        @injection def basicWidget: BasicWidget;

        //-----------------------
        // Properties and Signals

        defineProperty[inputType, InputType, String];
        defineProperty[placeholder, Placeholder, String];
        defineProperty[ariaHidden, AriaHidden, bool];
        defineProperty[disabled, Disabled, bool];

        def _text: String;
        handler this.setText (t: String) {
            this._text = t;
            if this.id.getLength() > 0 setElementAttribute(this.id, "value", t);
        }
        handler this.getText (): String {
            if this.id.getLength() == 0 this._text = String()
            else this._text = String(getElementAttribute(this.id, "value"));
            return this._text;
        }
        handler this.text = (val: temp_ref[String]) {
            this.setText(val);
            return this._text;
        }
        handler this.text: String {
            return this.getText();
        }

        def onChanged: DomEventSignal[Input, Int];
        def onChangedId: ArchInt = -1;
        def onKeyPress: DomEventSignal[Input, String];
        def onKeyPressId: ArchInt = -1;
        def onKeyUp: DomEventSignal[Input, String];
        def onKeyUpId: ArchInt = -1;

        //---------
        // Handlers

        handler this~init() {
            this.initSignals();
            this.inputType = String("text");
            this.ariaHidden = false;
            this.disabled = false;
        }
        handler this~init(inputType : String) {
            this.initSignals();
            this.inputType = inputType;
            this.ariaHidden = false;
            this.disabled = false;
        }

        handler this.initSignals() {
            this.onChanged.onConnectionsChanged = closure (connectionCount: Int) {
                handleSignalConnectionChanged[this.id, onChanged, "change", {
                    this.onChanged.emit(this, Int(0));
                }];
            };

            this.onKeyPress.onConnectionsChanged = closure (connectionCount: Int) {
                handleSignalConnectionChanged[this.id, onKeyPress, "keypress", "", {
                    def outPayload: String;
                    if data("shiftKey") outPayload += "Shift+";
                    outPayload += data("code")~cast[String];
                    this.onKeyPress.emit(this, outPayload);
                }];
            };

            this.onKeyUp.onConnectionsChanged = closure (connectionCount: Int) {
                handleSignalConnectionChanged[this.id, onKeyUp, "keyup", "", {
                    def outPayload: String;
                    if data("shiftKey") outPayload += "Shift+";
                    outPayload += data("code")~cast[String];
                    this.onKeyUp.emit(this, outPayload);
                }];
            };
        }

        //-----------------
        // Member Functions

        handler this.onPropUpdated() this.update();

        //-------------------
        // Function Overrides

        handler (this:Widget).build (ownerId: String, nextSiblingId: String) set_ptr {
            this.id = getNewId();
            createElement("input", this.id, ownerId, nextSiblingId);
            this.buildCommon();
            this.update();
            this.onChanged.onConnectionsChanged(this.onChanged.getConnectionCount());
            this.onKeyPress.onConnectionsChanged(this.onKeyPress.getConnectionCount());
            this.onKeyUp.onConnectionsChanged(this.onKeyUp.getConnectionCount());
        }

        handler (this:Widget).unbuild() set_ptr {
            if this.onChangedId != -1 unregisterElementEventHandler(this.onChangedId);
            this.onChangedId = -1;

            if this.onKeyPressId != -1 unregisterElementEventHandler(this.onKeyPressId);
            this.onKeyPressId = -1;

            if this.onKeyUpId != -1 unregisterElementEventHandler(this.onKeyUpId);
            this.onKeyUpId = -1;

            deleteElement(this.id);
            this.unbuildCommon();
            this.id = String();
        }

        handler (this:Widget).update() set_ptr {
            if this.id.getLength() > 0 {
                this.updateCommon();
                setElementAttribute(this.id, "value", this._text);
                setElementAttribute(this.id, "type", this.inputType);
                setElementAttribute(this.id, "placeholder", this.placeholder);
                if this.ariaHidden == true {
                    setElementAttribute(this.id, "aria-hidden", "true");
                } else {
                    removeElementAttribute(this.id, "aria-hidden");
                }
                if this.disabled == true {
                    setElementAttribute(this.id, "disabled", "true");
                } else {
                    removeElementAttribute(this.id, "disabled");
                }
            }
        }

        //-----------------
        // Shared Functions

        handler this_type(): SrdRef[Input] {
            def r: SrdRef[Input];
            r.alloc()~init();
            return r;
        }
        handler this_type(t : String): SrdRef[Input] {
            def r: SrdRef[Input];
            r.alloc()~init(t);
            return r;
        }
    }
}
