@merge module WebPlatform {
    //==========================================================================
    // Select
    class Select {
        @injection def basicWidget: BasicWidget;

        //-----------------------
        // Properties and Signals

        defineProperty[items, Items, Map[String,String]];
        defineProperty[ariaHidden, AriaHidden, bool];

        def onChanged: DomEventSignal[Select, Int];
        def onChangedId: ArchInt = -1;

        //---------
        // Handlers

        handler this~init() {
            this.onChanged.onConnectionsChanged = closure (connectionCount: Int) {
                handleSignalConnectionChanged[this.id, onChanged, "change", {
                    this.onChanged.emit(this, Int(0));
                }];
            };
            this.ariaHidden = false;
        }

        //-----------------
        // Member Functions

        handler this.onPropUpdated() this.update();

        //-------------------
        // Function Overrides

        handler (this:Widget).build (ownerId: String, nextSiblingId: String) set_ptr {
            this.id = getNewId();
            createElement("select", this.id, ownerId, nextSiblingId);
            this.buildCommon();
            this.update();
            this.onChanged.onConnectionsChanged(this.onChanged.getConnectionCount());
        }

        handler (this:Widget).unbuild() set_ptr {
            if this.onChangedId != -1 unregisterElementEventHandler(this.onChangedId);
            this.onChangedId = -1;
            deleteElement(this.id);
            this.unbuildCommon();
            this.id = String();
        }

        handler (this:Widget).update() set_ptr {
            if this.id.getLength() > 0 {
                this.updateCommon();
                //setElementAttribute(this.id, "value", this._text);
                def i: Int = 0;
                def htmlVal: String;
                for i = 0, i < this.items.getLength(), ++i {
                    htmlVal += String("<option value= \"") +
                        this.items.keyAt(i).replace("\"", "\\\"") + "\">" +
                        this.items.valAt(i).replace("<", "&lt;").replace(">", "&gt;") + "</option>";
                }
                setElementAttribute(this.id, "innerHTML", htmlVal);
                if this.ariaHidden == true{
                    setElementAttribute(this.id, "aria-hidden", "true");
                }
            }
        }

        handler this.getSelectedValue(): String {
            def selectedValue : String;
            selectedValue=getSelectedItemValue(this.id);
            return selectedValue;
        }

        handler this.selectValue(selectedValue: String) {
            selectItem(this.id,selectedValue);
        }

        //-----------------
        // Shared Functions

        handler this_type(): SrdRef[Select] {
            def r: SrdRef[Select];
            r.alloc()~init();
            return r;
        }
    }
}
