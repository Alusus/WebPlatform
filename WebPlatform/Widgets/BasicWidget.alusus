@merge module WebPlatform {
    //==========================================================================
    // BasicWidget
    // The base class of built-in (native) widgets.
    class BasicWidget {
        @injection def widget: Widget;

        handler this~init() {
            this.onResizeObj.onConnectionsChanged = closure (connectionCount: Int) {
                if connectionCount > 0 and this.onResizeId == -1 and this.id != "" {
                    this.onResizeId = observeResize(
                        this.id,
                        closure (json: Json) {
                            this.onResizeObj.emit(this, Int(0));
                        }
                    );
                } else if connectionCount == 0 and this.onResizeId != -1 {
                    unobserveResize(this.onResizeId);
                }
            };

            this.onMouseEnterObj.onConnectionsChanged = closure (connectionCount: Int) {
                handleSignalConnectionChanged[this.id, onMouseEnter, "mouseenter", {
                    this.onMouseEnterObj.emit(this, Int(0));
                }];
            };

            this.onMouseOutObj.onConnectionsChanged = closure (connectionCount: Int) {
                handleSignalConnectionChanged[this.id, onMouseOut, "mouseout", {
                    this.onMouseOutObj.emit(this, Int(0));
                }];
            };

            this.onMouseDownObj.onConnectionsChanged = closure (connectionCount: Int) {
                handleSignalConnectionChanged[this.id, onMouseDown, "mousedown", {
                    this.onMouseDownObj.emit(this, MouseButtonPayload().{
                        button = data("button");
                        posX = data("offsetX");
                        posY = data("offsetY");
                    });
                }];
            };

            this.onMouseUpObj.onConnectionsChanged = closure (connectionCount: Int) {
                handleSignalConnectionChanged[this.id, onMouseUp, "mouseup", {
                    this.onMouseUpObj.emit(this, MouseButtonPayload().{
                        button = data("button");
                        posX = data("offsetX");
                        posY = data("offsetY");
                    });
                }];
            };

            this.onMouseMoveObj.onConnectionsChanged = closure (connectionCount: Int) {
                handleSignalConnectionChanged[this.id, onMouseMove, "mousemove", {
                    this.onMouseMoveObj.emit(this, MouseMovePayload().{
                        posX = data("offsetX");
                        posY = data("offsetY");
                        deltaX = data("movementX");
                        deltaY = data("movementY");
                    });
                }];
            };

            this.onTouchStartObj.onConnectionsChanged = closure (connectionCount: Int) {
                handleSignalConnectionChanged[this.id, onTouchStart, "touchstart", {
                    this.onTouchStartObj.emit(this, Array[TouchPayload]()~use_in(payload) no_injection {
                        convertJsonToPayload[];
                    });
                }];
            };

            this.onTouchEndObj.onConnectionsChanged = closure (connectionCount: Int) {
                handleSignalConnectionChanged[this.id, onTouchEnd, "touchend", {
                    this.onTouchEndObj.emit(this, Array[TouchPayload]()~use_in(payload) no_injection {
                        convertJsonToPayload[];
                    });
                }];
            };

            this.onTouchMoveObj.onConnectionsChanged = closure (connectionCount: Int) {
                handleSignalConnectionChanged[this.id, onTouchMove, "touchmove", {
                    this.onTouchMoveObj.emit(this, Array[TouchPayload]()~use_in(payload) no_injection {
                        convertJsonToPayload[];
                    });
                }];
            };

            this.onClickObj.onConnectionsChanged = closure (connectionCount: Int) {
                handleSignalConnectionChanged[this.id, onClick, "click", {
                    this.onClickObj.emit(this, Int(0));
                }];
            };
        }

        macro convertJsonToPayload {
            def i: Int = 0;
            for i = 0, i < data.getLength(), ++i {
                def item: Json = data(i);
                payload.add(TouchPayload().{
                    identifier = item("identifier");
                    screenX = item("screenX");
                    screenY = item("screenY");
                    clientX = item("clientX");
                    clientY = item("clientY");
                    pageX = item("pageX");
                    pageY = item("pageY");
                    radiusX = item("radiusX");
                    radiusY = item("radiusY");
                    rotationAngle = item("rotationAngle");
                    force = item("force");
                    changed = item("changed");
                });
            }
        }

        //-------------------
        // Abstract Functions

        // id
        def _id: String;
        handler (this: Widget).id: String set_ptr {
            return this._id;
        }
        handler this.id = String {
            this._id = value;
            return this._id;
        }

        // className
        implementAbstractProperty[Widget, className, ClassName, String];

        // style
        def _style: SrdRef[StyleSet];
        handler (this: Widget).style: SrdRef[StyleSet] set_ptr {
            if this._style.isNull() {
                this._style = StyleSet();
                this._style.enableInline(closure(css: String) {
                    if this.id != "" setElementAttribute(this.id, "style", css);
                });
                if this.id != "" {
                    this._style.build();
                    this.updateCommon();
                }
            }
            return this._style;
        }
        handler (this: Widget).style = SrdRef[StyleSet] set_ptr {
            if this.id != "" and not this._style.isNull() {
                this._style.unbuild();
            }
            this._style = value;
            if this.id != "" and not this._style.isNull() {
                this._style.build();
            }
            this.updateCommon();
            return this._style;
        }

        // hint
        defineProperty[hint, Hint, String];

        //----------------
        // Abstract Events

        def onResizeObj: DomEventSignal[Widget, Int];
        def onResizeId: ArchInt = -1;
        handler (this:Widget).onResize: ref[DomEventSignal[Widget, Int]] set_ptr {
            return this.onResizeObj;
        }

        def onMouseEnterObj: DomEventSignal[Widget, Int];
        def onMouseEnterId: ArchInt = -1;
        handler (this:Widget).onMouseEnter: ref[DomEventSignal[Widget, Int]] set_ptr {
            return this.onMouseEnterObj;
        }

        def onMouseOutObj: DomEventSignal[Widget, Int];
        def onMouseOutId: ArchInt = -1;
        handler (this:Widget).onMouseOut: ref[DomEventSignal[Widget, Int]] set_ptr {
            return this.onMouseOutObj;
        }

        def onMouseDownObj: DomEventSignal[Widget, MouseButtonPayload];
        def onMouseDownId: ArchInt = -1;
        handler (this:Widget).onMouseDown: ref[DomEventSignal[Widget, MouseButtonPayload]] set_ptr {
            return this.onMouseDownObj;
        }

        def onMouseUpObj: DomEventSignal[Widget, MouseButtonPayload];
        def onMouseUpId: ArchInt = -1;
        handler (this:Widget).onMouseUp: ref[DomEventSignal[Widget, MouseButtonPayload]] set_ptr {
            return this.onMouseUpObj;
        }

        def onMouseMoveObj: DomEventSignal[Widget, MouseMovePayload];
        def onMouseMoveId: ArchInt = -1;
        handler (this:Widget).onMouseMove: ref[DomEventSignal[Widget, MouseMovePayload]] set_ptr {
            return this.onMouseMoveObj;
        }

        def onTouchStartObj: DomEventSignal[Widget, Array[TouchPayload]];
        def onTouchStartId: ArchInt = -1;
        handler (this:Widget).onTouchStart: ref[DomEventSignal[Widget, Array[TouchPayload]]] set_ptr {
            return this.onTouchStartObj;
        }

        def onTouchEndObj: DomEventSignal[Widget, Array[TouchPayload]];
        def onTouchEndId: ArchInt = -1;
        handler (this:Widget).onTouchEnd: ref[DomEventSignal[Widget, Array[TouchPayload]]] set_ptr {
            return this.onTouchEndObj;
        }

        def onTouchMoveObj: DomEventSignal[Widget, Array[TouchPayload]];
        def onTouchMoveId: ArchInt = -1;
        handler (this:Widget).onTouchMove: ref[DomEventSignal[Widget, Array[TouchPayload]]] set_ptr {
            return this.onTouchMoveObj;
        }

        def onClickObj: DomEventSignal[Widget, Int];
        def onClickId: ArchInt = -1;
        handler (this:Widget).onClick: ref[DomEventSignal[Widget, Int]] set_ptr {
            return this.onClickObj;
        }

        //-----------------
        // Member Functions

        handler this.onPropUpdated() this.updateCommon();

        handler this.buildCommon() {
            if not this._style.isNull() this._style.build();
            this.onResizeObj.onConnectionsChanged(this.onResizeObj.getConnectionCount());
            this.onMouseEnterObj.onConnectionsChanged(this.onMouseEnterObj.getConnectionCount());
            this.onMouseOutObj.onConnectionsChanged(this.onMouseOutObj.getConnectionCount());
            this.onMouseDownObj.onConnectionsChanged(this.onMouseDownObj.getConnectionCount());
            this.onMouseUpObj.onConnectionsChanged(this.onMouseUpObj.getConnectionCount());
            this.onMouseMoveObj.onConnectionsChanged(this.onMouseMoveObj.getConnectionCount());
            this.onTouchStartObj.onConnectionsChanged(this.onTouchStartObj.getConnectionCount());
            this.onTouchEndObj.onConnectionsChanged(this.onTouchEndObj.getConnectionCount());
            this.onTouchMoveObj.onConnectionsChanged(this.onTouchMoveObj.getConnectionCount());
            this.onClickObj.onConnectionsChanged(this.onClickObj.getConnectionCount());
        }

        macro handleEventHandlerUnregistration[eventId] {
            if this.eventId != -1 unregisterElementEventHandler(this.eventId);
            this.eventId = -1;
        }

        handler this.unbuildCommon() {
            if not this._style.isNull() this._style.unbuild();
            unobserveResize(this.onResizeId);
            this.onResizeId = -1;
            handleEventHandlerUnregistration[onMouseEnterId];
            handleEventHandlerUnregistration[onMouseOutId];
            handleEventHandlerUnregistration[onMouseDownId];
            handleEventHandlerUnregistration[onMouseUpId];
            handleEventHandlerUnregistration[onMouseMoveId];
            handleEventHandlerUnregistration[onTouchStartId];
            handleEventHandlerUnregistration[onTouchEndId];
            handleEventHandlerUnregistration[onTouchMoveId];
            handleEventHandlerUnregistration[onClickId];
        }

        handler this.updateCommon() {
            if this.id != "" {
                if this._style.isNull() setElementAttribute(this.id, "class", this.className)
                else setElementAttribute(this.id, "class", this.className + " " + this._style.id);
                setElementAttribute(this.id, "title", this.hint);
            }
        }
    }
}
