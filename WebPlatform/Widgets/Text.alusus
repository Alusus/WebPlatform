@merge module WebPlatform {
    //==========================================================================
    // Text
    class Text {
        @injection def basicWidget: BasicWidget;
        def tag: String("span");

        //-----------
        // Properties
        defineProperty[text, Text, String];
        defineProperty[ariaHidden, AriaHidden, bool];
        defineProperty[targetId, TargetId, String];

        //----------
        // Handlers

        handler this~init() {
            this.ariaHidden = false;
        }

        handler this~init(t: String) {
            this.ariaHidden = false;
            this.text = t;
        }

        handler this~init(tag: String, text: String) {
            this.tag = tag;
            this.ariaHidden = false;
            this.text = text;
        }

        handler this.onPropUpdated() this.update();

        //-------------------
        // Function Overrides

        handler (this:Widget).build (ownerId: String, nextSiblingId: String) set_ptr {
            this.id = getNewId();
            createElement(this.tag, this.id, ownerId, nextSiblingId);
            this.buildCommon();
            this.update();
        }

        handler (this:Widget).unbuild() set_ptr {
            if this.id.getLength() > 0 {
                deleteElement(this.id);
                this.unbuildCommon();
                this.id = String();
            }
        }

        handler (this:Widget).update() set_ptr {
            if this.id.getLength() > 0 {
                this.updateCommon();
                setElementAttribute(this.id, "innerText", this.text);
                if this.ariaHidden == true {
                   setElementAttribute(this.id, "aria-hidden", "true");
                }
                if this.targetId != "" {
                   setElementAttribute(this.id, "for", this.targetId);
                }
            }
        }

        //-----------------
        // Shared Functions

        handler this_type(): SrdRef[Text] {
            return SrdRef[Text].construct();
        }

        handler this_type(t: String): SrdRef[Text] {
            def r: SrdRef[Text];
            r.alloc()~init(t);
            return r;
        }

        handler this_type(tag: String, text: String): SrdRef[Text] {
            def r: SrdRef[Text];
            r.alloc()~init(tag, text);
            return r;
        }
    }
}

