@merge module WebPlatform {
    //==========================================================================
    // Signal
    // A signal that can be subscribed to for handling events. It can have
    // multiple subscriptions.
    class Signal [ownerType: type, payloadType: type] {
        def owner: ref[ownerType];
        def slots: Array[Slot[ownerType, payloadType]];

        handler this.emit(payload: ref[payloadType]) {
            def i: Int;
            for i = 0, i < this.slots.getLength(), ++i {
                this.slots(i).fn(this.owner, payload, this.slots(i).extra);
            }
        }
        
        handler this.connect(fn: Slot[ownerType, payloadType].FnPtr, extra: ptr) {
            def i: Int;
            for i = 0, i < this.slots.getLength(), ++i {
                if this.slots(i).fn == fn && this.slots(i).extra == extra return;
            }
            def slot: Slot[ownerType, payloadType];
            slot.fn = fn;
            slot.extra = extra;
            this.slots.add(slot);
            this.owner.onSignalConnectionsChanged(this~ptr, this.slots.getLength());
        }

        handler this.disconnect(fn: Slot[ownerType, payloadType].FnPtr, extra: ptr) {
            def i: Int;
            for i = 0, i < this.slots.getLength(), ++i {
                if this.slots(i).fn == fn && this.slots(i).extra == extra {
                    this.slots.remove(i);
                    this.owner.onSignalConnectionsChanged(this~ptr, this.slots.getLength());
                    return;
                }
            }
        }
        
        handler this.getConnectionCount (): Int {
            return this.slots.getLength();
        }
    }

    //==========================================================================
    // Slot
    // Represent a single subscription to an event. It contains extra data in
    // addition to the function pointer.
    class Slot [ownerType: type, payloadType: type] {
        def FnPtr: alias ptr[function (owner: ref[ownerType], payload: ref[payloadType], extra: ptr)];
        def fn: FnPtr;
        def extra: ptr;
    }
}

