@merge module WebPlatform {
    //==========================================================================
    // Signal
    // A signal that can be subscribed to for handling events. It can have
    // multiple subscriptions.
    class Signal [ownerType: type, payloadType: type] {
        def owner: ref[ownerType];
        def slots: Array[closure (ref[ownerType], payload: ref[payloadType])];

        handler this.emit(payload: ref[payloadType]) {
            def i: Int;
            for i = 0, i < this.slots.getLength(), ++i {
                this.slots(i)(this.owner, payload);
            }
        }

        handler this.connect(slot: closure (ref[ownerType], payload: ref[payloadType])): ArchInt {
            def i: Int;
            for i = 0, i < this.slots.getLength(), ++i {
                if this.slots(i) == slot return slot.data.obj~ptr~cast[ArchInt];
            }
            this.slots.add(slot);
            this.owner.onSignalConnectionsChanged(this~ptr, this.slots.getLength());
            return slot.data.obj~ptr~cast[ArchInt];
        }

        handler this.disconnect(slot: closure (ref[ownerType], payload: ref[payloadType])) {
            def i: Int;
            for i = 0, i < this.slots.getLength(), ++i {
                if this.slots(i) == slot {
                    this.slots.remove(i);
                    this.owner.onSignalConnectionsChanged(this~ptr, this.slots.getLength());
                    return;
                }
            }
        }

        handler this.disconnect(id: ArchInt) {
            def i: Int;
            for i = 0, i < this.slots.getLength(), ++i {
                if this.slots(i).data.obj~ptr~cast[ArchInt] == id {
                    this.slots.remove(i);
                    this.owner.onSignalConnectionsChanged(this~ptr, this.slots.getLength());
                    return;
                }
            }
        }

        handler this.getConnectionCount (): Int {
            return this.slots.getLength();
        }
    }
}
