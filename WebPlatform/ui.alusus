@merge module WebPlatform {
    //==========================================================================
    // Functions and Macros

    def view: SrdRef[Widget];
    function setView(v: SrdRef[Widget]) {
        unsetView();
        view = v;
        view.build(String("body"));
    }

    function unsetView() {
        if view.obj~ptr != 0 view.unbuild();
        view.release();
    }

    function getNewId (): String {
        @shared def counter: Int(0);
        return String("id") + (++counter);
    }

    macro generateProperty [propName, upperCasePropName, propType] {
        def v__propName__: propType;
        handler this.set__upperCasePropName__ (val: temp_ref[propType]) {
            this.v__propName__ = val;
            this.update();
        }
        handler this.get__upperCasePropName__ (): ref[propType] {
            return this.v__propName__;
        }
        handler this.propName = (val: temp_ref[propType]) {
            this.v__propName__ = val;
            this.update();
            return this.v__propName__;
        }
        handler this.propName: ref[propType] {
            return this.v__propName__;
        }
    }


    //==========================================================================
    // Quad
    // A tuple of four float values used for the four sides of a rectangle. This
    // is used for things like border thickness or padding.
    class Quad {
        def top: Float = 0;
        def right: Float = 0;
        def bottom: Float = 0;
        def left: Float = 0;
        
        handler this~init() {}
        handler this~init(Float) {
            this.top = this.right = this.bottom = this.left = value;
        }
        handler this~init(v: Float, h: Float) {
            this.top = this.bottom = v;
            this.right = this.left = h;
        }
        handler this~init(t: Float, r: Float, b: Float, l: Float) {
            this.top = t;
            this.right = r;
            this.bottom = b;
            this.left = l;
        }
        handler this~init(temp_ref[Quad]) {
            this = value;
        }
        handler this = temp_ref[Quad] {
            this.top = value.top;
            this.right = value.right;
            this.bottom = value.bottom;
            this.left = value.left;
        }
    }

    //==========================================================================
    // Color
    class Color {
        def red: Int = 0;
        def green: Int = 0;
        def blue: Int = 0;
        def alpha: Int = 0;
        
        handler this~init() {}
        handler this~init(r: Int, g: Int, b: Int) {
            this.red = r;
            this.green = g;
            this.blue = b;
            this.alpha = 255;
        }
        handler this~init(r: Int, g: Int, b: Int, a: Int) {
            this.red = r;
            this.green = g;
            this.blue = b;
            this.alpha = a;
        }

        handler this~init(hex: String) {
            if hex.getLength() == 3 or hex.getLength() == 4 {
                this.red = this.convertHexToDecimal({ hex(0), hex(0) });
                this.green = this.convertHexToDecimal({ hex(1), hex(1) });
                this.blue = this.convertHexToDecimal({ hex(2), hex(2) });
                if hex.getLength() == 3 this.alpha = 255
                else this.alpha = this.convertHexToDecimal({ hex(3), hex(3) });
            } else if hex.getLength() == 6 or hex.getLength() == 8 {
                this.red = this.convertHexToDecimal({ hex(0), hex(1) });
                this.green = this.convertHexToDecimal({ hex(2), hex(3) });
                this.blue = this.convertHexToDecimal({ hex(4), hex(5) });
                if hex.getLength() == 6 this.alpha = 255
                else this.alpha = this.convertHexToDecimal({ hex(6), hex(7) });
            }
        }

        handler this~init(hex: ptr[array[Char]]) {
            this~init(String(hex));
        }

        handler this~init(temp_ref[Color]) {
            this = value;
        }
        handler this = temp_ref[Color] {
            this.red = value.red;
            this.green = value.green;
            this.blue = value.blue;
            this.alpha = value.alpha;
        }

        handler this.convertHexToDecimal(letter: Char): Int {
            if letter >= '0' and letter <= '9' return letter - '0'
            else if letter >= 'a' and letter <= 'f' return 10 + letter - 'a'
            else if letter >= 'A' and letter <= 'F' return 10 + letter - 'A'
            else return 0;
        }
        handler this.convertHexToDecimal(count: Int, letters: ...Char): Int {
            def result: Int = 0;
            while count-- > 0 {
                result *= 16;
                result += this.convertHexToDecimal(letters~next_arg[Char]);
            }
            return result;
        }
    }
}

