@merge module WebPlatform {
    //==========================================================================
    // Functions and Macros

    function getNewId (): String {
        @shared def counter: Int(0);
        return String("id") + (++counter);
    }

    macro generateProperty [propName, upperCasePropName, propType] {
        def v__propName__: propType;
        handler this.set__upperCasePropName__ (val: temp_ref[propType]) {
            this.v__propName__ = val;
            this.onPropUpdated();
        }
        handler this.get__upperCasePropName__ (): ref[propType] {
            return this.v__propName__;
        }
        handler this.propName = (val: temp_ref[propType]) {
            this.v__propName__ = val;
            this.onPropUpdated();
            return this.v__propName__;
        }
        handler this.propName: ref[propType] {
            return this.v__propName__;
        }
    }

    //==========================================================================
    // Dimensions
    class Dimensions {
        def width: Int = 0;
        def height: Int = 0;

        handler this~init() {}
        handler this~init(w: Int, h: Int) {
            this.width = w;
            this.height = h;
        }
        handler this~init(temp_ref[Dimensions]) {
            this = value;
        }
        handler this = temp_ref[Dimensions] {
            this.width = value.width;
            this.height = value.height;
        }
    }

    //==========================================================================
    // Quad
    // A tuple of four float values used for the four sides of a rectangle. This
    // is used for things like border thickness or padding.
    class Quad {
        def top: Float = 0;
        def right: Float = 0;
        def bottom: Float = 0;
        def left: Float = 0;
        
        handler this~init() {}
        handler this~init(Float) {
            this.top = this.right = this.bottom = this.left = value;
        }
        handler this~init(v: Float, h: Float) {
            this.top = this.bottom = v;
            this.right = this.left = h;
        }
        handler this~init(t: Float, r: Float, b: Float, l: Float) {
            this.top = t;
            this.right = r;
            this.bottom = b;
            this.left = l;
        }
        handler this~init(temp_ref[Quad]) {
            this = value;
        }
        handler this = temp_ref[Quad] {
            this.top = value.top;
            this.right = value.right;
            this.bottom = value.bottom;
            this.left = value.left;
        }
        handler this == ref[Quad] : bool {
            if(this.top==value.top && this.right==value.right && this.bottom==value.bottom && this.left==value.left)
                return true;
            return false;
        }
        handler this != ref[Quad] : bool {
            return !(this == value);
        }
    }

    //==========================================================================
    // Color
    class Color {
        def red: Int = 0;
        def green: Int = 0;
        def blue: Int = 0;
        def alpha: Int = 0;
        
        handler this~init() {}
        handler this~init(r: Int, g: Int, b: Int) {
            this.red = r;
            this.green = g;
            this.blue = b;
            this.alpha = 255;
        }
        handler this~init(r: Int, g: Int, b: Int, a: Int) {
            this.red = r;
            this.green = g;
            this.blue = b;
            this.alpha = a;
        }

        handler this~init(hex: String) {
            if hex.getLength() == 3 or hex.getLength() == 4 {
                this.red = this.convertHexToDecimal({ hex(0), hex(0) });
                this.green = this.convertHexToDecimal({ hex(1), hex(1) });
                this.blue = this.convertHexToDecimal({ hex(2), hex(2) });
                if hex.getLength() == 3 this.alpha = 255
                else this.alpha = this.convertHexToDecimal({ hex(3), hex(3) });
            } else if hex.getLength() == 6 or hex.getLength() == 8 {
                this.red = this.convertHexToDecimal({ hex(0), hex(1) });
                this.green = this.convertHexToDecimal({ hex(2), hex(3) });
                this.blue = this.convertHexToDecimal({ hex(4), hex(5) });
                if hex.getLength() == 6 this.alpha = 255
                else this.alpha = this.convertHexToDecimal({ hex(6), hex(7) });
            }
        }

        handler this~init(hex: ptr[array[Char]]) {
            this~init(String(hex));
        }

        handler this~init(temp_ref[Color]) {
            this = value;
        }
        handler this = temp_ref[Color] {
            this.red = value.red;
            this.green = value.green;
            this.blue = value.blue;
            this.alpha = value.alpha;
        }
        handler this == ref[Color] : bool {
            if(this.red==value.red && this.green==value.green && this.blue==value.blue && this.alpha==value.alpha)
                return true;
            return false;
        }
        handler this != ref[Color] : bool {
            return !(this == value);
        }

        handler this.convertHexToDecimal(letter: Char): Int {
            if letter >= '0' and letter <= '9' return letter - '0'
            else if letter >= 'a' and letter <= 'f' return 10 + letter - 'a'
            else if letter >= 'A' and letter <= 'F' return 10 + letter - 'A'
            else return 0;
        }
        handler this.convertHexToDecimal(count: Int, letters: ...Char): Int {
            def result: Int = 0;
            while count-- > 0 {
                result *= 16;
                result += this.convertHexToDecimal(letters~next_arg[Char]);
            }
            return result;
        }

        handler this~cast[String] {
            @shared def hex: Array[Char]({
                '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
            });
            @shared def c: array[Char, 10];
            c(0) = '#';
            c(1) = hex((this.red / 16) % 16);
            c(2) = hex(this.red % 16);
            c(3) = hex((this.green / 16) % 16);
            c(4) = hex(this.green % 16);
            c(5) = hex((this.blue / 16) % 16);
            c(6) = hex(this.blue % 16);
            c(7) = hex((this.alpha / 16) % 16);
            c(8) = hex(this.alpha % 16);
            c(9) = 0;
            return String(c~ptr);
        }
    }

    //==========================================================================
    // MouseMovePayload
    // The payload of the mouse-move event.
    class MouseMovePayload {
        def posX: Float = 0;
        def posY: Float = 0;
        def deltaX: Float = 0;
        def deltaY: Float = 0;

        handler this~init() {}
        handler this~init(x: Float, y: Float, dx: Float, dy: Float) {
            this.posX = x;
            this.posY = y;
            this.deltaX = dx;
            this.deltaY = dy;
        }
        handler this~init(temp_ref[MouseMovePayload]) {
            this = value;
        }
        handler this = temp_ref[MouseMovePayload] {
            this.posX = value.posX;
            this.posY = value.posY;
            this.deltaX = value.deltaX;
            this.deltaY = value.deltaY;
        }
    }
}

