@merge module WebPlatform {
    //==========================================================================
    // Widget
    // The base class of all widgets.
    class Widget {
        def id: String;

        // Styles
        generateProperty[width, Width, String];
        generateProperty[height, Height, String];
        generateProperty[backgroundColor, BackgroundColor, Color];

        // Events
        def onResize: Signal[Widget, Int];
        def onResizeId: ArchInt = -1;
        def onMouseMove: Signal[Widget, MouseMovePayload];
        def onMouseMoveId: ArchInt = -1;
        def onMouseEnter: Signal[Widget, Int];
        def onMouseEnterId: ArchInt = -1;
        def onMouseOut: Signal[Widget, Int];
        def onMouseOutId: ArchInt = -1;
        def onMouseDown: Signal[Widget, Int];
        def onMouseDownId: ArchInt = -1;
        def onMouseUp: Signal[Widget, Int];
        def onMouseUpId: ArchInt = -1;

        handler this~init() {
            this.backgroundColor~init(255, 255, 255, 0);
            this.onResize.owner~no_deref = this;
            this.onMouseMove.owner~no_deref = this;
            this.onMouseEnter.owner~no_deref = this;
            this.onMouseOut.owner~no_deref = this;
            this.onMouseDown.owner~no_deref = this;
            this.onMouseUp.owner~no_deref = this;
        }

        //-------------------
        // Abstract Functions

        handler this.build(ownerId: String) as_ptr;
        handler this.unbuild() as_ptr;
        handler this.update() as_ptr;

        //-----------------
        // Member Functions

        handler this.buildCommon() {
            this.onSignalConnectionsChanged(this.onResize~ptr, this.onResize.getConnectionCount());
            this.onSignalConnectionsChanged(this.onMouseMove~ptr, this.onMouseMove.getConnectionCount());
            this.onSignalConnectionsChanged(this.onMouseEnter~ptr, this.onMouseEnter.getConnectionCount());
            this.onSignalConnectionsChanged(this.onMouseOut~ptr, this.onMouseOut.getConnectionCount());
            this.onSignalConnectionsChanged(this.onMouseDown~ptr, this.onMouseDown.getConnectionCount());
            this.onSignalConnectionsChanged(this.onMouseUp~ptr, this.onMouseUp.getConnectionCount());
        }

        handler this.unbuildCommon() {
        }

        handler this.onSignalConnectionsChanged(signal: ptr[Signal[Widget, Int]], connectionCount: Int) {
            if this.id == "" return;

            if signal == this.onResize~ptr {
                if connectionCount > 0 and this.onResizeId == -1 {
                    this.onResizeId = observeResize(
                        this.id,
                        closure (json: Json) {
                            this.onResize.emit(Int(0));
                        }
                    );
                } else if connectionCount == 0 and this.onResizeId != -1 {
                    unobserveResize(this.onResizeId);
                }
            }

            if signal == this.onMouseEnter~ptr {
                handleSignalConnectionChanged[onMouseEnter, "mouseenter", {
                    this.onMouseEnter.emit(Int(0));
                }];
            }
            if signal == this.onMouseOut~ptr {
                handleSignalConnectionChanged[onMouseOut, "mouseout", {
                    this.onMouseOut.emit(Int(0));
                }];
            }
            if signal == this.onMouseDown~ptr {
                handleSignalConnectionChanged[onMouseDown, "mousedown", {
                    this.onMouseDown.emit(Int().{ this = data.getInt("button") });
                }];
            }
            if signal == this.onMouseUp~ptr {
                handleSignalConnectionChanged[onMouseUp, "mouseup", {
                    this.onMouseUp.emit(Int().{ this = data.getInt("button") });
                }];
            }
        }

        handler this.onSignalConnectionsChanged(signal: ptr[Signal[Widget, MouseMovePayload]], connectionCount: Int) {
            if this.id == "" return;

            if signal == this.onMouseMove~ptr {
                handleSignalConnectionChanged[onMouseMove, "mousemove", {
                    this.onMouseMove.emit(MouseMovePayload().{
                        posX = data.getInt("offsetX");
                        posY = data.getInt("offsetY");
                        deltaX = data.getInt("movementX");
                        deltaY = data.getInt("movementY");
                    });
                }];
            }
        }

        handler this.getDimensions(): Dimensions {
            if this.id == "" return Dimensions(0, 0);
            def d: Dimensions;
            getElementDimensions(this.id, d);
            return d;
        }

        handler this.requestPointerLock() {
            if this.id == "" return;
            WebPlatform.requestPointerLock(this.id);
        }

        handler this.requestFullScreen() {
            if this.id == "" return;
            WebPlatform.requestFullScreen(this.id);
        }
    }

    //==========================================================================
    // Box
    // A rectangular area that contains other widgets.
    class Box {
        @injection def widget: Widget;
        def children: Array[SrdRef[Widget]];

        //-----------
        // Properties

        generateProperty[padding, Padding, Quad];
        generateProperty[border, Border, Quad];
        generateProperty[borderColor, BorderColor, Color];
        generateProperty[layout, Layout, String];
        generateProperty[justify, Justify, String];
        generateProperty[align, Align, String];
        generateProperty[direction, Direction, String];

        //---------
        // Handlers

        handler this~init() {
            this.borderColor~init(255, 255, 255);
            this.layout = String("column");
            this.justify = String("space-around");
            this.direction = String("rtl");
        }

        handler this.addChildren (count: Int, children: ...temp_ref[SrdRef[Widget]]) {
            while count-- > 0 {
                def child: ref[SrdRef[Widget]](children~next_arg[ref[SrdRef[Widget]]]);
                this.children.add(child);
                if this.id.getLength() > 0 child.build(this.id);
            }
        }

        handler this.removeChildren (count: Int, children: ...temp_ref[SrdRef[Widget]]) {
            while count-- > 0 {
                def child: ref[SrdRef[Widget]](children~next_arg[ref[SrdRef[Widget]]]);
                def i: Int;
                for i = 0, i < this.children.getLength(), ++i {
                    if this.children(i).obj~ptr == child.obj~ptr {
                        child.unbuild();
                        this.children.remove(i);
                        return;
                    }
                }
            }
        }

        //-------------------
        // Function Overrides

        handler (this:Widget).build (ownerId: String) set_ptr {
            this.id = getNewId();
            createElement("div", this.id, ownerId);
            this.update();

            def i: Int;
            for i = 0, i < this.children.getLength(), ++i {
                this.children(i).build(this.id);
            }

            this.buildCommon();
        }

        handler (this:Widget).unbuild() set_ptr {
            if this.id.getLength() > 0 {
                deleteElement(this.id);

                def i: Int;
                for i = 0, i < this.children.getLength(), ++i {
                    this.children(i).unbuild();
                }

                this.unbuildCommon();
                this.id = String();
            }
        }

        handler (this:Widget).update() set_ptr {
            if this.id.getLength() > 0 {
                setElementAttribute(
                    this.id, "style",
                    String.format(
                        "width:%s;"
                        "height:%s;"
                        "padding:%fpt %fpt %fpt %fpt;"
                        "border-style:solid;"
                        "border-width:%fpt %fpt %fpt %fpt;"
                        "border-color:rgba(%i, %i, %i, %i);"
                        "background-color:rgba(%i, %i, %i, %i);"
                        "display:flex;flex-direction:%s;"
                        "justify-content:%s;align-items:%s;"
                        "direction:%s;",
                        ptr[Char]()~use_in(chr){ if this.width == "auto-flex" chr = ";flex:auto" else chr = this.width },
                        ptr[Char]()~use_in(chr){ if this.height == "auto-flex" chr = ";flex:auto" else chr = this.height },
                        this.padding.top, this.padding.right, this.padding.bottom, this.padding.left,
                        this.border.top, this.border.right, this.border.bottom, this.border.left,
                        this.borderColor.red, this.borderColor.green,
                        this.borderColor.blue, this.borderColor.alpha,
                        this.backgroundColor.red, this.backgroundColor.green,
                        this.backgroundColor.blue, this.backgroundColor.alpha,
                        this.layout.buf, this.justify.buf, this.align.buf,
                        this.direction.buf
                    )
                );
            }
        }

        //-----------------
        // Shared Functions

        function new (count: Int, args: ...temp_ref[SrdRef[Widget]]): SrdRef[Box] {
            def r: SrdRef[Box];
            r.alloc()~init();
            while count-- > 0 r.addChildren({ args~next_arg[ref[SrdRef[Widget]]] });
            return r;
        }
    }
    
    //==========================================================================
    // Canvas
    // A free form drawing area.
    class Canvas {
        @injection def widget: Widget;
        @injection def drawing: Drawing;
        def resourceId: ArchInt;

        //-----------
        // Properties

        generateProperty[bitmapWidth, BitmapWidth, String];
        generateProperty[bitmapHeight, BitmapHeight, String];
        generateProperty[padding, Padding, Quad];
        generateProperty[border, Border, Quad];
        generateProperty[borderColor, BorderColor, Color];

        //---------
        // Handlers

        handler this~init() {
            this.borderColor~init(255, 255, 255);
        }

        //-------------------
        // Function Overrides

        handler (this:Widget).build (ownerId: String) set_ptr {
            this.id = getNewId();
            createElement("canvas", this.id, ownerId);
            this.resourceId = registerElementAsResource(this.id);
            this.update();
            this.buildCommon();
        }

        handler (this:Widget).unbuild() set_ptr {
            if this.id.getLength() > 0 {
                deleteElement(this.id);
                releaseResource(this.resourceId);
                this.unbuildCommon();
                this.id = String();
            }
        }

        handler (this:Widget).update() set_ptr {
            if this.id.getLength() > 0 {
                setElementAttribute(
                    this.id, "style",
                    String.format(
                        "width:100%%;"
                        "height:100%%;"
                        "max-width:%s;"
                        "max-height:%s;"
                        "padding:%fpt %fpt %fpt %fpt;"
                        "border-style:solid;"
                        "border-width:%fpt %fpt %fpt %fpt;"
                        "border-color:rgba(%i, %i, %i, %i);"
                        "background-color:rgba(%i, %i, %i, %i);",
                        this.width.buf, this.height.buf,
                        this.padding.top, this.padding.right, this.padding.bottom, this.padding.left,
                        this.border.top, this.border.right, this.border.bottom, this.border.left,
                        this.borderColor.red, this.borderColor.green,
                        this.borderColor.blue, this.borderColor.alpha,
                        this.backgroundColor.red, this.backgroundColor.green,
                        this.backgroundColor.blue, this.backgroundColor.alpha
                    )
                );
                setElementAttribute(this.id, "width", this.bitmapWidth);
                setElementAttribute(this.id, "height", this.bitmapHeight);
            }
        }

        handler (this: Drawing).getResourceId(): ArchInt set_ptr {
            unshiftThis[drawing];
            return this.resourceId;
        }

        //-----------------
        // Shared Functions

        function new (): SrdRef[Canvas] {
            def r: SrdRef[Canvas];
            r.alloc()~init();
            return r;
        }
    }

    //==========================================================================
    // Image
    class Image {
        @injection def widget: Widget;

        //-----------
        // Properties

        generateProperty[url, Url, String];
        generateProperty[padding, Padding, Quad];
        generateProperty[border, Border, Quad];
        generateProperty[borderColor, BorderColor, Color];

        //---------
        // Handlers

        handler this~init() {
        }
        handler this~init(u: ptr[array[Char]]) {
            this.url = String(u);
        }

        //-------------------
        // Function Overrides

        handler (this:Widget).build (ownerId: String) set_ptr {
            this.id = getNewId();
            createElement("img", this.id, ownerId);
            this.update();
            this.buildCommon();
        }

        handler (this:Widget).unbuild() set_ptr {
            if this.id.getLength() > 0 {
                deleteElement(this.id);
                this.unbuildCommon();
                this.id = String();
            }
        }

        handler (this:Widget).update() set_ptr {
            if this.id.getLength() > 0 {
                setElementAttribute(
                    this.id, "style",
                    String.format(
                        "width:%s;"
                        "height:%s;"
                        "padding:%fpt %fpt %fpt %fpt;"
                        "border-style:solid;"
                        "border-width:%fpt %fpt %fpt %fpt;"
                        "border-color:rgba(%i, %i, %i, %i);"
                        "background-color:rgba(%i, %i, %i, %i);",
                        this.width.buf, this.height.buf,
                        this.padding.top, this.padding.right, this.padding.bottom, this.padding.left,
                        this.border.top, this.border.right, this.border.bottom, this.border.left,
                        this.borderColor.red, this.borderColor.green,
                        this.borderColor.blue, this.borderColor.alpha,
                        this.backgroundColor.red, this.backgroundColor.green,
                        this.backgroundColor.blue, this.backgroundColor.alpha
                    )
                );
                setElementAttribute(this.id, "src", this.url);
            }
        }

        //-----------------
        // Shared Functions

        function new (u: ptr[array[Char]]): SrdRef[Image] {
            def r: SrdRef[Image];
            r.alloc()~init(u);
            return r;
        }
        function new (): SrdRef[Image] {
            return new("");
        }
    }

    //==========================================================================
    // Label
    class Label {
        @injection def widget: Widget;

        //-----------
        // Properties
        generateProperty[text, Text, String];
        generateProperty[padding, Padding, Quad];
        generateProperty[fontSize, FontSize, Float];
        generateProperty[fontColor, FontColor, Color];
        generateProperty[textAlign, TextAlign, String];
        generateProperty[textDirection, TextDirection, String];

        //----------
        // Handlers

        handler this~init(t: String) {
            this.text = t;
            this.fontSize = 10.0;
            this.textAlign = String("right");
            this.textDirection = String("rtl");
        }

        //-------------------
        // Function Overrides

        handler (this:Widget).build (ownerId: String) set_ptr {
            this.id = getNewId();
            createElement("span", this.id, ownerId);
            this.update();
            this.buildCommon();
        }

        handler (this:Widget).unbuild() set_ptr {
            if this.id.getLength() > 0 {
                deleteElement(this.id);
                this.unbuildCommon();
                this.id = String();
            }
        }

        handler (this:Widget).update() set_ptr {
            if this.id.getLength() > 0 {
                setElementAttribute(this.id, "innerHTML", this.text);
                setElementAttribute(
                    this.id, "style",
                    String.format(
                        "width:%s;"
                        "height:%s;"
                        "background-color:rgba(%i, %i, %i, %i);"
                        "color:rgb(%i, %i, %i);"
                        "font-size:%fpt;"
                        "text-align:%s;"
                        "padding:%fpt %fpt %fpt %fpt;"
                        "direction:%s",
                        this.width.buf, this.height.buf,
                        this.backgroundColor.red, this.backgroundColor.green,
                        this.backgroundColor.blue, this.backgroundColor.alpha,
                        this.fontColor.red, this.fontColor.green, this.fontColor.blue,
                        this.fontSize,
                        this.textAlign.buf,
                        this.padding.top, this.padding.right, this.padding.bottom, this.padding.left,
                        this.textDirection.buf
                    )
                );
            }
        }

        //-----------------
        // Shared Functions

        function new (t: String): SrdRef[Label] {
            def r: SrdRef[Label];
            r.alloc()~init(t);
            return r;
        }
    }

    //==========================================================================
    // Button
    class Button {
        @injection def widget: Widget;

        //-----------------------
        // Properties and Signals

        generateProperty[text, Text, String];
        generateProperty[fontSize, FontSize, Float];
        generateProperty[fontColor, FontColor, Color];
        generateProperty[textAlign, TextAlign, String];
        generateProperty[textDirection, TextDirection, String];
        def onClick: Signal[Button, Int];
        def onClickId: ArchInt = -1;

        //---------
        // Handlers

        handler this~init(t: String) {
            this.onClick.owner~no_deref = this;
            this.text = t;
            this.fontSize = 10.0;
            this.textAlign = String("right");
            this.textDirection = String("rtl");
        }

        //-----------------
        // Member Functions

        handler this.onSignalConnectionsChanged(signal: ptr[Signal[Button, Int]], connectionCount: Int) {
            if this.id == "" return;

            if signal == this.onClick~ptr {
                handleSignalConnectionChanged[onClick, "click", {
                    this.onClick.emit(Int(0));
                }];
            }
        }

        //-------------------
        // Function Overrides

        handler (this:Widget).build (ownerId: String) set_ptr {
            this.id = getNewId();
            createElement("button", this.id, ownerId);
            this.update();
            this.onSignalConnectionsChanged(this.onClick~ptr, this.onClick.getConnectionCount());
            this.buildCommon();
        }

        handler (this:Widget).unbuild() set_ptr {
            if this.onClickId != -1 unregisterElementEventHandler(this.onClickId);
            this.onClickId = -1;
            deleteElement(this.id);
            this.unbuildCommon();
            this.id = String();
        }

        handler (this:Widget).update() set_ptr {
            if this.id.getLength() > 0 {
                setElementAttribute(this.id, "innerHTML", this.text);
                setElementAttribute(
                    this.id, "style",
                    String.format(
                        "width: %s;"
                        "height: %s;"
                        "background-color: rgba(%i, %i, %i, %i);"
                        "color:rgb(%i, %i, %i);"
                        "font-size:%fpt;"
                        "text-align:%s;"
                        "direction:%s",
                        this.width.buf, this.height.buf,
                        this.backgroundColor.red, this.backgroundColor.green,
                        this.backgroundColor.blue, this.backgroundColor.alpha,
                        this.fontColor.red, this.fontColor.green, this.fontColor.blue,
                        this.fontSize,
                        this.textAlign.buf,
                        this.textDirection.buf
                    )
                );
            }
        }

        //-----------------
        // Shared Functions

        function new (t: String): SrdRef[Button] {
            def r: SrdRef[Button];
            r.alloc()~init(t);
            return r;
        }
    }

    //==========================================================================
    // TextInput
    // A multi-line text entry.
    class TextInput {
        @injection def widget: Widget;

        //-----------------------
        // Properties and Signals

        generateProperty[fontSize, FontSize, Float];
        generateProperty[fontColor, FontColor, Color];
        generateProperty[textAlign, TextAlign, String];
        generateProperty[textDirection, TextDirection, String];

        def _text: String;
        handler this.setText (t: String) {
            this._text = t;
            if this.id.getLength() > 0 setElementAttribute(this.id, "value", t);
        }
        handler this.getText (): String {
            if this.id.getLength() == 0 this._text = String()
            else this._text = String(getElementAttribute(this.id, "value"));
            return this._text;
        }
        handler this.text = (val: temp_ref[String]) {
            this.setText(val);
            return this._text;
        }
        handler this.text: ref[String] {
            return this.getText();
        }

        def onChanged: Signal[TextInput, Int];
        def onChangedId: ArchInt = -1;
        def onKeyPress: Signal[TextInput, String];
        def onKeyPressId: ArchInt = -1;
        def onKeyUp: Signal[TextInput, String];
        def onKeyUpId: ArchInt = -1;

        //---------
        // Handlers

        handler this~init() {
            this.onChanged.owner~no_deref = this;
            this.onKeyPress.owner~no_deref = this;
            this.onKeyUp.owner~no_deref = this;
            this.fontSize = 10.0;
            this.textAlign = String("right");
            this.textDirection = String("rtl");
        }

        //-----------------
        // Member Functions

        handler this.onSignalConnectionsChanged(signal: ptr[Signal[TextInput, Int]], connectionCount: Int) {
            if this.id == "" return;

            if signal == this.onChanged~ptr {
                handleSignalConnectionChanged[onChanged, "change", {
                    this.onChanged.emit(Int(0));
                }];
            }
        }

        handler this.onSignalConnectionsChanged(signal: ptr[Signal[TextInput, String]], connectionCount: Int) {
            if this.id == "" return;

            if signal == this.onKeyPress~ptr {
                handleKeySignalConnectionChanged[onKeyPress, "keypress", "", {
                    def outPayload: String;
                    if data.getBool("shiftKey") outPayload += "Shift+";
                    outPayload += data.getString("code");
                    this.onKeyPress.emit(outPayload);
                }];
            } else if signal == this.onKeyUp~ptr {
                handleKeySignalConnectionChanged[onKeyUp, "keyup", "", {
                    def outPayload: String;
                    if data.getBool("shiftKey") outPayload += "Shift+";
                    outPayload += data.getString("code");
                    this.onKeyUp.emit(outPayload);
                }];
            }
        }

        //-------------------
        // Function Overrides

        handler (this:Widget).build (ownerId: String) set_ptr {
            this.id = getNewId();
            createElement("textarea", this.id, ownerId);
            this.update();
            this.onSignalConnectionsChanged(this.onChanged~ptr, this.onChanged.getConnectionCount());
            this.onSignalConnectionsChanged(this.onKeyPress~ptr, this.onKeyPress.getConnectionCount());
            this.onSignalConnectionsChanged(this.onKeyUp~ptr, this.onKeyUp.getConnectionCount());
            this.buildCommon();
        }

        handler (this:Widget).unbuild() set_ptr {
            if this.onChangedId != -1 unregisterElementEventHandler(this.onChangedId);
            this.onChangedId = -1;

            if this.onKeyPressId != -1 unregisterElementEventHandler(this.onKeyPressId);
            this.onKeyPressId = -1;

            if this.onKeyUpId != -1 unregisterElementEventHandler(this.onKeyUpId);
            this.onKeyUpId = -1;

            deleteElement(this.id);
            this.unbuildCommon();
            this.id = String();
        }

        handler (this:Widget).update() set_ptr {
            if this.id.getLength() > 0 {
                setElementAttribute(this.id, "value", this._text);
                setElementAttribute(
                    this.id, "style",
                    String.format(
                        "resize:none;"
                        "width:%s;"
                        "height:%s;"
                        "background-color:rgba(%i, %i, %i, %i);"
                        "color:rgb(%i, %i, %i);"
                        "font-size:%fpt;"
                        "text-align:%s;"
                        "direction:%s",
                        this.width.buf, this.height.buf,
                        this.backgroundColor.red, this.backgroundColor.green,
                        this.backgroundColor.blue, this.backgroundColor.alpha,
                        this.fontColor.red, this.fontColor.green, this.fontColor.blue,
                        this.fontSize,
                        this.textAlign.buf,
                        this.textDirection.buf
                    )
                );
            }
        }

        //-----------------
        // Shared Functions

        function new (): SrdRef[TextInput] {
            def r: SrdRef[TextInput];
            r.alloc()~init();
            return r;
        }
    }

    //==========================================================================
    // Hyperlink
    class Hyperlink {
        @injection def widget: Widget;
        def child: SrdRef[Widget];

        //-----------
        // Properties

        generateProperty[url, Url, String];

        //---------
        // Handlers

        handler this~init(url: String) {
            this.url = url;
        }

        handler this.setChild (child: temp_ref[SrdRef[Widget]]) {
            if this.child.obj~ptr != 0 this.child.unbuild();
            this.child = child;
            if this.child.obj~ptr != 0 && this.id.getLength() > 0 this.child.build(this.id);
        }

        //-------------------
        // Function Overrides

        handler (this:Widget).build (ownerId: String) set_ptr {
            this.id = getNewId();
            createElement("a", this.id, ownerId);
            this.update();

            if this.child.obj~ptr != 0 this.child.build(this.id);
            this.buildCommon();
        }

        handler (this:Widget).unbuild() set_ptr {
            if this.id.getLength() > 0 {
                deleteElement(this.id);

                if this.child.obj~ptr != 0 this.child.unbuild();

                this.unbuildCommon();
                this.id = String();
            }
        }

        handler (this:Widget).update() set_ptr {
            if this.id.getLength() > 0 {
                setElementAttribute(this.id, "href", this.url);
                setElementAttribute(this.id, "style", "text-decoration: none;");
            }
        }

        //-----------------
        // Shared Functions

        function new (url: String, child: temp_ref[SrdRef[Widget]]): SrdRef[Hyperlink] {
            def r: SrdRef[Hyperlink];
            r.alloc()~init(url);
            r.setChild(child);
            return r;
        }
    }
}

@merge module Srl {
    WebPlatform.defSrdRefCast[Box];
    WebPlatform.defSrdRefCast[Label];
    WebPlatform.defSrdRefCast[Button];
    WebPlatform.defSrdRefCast[TextInput];
    WebPlatform.defSrdRefCast[Hyperlink];
    WebPlatform.defSrdRefCast[Image];
    WebPlatform.defSrdRefCast[Canvas];
}

