@merge module WebPlatform {
    //==========================================================================
    // Widget
    // The base class of all widgets.
    class Widget {
        def id: String;

        // Styles
        generateProperty[width, Width, String];
        generateProperty[height, Height, String];
        generateProperty[backgroundColor, BackgroundColor, Color];

        handler this~init() {
            this.backgroundColor~init(255, 255, 255);
        }

        handler this.build(ownerId: String) as_ptr;
        handler this.unbuild() as_ptr;
        handler this.update() as_ptr;
    }

    //==========================================================================
    // Box
    // A rectangular area that contains other widgets.
    class Box {
        @injection def widget: Widget;
        def children: Array[SrdRef[Widget]];

        //-----------
        // Properties

        generateProperty[padding, Padding, Quad];
        generateProperty[border, Border, Quad];
        generateProperty[borderColor, BorderColor, Color];
        generateProperty[layout, Layout, String];
        generateProperty[justify, Justify, String];
        generateProperty[direction, Direction, String];

        //---------
        // Handlers

        handler this~init() {
            this.borderColor~init(255, 255, 255);
            this.layout = String("column");
            this.justify = String("space-around");
            this.direction = String("rtl");
        }

        handler this.addChildren (count: Int, children: ...temp_ref[SrdRef[Widget]]) {
            while count-- > 0 {
                def child: ref[SrdRef[Widget]](children~next_arg[ref[SrdRef[Widget]]]);
                this.children.add(child);
                if this.id.getLength() > 0 child.build(this.id);
            }
        }

        handler this.removeChildren (count: Int, children: ...temp_ref[SrdRef[Widget]]) {
            while count-- > 0 {
                def child: ref[SrdRef[Widget]](children~next_arg[ref[SrdRef[Widget]]]);
                def i: Int;
                for i = 0, i < this.children.getLength(), ++i {
                    if this.children(i).obj~ptr == child.obj~ptr {
                        child.unbuild();
                        this.children.remove(i);
                        return;
                    }
                }
            }
        }

        //-------------------
        // Function Overrides

        handler (this:Widget).build (ownerId: String) set_ptr {
            this.id = getNewId();
            createElement("div", this.id, ownerId);
            this.update();

            def i: Int;
            for i = 0, i < this.children.getLength(), ++i {
                this.children(i).build(this.id);
            }
        }

        handler (this:Widget).unbuild() set_ptr {
            if this.id.getLength() > 0 {
                deleteElement(this.id);

                def i: Int;
                for i = 0, i < this.children.getLength(), ++i {
                    this.children(i).unbuild();
                }

                this.id = String();
            }
        }

        handler (this:Widget).update() set_ptr {
            if this.id.getLength() > 0 {
                setElementAttribute(
                    this.id, "style",
                    String.format(
                        "width:%s;"
                        "height:%s;"
                        "padding:%fpt %fpt %fpt %fpt;"
                        "border-style:solid;"
                        "border-width:%fpt %fpt %fpt %fpt;"
                        "border-color:rgb(%i, %i, %i);"
                        "background-color:rgb(%i, %i, %i);"
                        "display:flex;flex-direction:%s;justify-content: %s;"
                        "direction:%s;",
                        this.width.buf, this.height.buf,
                        this.padding.top, this.padding.right, this.padding.bottom, this.padding.left,
                        this.border.top, this.border.right, this.border.bottom, this.border.left,
                        this.borderColor.red, this.borderColor.green, this.borderColor.blue,
                        this.backgroundColor.red, this.backgroundColor.green, this.backgroundColor.blue,
                        this.layout.buf, this.justify.buf,
                        this.direction.buf
                    )
                );
            }
        }

        //-----------------
        // Shared Functions

        function new (count: Int, args: ...temp_ref[SrdRef[Widget]]): SrdRef[Box] {
            def r: SrdRef[Box];
            r.alloc()~init();
            while count-- > 0 r.addChildren({ args~next_arg[ref[SrdRef[Widget]]] });
            return r;
        }
    }
    
    //==========================================================================
    // Canvas
    // A free form drawing area.
    class Canvas {
        @injection def widget: Widget;

        //-----------
        // Properties

        generateProperty[padding, Padding, Quad];
        generateProperty[border, Border, Quad];
        generateProperty[borderColor, BorderColor, Color];
        generateProperty[layout, Layout, String];
        generateProperty[justify, Justify, String];
        generateProperty[direction, Direction, String];

        //---------
        // Handlers

        handler this~init() {
            this.borderColor~init(255, 255, 255);
            this.layout = String("column");
            this.justify = String("space-around");
            this.direction = String("rtl");
        }

        //-------------------
        // Function Overrides

        handler (this:Widget).build (ownerId: String) set_ptr {
            this.id = getNewId();
            createElement("canvas", this.id, ownerId);
            this.update();
        }

        handler (this:Widget).unbuild() set_ptr {
            if this.id.getLength() > 0 {
                deleteElement(this.id);

                this.id = String();
            }
        }

        handler (this:Widget).update() set_ptr {
            if this.id.getLength() > 0 {
                setElementAttribute(
                    this.id, "style",
                    String.format(
                        "width:%s;"
                        "height:%s;"
                        "padding:%fpt %fpt %fpt %fpt;"
                        "border-style:solid;"
                        "border-width:%fpt %fpt %fpt %fpt;"
                        "border-color:rgb(%i, %i, %i);"
                        "background-color:rgb(%i, %i, %i);"
                        "display:flex;flex-direction:%s;justify-content: %s;"
                        "direction:%s;",
                        this.width.buf, this.height.buf,
                        this.padding.top, this.padding.right, this.padding.bottom, this.padding.left,
                        this.border.top, this.border.right, this.border.bottom, this.border.left,
                        this.borderColor.red, this.borderColor.green, this.borderColor.blue,
                        this.backgroundColor.red, this.backgroundColor.green, this.backgroundColor.blue,
                        this.layout.buf, this.justify.buf,
                        this.direction.buf
                    )
                );
            }
        }

        //-----------------
        // Shared Functions

        function new (): SrdRef[Canvas] {
            def r: SrdRef[Canvas];
            r.alloc()~init();
            return r;
        }
    }

    //==========================================================================
    // Label
    class Label {
        @injection def widget: Widget;

        //-----------
        // Properties
        generateProperty[text, Text, String];
        generateProperty[padding, Padding, Quad];
        generateProperty[fontSize, FontSize, Float];
        generateProperty[fontColor, FontColor, Color];
        generateProperty[textAlign, TextAlign, String];
        generateProperty[textDirection, TextDirection, String];

        //----------
        // Handlers

        handler this~init(t: String) {
            this.text = t;
            this.fontSize = 10.0;
            this.textAlign = String("right");
            this.textDirection = String("rtl");
        }

        //-------------------
        // Function Overrides

        handler (this:Widget).build (ownerId: String) set_ptr {
            this.id = getNewId();
            createElement("span", this.id, ownerId);
            this.update();
        }

        handler (this:Widget).unbuild() set_ptr {
            if this.id.getLength() > 0 {
                deleteElement(this.id);
                this.id = String();
            }
        }

        handler (this:Widget).update() set_ptr {
            if this.id.getLength() > 0 {
                setElementAttribute(this.id, "innerHTML", this.text);
                setElementAttribute(
                    this.id, "style",
                    String.format(
                        "width:%s;"
                        "height:%s;"
                        "background-color:rgb(%i, %i, %i);"
                        "color:rgb(%i, %i, %i);"
                        "font-size:%fpt;"
                        "text-align:%s;"
                        "padding:%fpt %fpt %fpt %fpt;"
                        "direction:%s",
                        this.width.buf, this.height.buf,
                        this.backgroundColor.red, this.backgroundColor.green, this.backgroundColor.blue,
                        this.fontColor.red, this.fontColor.green, this.fontColor.blue,
                        this.fontSize,
                        this.textAlign.buf,
                        this.padding.top, this.padding.right, this.padding.bottom, this.padding.left,
                        this.textDirection.buf
                    )
                );
            }
        }

        //-----------------
        // Shared Functions

        function new (t: String): SrdRef[Label] {
            def r: SrdRef[Label];
            r.alloc()~init(t);
            return r;
        }
    }

    //==========================================================================
    // Button
    class Button {
        @injection def widget: Widget;

        //-----------------------
        // Properties and Signals

        generateProperty[text, Text, String];
        generateProperty[fontSize, FontSize, Float];
        generateProperty[fontColor, FontColor, Color];
        generateProperty[textAlign, TextAlign, String];
        generateProperty[textDirection, TextDirection, String];
        def onClick: Signal[Button, Int];
        def onClickId: ArchInt = -1;

        //---------
        // Handlers

        handler this~init(t: String) {
            this.onClick.owner~no_deref = this;
            this.text = t;
            this.fontSize = 10.0;
            this.textAlign = String("right");
            this.textDirection = String("rtl");
        }

        //-----------------
        // Member Functions

        handler this.onSignalConnectionsChanged(signal: ptr[Signal[Button, Int]], connectionCount: Int) {
            if this.id == "" return;

            if signal == this.onClick~ptr {
                if connectionCount > 0 and this.onClickId == -1 {
                    this.onClickId = registerElementEventHandler(this.id, "click", closure (json: Json) {
                        this.onClick.emit(Int(0));
                    });
                } else if connectionCount == 0 and this.onClickId != -1{
                    unregisterElementEventHandler(this.onClickId);
                }
            }
        }

        //-------------------
        // Function Overrides

        handler (this:Widget).build (ownerId: String) set_ptr {
            this.id = getNewId();
            createElement("button", this.id, ownerId);
            this.update();
            this.onSignalConnectionsChanged(this.onClick~ptr, this.onClick.getConnectionCount());
        }

        handler (this:Widget).unbuild() set_ptr {
            if this.onClickId != -1 unregisterElementEventHandler(this.onClickId);
            this.onClickId = -1;
            deleteElement(this.id);
            this.id = String();
        }

        handler (this:Widget).update() set_ptr {
            if this.id.getLength() > 0 {
                setElementAttribute(this.id, "innerHTML", this.text);
                setElementAttribute(
                    this.id, "style",
                    String.format(
                        "width: %s;"
                        "height: %s;"
                        "background-color: rgb(%i, %i, %i);"
                        "color:rgb(%i, %i, %i);"
                        "font-size:%fpt;"
                        "text-align:%s;"
                        "direction:%s",
                        this.width.buf, this.height.buf,
                        this.backgroundColor.red, this.backgroundColor.green, this.backgroundColor.blue,
                        this.fontColor.red, this.fontColor.green, this.fontColor.blue,
                        this.fontSize,
                        this.textAlign.buf,
                        this.textDirection.buf
                    )
                );
            }
        }

        //-----------------
        // Shared Functions

        function new (t: String): SrdRef[Button] {
            def r: SrdRef[Button];
            r.alloc()~init(t);
            return r;
        }
    }

    //==========================================================================
    // TextInput
    // A multi-line text entry.
    class TextInput {
        @injection def widget: Widget;

        //-----------------------
        // Properties and Signals

        generateProperty[fontSize, FontSize, Float];
        generateProperty[fontColor, FontColor, Color];
        generateProperty[textAlign, TextAlign, String];
        generateProperty[textDirection, TextDirection, String];
        def onChanged: Signal[TextInput, Int];
        def onChangedId: ArchInt = -1;
        def onKeyPress: Signal[TextInput, String];
        def onKeyPressId: ArchInt = -1;
        def onKeyUp: Signal[TextInput, String];
        def onKeyUpId: ArchInt = -1;

        //---------
        // Handlers

        handler this~init() {
            this.onChanged.owner~no_deref = this;
            this.onKeyPress.owner~no_deref = this;
            this.onKeyUp.owner~no_deref = this;
            this.fontSize = 10.0;
            this.textAlign = String("right");
            this.textDirection = String("rtl");
        }

        //-----------------
        // Member Functions

        handler this.onSignalConnectionsChanged(signal: ptr[Signal[TextInput, Int]], connectionCount: Int) {
            if this.id == "" return;

            if signal == this.onChanged~ptr {
                if connectionCount > 0 and this.onChangedId == -1 {
                    this.onChangedId = registerElementEventHandler(this.id, "change", closure (json: Json) {
                        this.onChanged.emit(Int(0));
                    });
                } else if connectionCount == 0 and this.onChangedId != -1{
                    unregisterElementEventHandler(this.onChangedId);
                }
            }
        }

        handler this.onSignalConnectionsChanged(signal: ptr[Signal[TextInput, String]], connectionCount: Int) {
            if this.id == "" return;

            if signal == this.onKeyPress~ptr {
                if connectionCount > 0 and this.onKeyPressId == -1 {
                    this.onKeyPressId = registerElementEventHandler(this.id, "keypress", closure (json: Json) {
                        def data: Json = json.getObject("eventData");
                        def outPayload: String;
                        if data.getBool("shiftKey") outPayload += "Shift+";
                        outPayload += data.getString("code");
                        this.onKeyPress.emit(outPayload);
                    });
                } else if connectionCount == 0 and this.onKeyPressId != -1{
                    unregisterElementEventHandler(this.onKeyPressId);
                }
            } else if signal == this.onKeyUp~ptr {
                if connectionCount > 0 and this.onKeyUpId == -1 {
                    this.onKeyUpId = registerElementEventHandler(this.id, "keyup", closure (json: Json) {
                        def data: Json = json.getObject("eventData");
                        def outPayload: String;
                        if data.getBool("shiftKey") outPayload += "Shift+";
                        outPayload += data.getString("code");
                        this.onKeyUp.emit(outPayload);
                    });
                } else if connectionCount == 0 and this.onKeyUpId != -1{
                    unregisterElementEventHandler(this.onKeyUpId);
                }
            }
        }

        handler this.setText (t: String) {
            if this.id.getLength() > 0 setElementAttribute(this.id, "value", t);
        }
        handler this.getText (): String {
            if this.id.getLength() == 0 return String();
            return String(getElementAttribute(this.id, "value"));
        }

        //-------------------
        // Function Overrides

        handler (this:Widget).build (ownerId: String) set_ptr {
            this.id = getNewId();
            createElement("textarea", this.id, ownerId);
            this.update();
            this.onSignalConnectionsChanged(this.onChanged~ptr, this.onChanged.getConnectionCount());
            this.onSignalConnectionsChanged(this.onKeyPress~ptr, this.onKeyPress.getConnectionCount());
            this.onSignalConnectionsChanged(this.onKeyUp~ptr, this.onKeyUp.getConnectionCount());
        }

        handler (this:Widget).unbuild() set_ptr {
            if this.onChangedId != -1 unregisterElementEventHandler(this.onChangedId);
            this.onChangedId = -1;

            if this.onKeyPressId != -1 unregisterElementEventHandler(this.onKeyPressId);
            this.onKeyPressId = -1;

            if this.onKeyUpId != -1 unregisterElementEventHandler(this.onKeyUpId);
            this.onKeyUpId = -1;

            deleteElement(this.id);
            this.id = String();
        }

        handler (this:Widget).update() set_ptr {
            if this.id.getLength() > 0 {
                setElementAttribute(
                    this.id, "style",
                    String.format(
                        "resize:none;"
                        "width:%s;"
                        "height:%s;"
                        "background-color:rgb(%i, %i, %i);"
                        "color:rgb(%i, %i, %i);"
                        "font-size:%fpt;"
                        "text-align:%s;"
                        "direction:%s",
                        this.width.buf, this.height.buf,
                        this.backgroundColor.red, this.backgroundColor.green, this.backgroundColor.blue,
                        this.fontColor.red, this.fontColor.green, this.fontColor.blue,
                        this.fontSize,
                        this.textAlign.buf,
                        this.textDirection.buf
                    )
                );
            }
        }

        //-----------------
        // Shared Functions

        function new (): SrdRef[TextInput] {
            def r: SrdRef[TextInput];
            r.alloc()~init();
            return r;
        }
    }

    //==========================================================================
    // Hyperlink
    class Hyperlink {
        @injection def widget: Widget;
        def child: SrdRef[Widget];

        //-----------
        // Properties

        generateProperty[url, Url, String];

        //---------
        // Handlers

        handler this~init(url: String) {
            this.url = url;
        }

        handler this.setChild (child: temp_ref[SrdRef[Widget]]) {
            if this.child.obj~ptr != 0 this.child.unbuild();
            this.child = child;
            if this.child.obj~ptr != 0 && this.id.getLength() > 0 this.child.build(this.id);
        }

        //-------------------
        // Function Overrides

        handler (this:Widget).build (ownerId: String) set_ptr {
            this.id = getNewId();
            createElement("a", this.id, ownerId);
            this.update();

            if this.child.obj~ptr != 0 this.child.build(this.id);
        }

        handler (this:Widget).unbuild() set_ptr {
            if this.id.getLength() > 0 {
                deleteElement(this.id);

                if this.child.obj~ptr != 0 this.child.unbuild();

                this.id = String();
            }
        }

        handler (this:Widget).update() set_ptr {
            if this.id.getLength() > 0 {
                setElementAttribute(this.id, "href", this.url);
                setElementAttribute(this.id, "style", "text-decoration: none;");
            }
        }

        //-----------------
        // Shared Functions

        function new (url: String, child: temp_ref[SrdRef[Widget]]): SrdRef[Hyperlink] {
            def r: SrdRef[Hyperlink];
            r.alloc()~init(url);
            r.setChild(child);
            return r;
        }
    }
}

@merge module Srl {
    WebPlatform.defSrdRefCast[Box];
    WebPlatform.defSrdRefCast[Label];
    WebPlatform.defSrdRefCast[Button];
    WebPlatform.defSrdRefCast[TextInput];
    WebPlatform.defSrdRefCast[Hyperlink];
    WebPlatform.defSrdRefCast[Canvas];
}

