@merge module WebPlatform {
    //==========================================================================
    // Switcher
    // A view switcher allowing users to dynamically switch the child view and
    // optionally do that with a transition animation.
    class Switcher {
        @injection def component: Component;
        @shared def transitionUniqueCounter: Int(0);
        def transitionUniqueSuffix: Int = ++transitionUniqueCounter;
        def innerView: SrdRef[Box];
        def transitionView: SrdRef[Box];
        def transitionTimeout: ArchInt = 0;
        def transitionDurations: Map[String, Int];
        def shouldPreserveChild: closure (child: ref[Widget]): Bool;

        this.style.{
            display = Display.FLEX;
            layout = Layout.ROW;
            overflowX = Overflow.CLIP;
            overflowY = Overflow.CLIP;
            position = Position.RELATIVE;
        };
        this.style(">switcherview").{
            width = Length.percent(100);
            height = Length.percent(100);
            position = Position.ABSOLUTE;
            flex = Flex(0, 0);
        };
        this.style(">hiddenview").{
            display = Display.NONE;
        };
        this.view = Box({})~use_in(self) {
            style = this.style;
            addChildren({
                Box({})~use_in(self) {
                    className = String("switcherview");
                    addChildren({ Box() });
                    this.innerView = self;
                }
            });
        };

        handler this~init() {
        }

        handler this~init(child: SrdRef[Widget]) {
            this.innerView.addChildren({ child });
        }

        handler this.setTransition(name: String, transition: SwitcherTransition) {
            name += this.transitionUniqueSuffix;
            this.transitionDurations(name) = transition.totalDuration;
            this.style(String(">") + name + "_current") = transition.currentViewStyle;
            this.style(String(">") + name + "_incoming") = transition.incomingViewStyle;
        }

        handler this.switchTo(child: SrdRef[Widget]) {
            this.switchTo(child, String());
        }

        handler this.switchTo(child: SrdRef[Widget], transitionName: String) {
            if transitionName != "" transitionName += this.transitionUniqueSuffix;
            if this.transitionDurations.findPos(transitionName) == -1 transitionName = "";

            if this.transitionTimeout != 0 cancelTimeout(this.transitionTimeout);
            this.endTransition();

            castRef[this.view.obj, Box]~use_in(self) {
                // Find the view, if any.
                def i: Int;
                for i = 0, i < children.getLength(), ++i {
                    if children(i).obj~cast[ref[Box]].children(0).obj~ptr == child.obj~ptr {
                        if transitionName != "" children(i).className = transitionName + "_incoming switcherview"
                        else children(i).className = String("switcherview");
                        this.transitionView = castSrdRef[children(i), Box];
                        break;
                    }
                }
                // Create a new view if we didn't find one.
                if i == children.getLength() addChildren({
                    Box({})~use_in(self) {
                        if transitionName != "" className = transitionName + "_incoming switcherview"
                        else className = String("switcherview");
                        addChildren({ child });
                        this.transitionView = self;
                    }
                });
            };
            if transitionName != "" this.innerView.className = transitionName + "_current switcherview";

            if transitionName != "" {
                this.transitionTimeout = setTimeout(this.transitionDurations(transitionName), closure (json: Json) {
                    this.endTransition();
                });
            } else {
                this.endTransition();
            }
        }

        handler this.endTransition() {
            if this.transitionView.isNull() return;
            def child: ref[Widget](this.innerView.obj~cast[ref[Box]].children(0));
            if not this.shouldPreserveChild.isNull() and this.shouldPreserveChild(child) {
                this.innerView.className = String("hiddenview");
            } else {
                castRef[this.view.obj, Box].removeChildren({ this.innerView });
            }
            this.innerView = this.transitionView;
            this.innerView.className = String("switcherview");
            this.transitionView.release();
            this.transitionTimeout = 0;
        }

        //-----------------
        // Shared Functions

        handler this_type(): SrdRef[Switcher] {
            return SrdRef[Switcher].construct();
        }
        handler this_type(child: temp_ref[SrdRef[Widget]]): SrdRef[Switcher] {
            return SrdRef[Switcher]().{ alloc()~init(child) };
        }
    }

    //==========================================================================
    // SwitcherTransition
    // Contains transition animation styles used by the switcher.
    class SwitcherTransition {
        def currentViewStyle: Style;
        def incomingViewStyle: Style;
        def totalDuration: Int;

        handler this~init() {}
        handler this~init(ref[this_type]) this = value;
        handler this = ref[this_type] {
            this.currentViewStyle = value.currentViewStyle;
            this.incomingViewStyle = value.incomingViewStyle;
            this.totalDuration = value.totalDuration;
        }
    }

    //==========================================================================
    // Default Transitions

    func createSlideSwitcherTransition (duration: Float, vertical: Bool, backward: Bool): SwitcherTransition {
        def currentEnd: SrdRef[Length];
        def incomingStart: SrdRef[Length];
        if backward {
            currentEnd = Length.percent(100);
            incomingStart = Length.percent(-100);
        } else {
            currentEnd = Length.percent(-100);
            incomingStart = Length.percent(100);
        }
        return SwitcherTransition().{
            totalDuration = duration * 1000000;
            currentViewStyle.{
                if vertical top = currentEnd else left = currentEnd;
                animation = Animation(duration, Array[Style]({
                    Style().{ if vertical top = Length.pt(0) else left = Length.pt(0) },
                    Style().{ if vertical top = currentEnd else left = currentEnd }
                }));
            };
            incomingViewStyle.{
                if vertical top = Length.pt(0) else left = Length.pt(0);
                animation = Animation(duration, Array[Style]({
                    Style().{ if vertical top = incomingStart else left = incomingStart },
                    Style().{ if vertical top = Length.pt(0) else left = Length.pt(0) }
                }));
            }
        }
    }

    func createFadeSwitcherTransition (duration: Float): SwitcherTransition {
        return SwitcherTransition().{
            totalDuration = duration * 1000000;
            currentViewStyle.{
                left = Length.pt(0);
                opacity = 0.0;
                animation = Animation(duration, Array[Style]({
                    Style().{ opacity = 1.0 },
                    Style().{ opacity = 0.0 }
                }));
            };
            incomingViewStyle.{
                left = Length.pt(0);
                animation = Animation(duration, Array[Style]({
                    Style().{ opacity = 0.0 },
                    Style().{ opacity = 1.0 }
                }));
            };
        }
    }

    // TODO: Add more transitions.
}

