@merge module WebPlatform {
    //==========================================================================
    // RoutingSwitcher
    // A switcher that switches the components based on routes.
    class RoutingSwitcher {
        @injection def switcher: Switcher;

        // Member Variables

        def RouteCallback: alias closure(RoutePayload): SrdRef[Widget];
        def locationChangedHandler: closure (ref[Window], ref[Int]) = closure (ref[Window], ref[Int]) {
            this.triggerRoute();
        };
        def routes: Map[String, RouteCallback];
        def onUnknownRoute: closure(ref[RoutingSwitcher], RoutePayload);
        def currentRouteIndex: Int = -1;

        // Initialization

        handler this~init() {
            Window.instance.onLocationChanged.connect(this.locationChangedHandler);
        }

        handler this~terminate() {
            Window.instance.onLocationChanged.disconnect(this.locationChangedHandler);
        }

        // Configuration Functions

        handler this.route(r: String): ref[RouteCallback] return this.routes(r);
        handler this.route(r: CharsPtr): ref[RouteCallback] return this.routes(String(r));
        handler [r: string, t: type] this.route() {
            this.route(String(r)) = closure(RoutePayload): SrdRef[Widget] {
                return t();
            };
        }

        handler this.setTransition(forward: SwitcherTransition, backward: SwitcherTransition) {
            this.setTransition(String("forward"), forward);
            this.setTransition(String("backward"), backward);
        }

        // Operation Functions

        handler this.triggerRoute() {
            def payload: RoutePayload;
            def pos: Int = this.determineCurrentRouteIndex(payload);
            if pos >= 0 {
                if pos > this.currentRouteIndex this.switchTo(this.routes.valAt(pos)(payload), String("forward"))
                else if pos < this.currentRouteIndex this.switchTo(this.routes.valAt(pos)(payload), String("backward"));
                this.currentRouteIndex = pos;
            } else if not this.onUnknownRoute.isNull() this.onUnknownRoute(this, payload);
        }

        handler (this:Component).beforeBuild() set_ptr {
            // Handle initial view.
            if this.routes.getLength() == 0 {
                this.currentRouteIndex = -1;
                return;
            }
            def payload: RoutePayload;
            def pos: Int = this.determineCurrentRouteIndex(payload);
            if pos == -1 pos = 0;
            this.switchTo(this.routes.valAt(pos)(payload));
            this.currentRouteIndex = pos;
        }

        handler this.determineCurrentRouteIndex(): Int {
            return this.determineCurrentRouteIndex(nullRef[RoutePayload]);
        }

        handler this.determineCurrentRouteIndex(rp: ref[RoutePayload]): Int {
            def payload: RoutePayload;
            payload.fullPath = Window.instance.location;
            def i: Int;
            for i = 0, i < this.routes.getLength(), ++i {
                def result: Array[String] = matchRegex(payload.fullPath, this.routes.keyAt(i));
                if result.getLength() > 0 {
                    payload.route = result(0);
                    result.remove(0);
                    payload.params = result;
                    if rp~ptr != 0 rp = payload;
                    return i;
                }
            }
            if rp~ptr != 0 rp = payload;
            return -1;
        }

        // Class Handlers

        handler this_type(): SrdRef[RoutingSwitcher] {
            return SrdRef[RoutingSwitcher].construct();
        }

        handler this_type(r: String): SrdRef[RoutingSwitcher] {
            return SrdRef[RoutingSwitcher]().{ alloc()~init(r) };
        }
    }
}

