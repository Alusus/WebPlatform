@merge module WebPlatform {
    //==========================================================================
    // Stack
    // A view stack allowing users to stack views on top of each other and
    // optionally do that with a transition animation.
    class Stack {
        @injection def component: Component;
        @shared def transitionUniqueCounter: Int(0);
        def transitionUniqueSuffix: Int = ++transitionUniqueCounter;
        def views: Array[SrdRef[Box]];
        def transitionTimeout: ArchInt = 0;
        def transitionIn: Bool;
        def transitionDurations: Map[String, Int];

        this.style.{
            display = Display.FLEX;
            layout = Layout.ROW;
            overflowX = Overflow.CLIP;
            overflowY = Overflow.CLIP;
            position = Position.RELATIVE;;
        };
        this.style(">stackview").{
            width = Length.percent(100);
            height = Length.percent(100);
            position = Position.ABSOLUTE;
            left = Length.pt(0);
            flex = Flex(0, 0);
        };
        this.view = Box({})~use_in(self) {
            style = this.style;
        };

        handler this~init() {
        }

        handler this~init(child: SrdRef[Widget]) {
            this.push(child);
        }

        handler this.setTransition(name: String, transition: StackTransition) {
            name += this.transitionUniqueSuffix;
            this.transitionDurations(name) = transition.totalDuration;
            this.style(String(">") + name) = transition.topViewStyle;
        }

        handler this.push(child: SrdRef[Widget]) {
            this.push(child, String());
        }

        handler this.push(child: SrdRef[Widget], transitionName: String) {
            transitionName += this.transitionUniqueSuffix;
            if this.transitionTimeout != 0 {
                cancelTimeout(this.transitionTimeout);
                this.endTransition();
            }

            castRef[this.view.obj, Box]~use_in(self) {
                addChildren({
                    Box({})~use_in(self) {
                        if transitionName != "" className = transitionName + " stackview"
                        else className = String("stackview");
                        addChildren({ child });
                        this.views.add(self);
                    }
                });
            };

            this.transitionIn = true;
            if transitionName != "" {
                this.transitionTimeout = setTimeout(this.transitionDurations(transitionName), closure (json: Json) {
                    this.endTransition();
                });
            } else {
                this.endTransition();
            }
        }

        handler this.pop() {
            this.pop(String());
        }

        handler this.pop(transitionName: String) {
            if this.views.getLength() == 0 return;
            transitionName += this.transitionUniqueSuffix;
            if this.transitionTimeout != 0 {
                cancelTimeout(this.transitionTimeout);
                this.endTransition();
            }

            this.transitionIn = false;
            if transitionName != "" {
                this.views(this.views.getLength()-1).className = transitionName + " stackview"
                this.transitionTimeout = setTimeout(this.transitionDurations(transitionName), closure (json: Json) {
                    this.endTransition();
                });
            } else {
                this.endTransition();
            }
        }

        handler this.endTransition() {
            if this.views.getLength() == 0 return;
            if this.transitionIn {
                this.views(this.views.getLength()-1).className = String("stackview");
            } else {
                castRef[this.view.obj, Box].removeChildren({ this.views(this.views.getLength()-1) });
                this.views.remove(this.views.getLength()-1);
            }
            this.transitionTimeout = 0;
        }

        //-----------------
        // Shared Functions

        handler this_type(): SrdRef[Stack] {
            return SrdRef[Stack].construct();
        }
        handler this_type(child: temp_ref[SrdRef[Widget]]): SrdRef[Stack] {
            return SrdRef[Stack]().{ alloc()~init(child) };
        }
    }

    //==========================================================================
    // StackTransition
    // Contains transition animation styles used by the stack.
    class StackTransition {
        def topViewStyle: Style;
        def totalDuration: Int;

        handler this~init() {}
        handler this~init(ref[this_type]) this = value;
        handler this = ref[this_type] {
            this.topViewStyle = value.topViewStyle;
            this.totalDuration = value.totalDuration;
        }
    }

    //==========================================================================
    // Default Transitions

    func createSlideStackTransition (duration: Float, vertical: Bool, exiting: Bool): StackTransition {
        return createSlideStackTransition(duration, vertical, exiting, 0);
    }

    func createSlideStackTransition (duration: Float, vertical: Bool, exiting: Bool, reverse: Bool): StackTransition {
        def start: SrdRef[Length];
        def end: SrdRef[Length];
        if exiting {
            start = Length.pt(0);
            if reverse end = Length.percent(-100)
            else end = Length.percent(100);
        } else {
            if reverse start = Length.percent(-100)
            else start = Length.percent(100);
            end = Length.pt(0);
        }
        return StackTransition().{
            totalDuration = duration * 1000000;
            topViewStyle.{
                if vertical top = end else left = end;
                animation = Animation(duration, Array[Style]({
                    Style().{ if vertical top = start else left = start },
                    Style().{ if vertical top = end else left = end }
                }));
            }
        }
    }

    func createFadeStackTransition (duration: Float, exiting: Bool): StackTransition {
        return createFadeWithScaleStackTransition(duration, 1.0, exiting);
    }

    func createFadeWithScaleStackTransition (duration: Float, minScale: Float, exiting: Bool): StackTransition {
        def startOpacity: Float;
        def startScale: Float;
        def endOpacity: Float;
        def endScale: Float;
        if exiting {
            startOpacity = 1.0;
            endOpacity = 0.0;
            startScale = 1.0;
            endScale = minScale;
        } else {
            startOpacity = 0.0;
            endOpacity = 1.0;
            startScale = minScale;
            endScale = 1.0;
        }
        return StackTransition().{
            totalDuration = duration * 1000000;
            topViewStyle.{
                opacity = endOpacity;
                transform = Transform.scale(endScale, endScale);
                animation = Animation(duration, Array[Style]({
                    Style().{ opacity = startOpacity; transform = Transform.scale(startScale, startScale) },
                    Style().{ opacity = endOpacity; transform = Transform.scale(endScale, endScale) }
                }));
            }
        }
    }

    // TODO: Add more transitions.
}
