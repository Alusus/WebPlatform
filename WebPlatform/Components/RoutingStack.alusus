@merge module WebPlatform {
    //==========================================================================
    // RoutingStack
    // A stack that stacks the components based on routes.
    class RoutingStack {
        @injection def stack: Stack;

        // Member Variables

        def RouteCallback: alias closure(RoutePayload): SrdRef[Component];
        def locationChangedHandler: closure (ref[Window], ref[Int]) = closure (ref[Window], ref[Int]) {
            this.triggerRoute(false);
        };
        def routes: Map[String, RouteCallback];
        def onUnknownRoute: closure(ref[RoutingStack], RoutePayload);

        // Initialization

        handler this~init() {
            Window.instance.onLocationChanged.connect(this.locationChangedHandler);
        }

        handler this~terminate() {
            Window.instance.onLocationChanged.disconnect(this.locationChangedHandler);
        }

        // Configuration Functions

        handler this.route(r: String): ref[RouteCallback] return this.routes(r);
        handler this.route(r: CharsPtr): ref[RouteCallback] return this.routes(String(r));
        handler [r: string, t: type] this.route() {
            this.route(String(r)) = closure(RoutePayload): SrdRef[Component] {
                return t();
            };
        }

        handler this.setTransition(pushing: StackTransition, popping: StackTransition) {
            this.setTransition(String("pushing"), pushing);
            this.setTransition(String("popping"), popping);
        }

        // Operation Functions

        handler this.triggerRoute(skipTransitions: Bool) {
            def payload: RoutePayload;
            payload.fullPath = Window.instance.location;
            def i: Int;
            for i = 0, i < this.routes.getLength(), ++i {
                def result: Array[String] = matchRegex(payload.fullPath, this.routes.keyAt(i));
                if result.getLength() > 0 {
                    payload.route = result(0);
                    result.remove(0);
                    payload.params = result;
                    if this.views.getLength() <= i {
                        def component: SrdRef[Component] = this.routes.valAt(i)(payload);
                        if skipTransitions this.push(component)
                        else this.push(component, String("pushing"));
                    }
                } else {
                    break;
                }
            }
            // If we haven't at least matched the first route, then we are not even into the stack so we'll assume the
            // user is browsing away from this page which is not necessarily an error. In this case we also don't want
            // to pop views out, we can just return.
            if i == 0 return;
            if payload.fullPath != payload.route and not this.onUnknownRoute.isNull() {
                payload.route = "";
                payload.params.clear();
                this.onUnknownRoute(this, payload);
            }
            def j: Int;
            for j = this.views.getLength() - 1, j >= i, --j {
                if skipTransitions this.pop()
                else this.pop(String("popping"));
            }
        }

        handler (this:Component).beforeBuild() set_ptr {
            // Handle initial view.
            if this.routes.getLength() == 0 {
                return;
            }
            this.triggerRoute(true);
        }

        // Class Handlers

        handler this_type(): SrdRef[RoutingStack] {
            return SrdRef[RoutingStack].construct();
        }

        handler this_type(r: String): SrdRef[RoutingStack] {
            return SrdRef[RoutingStack]().{ alloc()~init(r) };
        }
    }
}

