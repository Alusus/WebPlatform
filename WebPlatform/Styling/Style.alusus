@merge module WebPlatform {
    //==========================================================================
    // Styles
    // Holds styling properties for widgets.
    class Style {
        // Variables

        def id: String;
        def selector: String;
        def props: Map[String, String];
        def onUpdated: closure();

        // Properties

        generateStringStyleProp[width, "width"];
        generateStringStyleProp[height, "height"];
        generateStringStyleProp[minWidth, "min-width"];
        generateStringStyleProp[minHeight, "min-height"];
        generateStringStyleProp[maxWidth, "max-width"];
        generateStringStyleProp[maxHeight, "max-height"];
        generateQuadStyleProp[borderWidth, "border-width"];
        generateColorStyleProp[borderColor, "border-color"];
        generateQuadStyleProp[borderRadius, "border-radius"];
        generateStringStyleProp[borderStyle, "border-style"];
        generateStringStyleProp[floating, "float"];
        generateStringStyleProp[position, "position"];
        generateStringStyleProp[zIndex, "z-index"];
        generateStringStyleProp[flex, "flex"];
        generateStringStyleProp[layout, "flex-direction"];
        generateStringStyleProp[justify, "justify-content"];
        generateQuadStyleProp[margin, "margin"];
        generateStringStyleProp[align, "align-items"];
        generateStringStyleProp[textAlign, "text-align"];
        generateStringStyleProp[direction, "direction"];
        generateQuadStyleProp[padding, "padding"];
        generateFloatPtStyleProp[fontSize, "font-size"];
        generateColorStyleProp[fontColor, "color"];
        generateStringStyleProp[fontFamily, "font-family"];
        generateFloatStyleProp[opacity, "opacity"];
        generateStringStyleProp[transition, "transition"];
        generateStringStyleProp[transform, "transform"];
        generateStringStyleProp[translate, "translate"];
        generateStringStyleProp[overflow, "overflow"];
        generateStringStyleProp[boxShadow, "box-shadow"];
        generateStringStyleProp[display, "display"];
        generateStringStyleProp[cursor, "cursor"];
        generateStringStyleProp[top, "top"];
        generateStringStyleProp[left, "left"];
        generateStringStyleProp[right, "right"];
        generateStringStyleProp[bottom, "bottom"];
        generateColorStyleProp[background, "background"];

        def vanimation: SrdRef[Animation];
        handler this.animation = (val: SrdRef[Animation]) {
            if !this.vanimation.isNull() and this.id != "" this.vanimation.unbuild();
            this.vanimation = val;
            if !this.vanimation.isNull() and this.id != "" this.vanimation.build();
            this.onPropUpdated();
            return this.vanimation;
        }
        handler this.animation: SrdRef[Animation] {
            return this.vanimation;
        }

        // Initializers and Operators

        handler this~init() {}

        handler this~init(ref[Style]) {
            this = value;
        }

        handler this = ref[Style] {
            this.props = value.props;
            this.vanimation = value.vanimation;
            this.onPropUpdated();
        }

        // Functions

        handler this.onPropUpdated() {
            if !this.onUpdated.isNull() this.onUpdated();
            this.update();
        }

        handler this.build(id: String, selector: String) {
            this.id = id;
            this.selector = selector;
            if !this.vanimation.isNull() this.vanimation.build();
            this.update();
        }

        handler this.unbuild() {
            if this.id == "" return;
            if !this.vanimation.isNull() this.vanimation.unbuild();
            removeStyleRule(this.id, this.selector);
        }

        handler this.update() {
            if this.id == "" return;
            setStyleRule(this.id, this.selector, this.getCssString());
        }

        handler this.getCssString(): String {
            def styleRep: String;
            def i: Int;
            for i = 0, i < this.props.getLength(), ++i {
                styleRep += this.props.keyAt(i) + ":" + this.props.valAt(i) + ";";
            }
            if !this.vanimation.isNull() {
                styleRep += String.format("animation-name:%s;", this.vanimation.name.buf);
                styleRep += String.format("animation-duration:%fs;", this.vanimation.totalDuration);
            }
            return styleRep;
        }
    }

    //==========================================================================
    // Helper Macros

    macro generateStringStyleProp [propName, styleName] {
        handler this.propName = (val: CharsPtr) {
            this.props(String(styleName)) = String(val);
            this.onPropUpdated();
            return val;
        }
        handler this.propName = (val: ref[String]) {
            this.props(String(styleName)) = val;
            this.onPropUpdated();
            return val;
        }
        handler this.propName: ref[String] {
            return this.props(String(styleName));
        }
    }

    macro generateColorStyleProp [propName, styleName] {
        handler this.propName = (val: ref[Color]) {
            this.props(String(styleName)) = String.format(
                "rgba(%i, %i, %i, %i)", val.red, val.green, val.blue, val.alpha
            );
            this.onPropUpdated();
            return val;
        }
        generateStringStyleProp[propName, styleName];
    }

    macro generateFloatStyleProp [propName, styleName] {
        handler this.propName = (val: Float) {
            this.props(String(styleName)) = String.format("%f", val);
            this.onPropUpdated();
            return val;
        }
        generateStringStyleProp[propName, styleName];
    }

    macro generateFloatPtStyleProp [propName, styleName] {
        handler this.propName = (val: Float) {
            this.props(String(styleName)) = String.format("%fpt", val);
            this.onPropUpdated();
            return val;
        }
        generateStringStyleProp[propName, styleName];
    }

    macro generateQuadStyleProp [propName, styleName] {
        handler this.propName = (val: ref[Quad]) {
            this.props(String(styleName)) = String.format(
                "%fpt %fpt %fpt %fpt", val.top, val.right, val.bottom, val.left
            );
            this.onPropUpdated();
            return val;
        }
        generateStringStyleProp[propName, styleName];
    }
}

