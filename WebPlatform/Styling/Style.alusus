@merge module WebPlatform {
    //==========================================================================
    // Styles
    // Holds styling properties for widgets.
    class Style {
        // Variables

        def props: Map[String, String];
        def transitions: Map[String, String];
        def inUse: Bool = false;
        def onUpdated: closure();

        // Properties

        generateTypedStyleProp[width, "width", Length];
        generateTypedStyleProp[height, "height", Length];
        generateTypedStyleProp[minWidth, "min-width", Length];
        generateTypedStyleProp[minHeight, "min-height", Length];
        generateTypedStyleProp[maxWidth, "max-width", Length];
        generateTypedStyleProp[maxHeight, "max-height", Length];
        generateTypedStyleProp[borderWidth, "border-width", Length4];
        generateTypedStyleProp[borderRadius, "border-radius", Length4];
        generateTypedStyleProp[borderColor, "border-color", Color];
        generateStringStyleProp[borderStyle, "border-style"];
        generateTypedStyleProp[outlineWidth, "outline-width", Length4];
        generateTypedStyleProp[outlineOffset, "outline-offset", Length4];
        generateTypedStyleProp[outlineColor, "outline-color", Color];
        generateStringStyleProp[outlineStyle, "outline-style"];
        generateStringStyleProp[floating, "float"];
        generateStringStyleProp[position, "position"];
        generateStringStyleProp[zIndex, "z-index"];
        generateStringStyleProp[flex, "flex"];
        generateStringStyleProp[layout, "flex-direction"];
        generateStringStyleProp[justify, "justify-content"];
        generateTypedStyleProp[margin, "margin", Length4];
        generateTypedStyleProp[padding, "padding", Length4];
        generateStringStyleProp[align, "align-items"];
        generateStringStyleProp[textAlign, "text-align"];
        generateStringStyleProp[textDecoration, "text-decoration"];
        generateStringStyleProp[direction, "direction"];
        generateTypedStyleProp[fontSize, "font-size", Length];
        generateTypedStyleProp[lineHeight, "line-height", Length];
        generateTypedStyleProp[fontColor, "color", Color];
        generateStringStyleProp[fontFamily, "font-family"];
        generateStringStyleProp[fontWeight, "font-weight"];
        generateFloatStyleProp[opacity, "opacity"];
        generateStringStyleProp[transform, "transform"];
        generateStringStyleProp[translate, "translate"];
        generateStringStyleProp[overflow, "overflow"];
        generateStringStyleProp[boxShadow, "box-shadow"];
        generateStringStyleProp[display, "display"];
        generateStringStyleProp[cursor, "cursor"];
        generateTypedStyleProp[top, "top", Length];
        generateTypedStyleProp[left, "left", Length];
        generateTypedStyleProp[right, "right", Length];
        generateTypedStyleProp[bottom, "bottom", Length];
        generateTypedStyleProp[background, "background", Color];
        generateStringStyleProp[wordBreak, "word-break"];

        def vanimation: SrdRef[Animation];
        handler this.animation = (val: SrdRef[Animation]) {
            if !this.vanimation.isNull() and this.inUse this.vanimation.unbuild();
            this.vanimation = val;
            if !this.vanimation.isNull() and this.inUse this.vanimation.build();
            this.onPropUpdated();
            return this.vanimation;
        }
        handler this.animation: SrdRef[Animation] {
            return this.vanimation;
        }

        // Initializers and Operators

        handler this~init() {}

        handler this~init(ref[Style]) {
            this = value;
        }

        handler this = ref[Style] {
            this.props = value.props;
            this.animation = value.animation;
        }

        // Functions

        handler this.onPropUpdated() {
            if !this.onUpdated.isNull() this.onUpdated();
        }

        handler this.getCssString(): String {
            def styleRep: String;
            def i: Int;
            for i = 0, i < this.props.getLength(), ++i {
                styleRep += this.props.keyAt(i) + ":" + this.props.valAt(i) + ";";
            }
            if this.transitions.getLength() > 0 {
                styleRep += "transition:";
                for i = 0, i < this.transitions.getLength(), ++i {
                    if i != 0 styleRep += ",";
                    styleRep += this.transitions.keyAt(i) + " " + this.transitions.valAt(i);
                }
                styleRep += ";";
            }
            if !this.vanimation.isNull() {
                styleRep += String.format("animation-name:%s;", this.vanimation.name.buf);
                styleRep += String.format("animation-duration:%fs;", this.vanimation.totalDuration);
            }
            return styleRep;
        }
    }

    //==========================================================================
    // Helper Macros

    macro generateStringStyleProp [propName, styleName] {
        handler this.propName = (val: CharsPtr) {
            this.props(String(styleName)) = String(val);
            this.onPropUpdated();
            return val;
        }
        handler this.propName = (val: ref[String]) {
            this.props(String(styleName)) = val;
            this.onPropUpdated();
            return val;
        }
        handler this.__propName__Transition = (val: ref[Transition]) {
            this.transitions(String(styleName)) = val.toString();
            this.onPropUpdated();
            return val;
        }
        handler this.propName: ref[String] {
            return this.props(String(styleName));
        }
    }

    macro generateTypedStyleProp [propName, styleName, Tp] {
        handler this.propName = (val: temp_ref[Tp]) {
            this.props(String(styleName)) = val.toString();
            this.onPropUpdated();
            return val;
        }
        generateStringStyleProp[propName, styleName];
    }

    macro generateFloatStyleProp [propName, styleName] {
        handler this.propName = (val: Float) {
            this.props(String(styleName)) = String() + val;
            this.onPropUpdated();
            return val;
        }
        generateStringStyleProp[propName, styleName];
    }
}
