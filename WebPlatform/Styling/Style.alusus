@merge module WebPlatform {
    //==========================================================================
    // Styles
    // Holds styling properties for widgets.
    class Style {
        // Variables

        def props: Map[String, String];
        def transitions: Map[String, String];
        def inUse: Bool = false;
        def onUpdated: closure();

        // Properties

        generateTypedStyleProp[width, "width", Length];
        generateTypedStyleProp[height, "height", Length];
        generateTypedStyleProp[minWidth, "min-width", Length];
        generateTypedStyleProp[minHeight, "min-height", Length];
        generateTypedStyleProp[maxWidth, "max-width", Length];
        generateTypedStyleProp[maxHeight, "max-height", Length];
        generateTypedStyleProp[borderWidth, "border-width", Length4];
        generateTypedStyleProp[borderRadius, "border-radius", Length4];
        generateTypedStyleProp[borderColor, "border-color", Color];
        generateTypedStyleProp[borderStyle, "border-style", BorderStyle];
        generateTypedStyleProp[outlineWidth, "outline-width", Length4];
        generateTypedStyleProp[outlineOffset, "outline-offset", Length4];
        generateTypedStyleProp[outlineColor, "outline-color", Color];
        generateTypedStyleProp[outlineStyle, "outline-style", BorderStyle];
        generateTypedStyleProp[floating, "float", Floating];
        generateTypedStyleProp[position, "position", Position];
        generateIntStyleProp[zIndex, "z-index"];
        generateTypedStyleProp[flex, "flex", Flex];
        generateTypedStyleProp[layout, "flex-direction", Layout];
        generateTypedStyleProp[justify, "justify-content", Justify];
        generateTypedStyleProp[margin, "margin", Length4];
        generateTypedStyleProp[padding, "padding", Length4];
        generateTypedStyleProp[align, "align-items", Align];
        generateTypedStyleProp[textAlign, "text-align", TextAlign];
        generateTypedStyleProp[textDecoration, "text-decoration", TextDecoration];
        generateTypedStyleProp[textDecorationColor, "text-decoration-color", Color];
        generateTypedStyleProp[textDecorationStyle, "text-decoration-style", TextDecorationStyle];
        generateTypedStyleProp[textDecorationThickness, "text-decoration-thickness", Length];
        generateTypedStyleProp[direction, "direction", Direction];
        generateTypedStyleProp[fontSize, "font-size", Length];
        generateTypedStyleProp[lineHeight, "line-height", Length];
        generateTypedStyleProp[fontColor, "color", Color];
        generateStringStyleProp[fontFamily, "font-family"];
        generateIntStyleProp[fontWeight, "font-weight"];
        generateFloatStyleProp[opacity, "opacity"];
        generateStringStyleProp[transform, "transform"];
        generateTypedStyleProp[overflowX, "overflow-x", Overflow];
        generateTypedStyleProp[overflowY, "overflow-y", Overflow];
        generateTypedStyleProp[boxShadow, "box-shadow", Shadow];
        generateTypedStyleProp[display, "display", Display];
        generateTypedStyleProp[cursor, "cursor", Cursor];
        generateTypedStyleProp[top, "top", Length];
        generateTypedStyleProp[left, "left", Length];
        generateTypedStyleProp[right, "right", Length];
        generateTypedStyleProp[bottom, "bottom", Length];
        generateTypedStyleProp[background, "background", Background];
        generateTypedStyleProp[wordBreak, "word-break", WordBreak];

        def vanimation: SrdRef[Animation];
        handler this.animation = (val: SrdRef[Animation]) {
            if !this.vanimation.isNull() and this.inUse this.vanimation.unbuild();
            this.vanimation = val;
            if !this.vanimation.isNull() and this.inUse this.vanimation.build();
            this.onPropUpdated();
            return this.vanimation;
        }
        handler this.animation: SrdRef[Animation] {
            return this.vanimation;
        }

        // Initializers and Operators

        handler this~init() {}

        handler this~init(ref[Style]) {
            this = value;
        }

        handler this = ref[Style] {
            this.props = value.props;
            this.animation = value.animation;
        }

        // Functions

        handler this.onPropUpdated() {
            if !this.onUpdated.isNull() this.onUpdated();
        }

        handler this.getCssString(): String {
            def styleRep: String;
            def i: Int;
            for i = 0, i < this.props.getLength(), ++i {
                styleRep += this.props.keyAt(i) + ":" + this.props.valAt(i) + ";";
            }
            if this.transitions.getLength() > 0 {
                styleRep += "transition:";
                for i = 0, i < this.transitions.getLength(), ++i {
                    if i != 0 styleRep += ",";
                    styleRep += this.transitions.keyAt(i) + " " + this.transitions.valAt(i);
                }
                styleRep += ";";
            }
            if !this.vanimation.isNull() {
                styleRep += String.format("animation-name:%s;", this.vanimation.name.buf);
                styleRep += String.format("animation-duration:%fs;", this.vanimation.totalDuration);
            }
            return styleRep;
        }

        handler [styleProp: ast] this.setRawStyle(val: String) {
            def styleName: String = preprocess {
                use Core.Basic;
                use Core.Data.Ast;
                def elements: Array[ref[Core.Basic.TiObject]] = Spp.astMgr.findElements(
                    styleProp~ast,
                    this_type~ast,
                    Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
                );
                if elements.getLength() == 0 {
                    Spp.buildMgr.raiseBuildNotice("SPPA1007", 1, styleProp~ast);
                    return;
                }
                def i: Int;
                for i = 0, i < elements.getLength(), ++i {
                    def mod: ref[TiObject](Spp.astMgr.findModifierForElement(elements(i), "style"));
                    if mod~ptr == 0 continue;
                    def params: Array[String];
                    Spp.astMgr.getModifierStringParams(mod, params);
                    if params.getLength() == 0 continue;
                    Spp.astMgr.insertAst(
                        (ast strLiteral),
                        Srl.Map[String, ref[TiObject]]().set(String("strLiteral"), StringLiteral(params(0)))
                    );
                    break;
                }
                if i == elements.getLength() {
                    Spp.buildMgr.raiseBuildNotice("SPPA1002", 1, styleProp~ast);
                }
            };
            this.props(styleName) = val;
            this.onPropUpdated();
        }

        handler this.setRawStyle(styleName: String, styleVal: String) {
            this.props(styleName) = styleVal;
            this.onPropUpdated();
        }
    }

    //==========================================================================
    // Helper Macros

    macro generateStyleProp [propName, styleName] {
        handler this.__propName__Transition = (val: ref[Transition]) {
            this.transitions(String(styleName)) = val.toString();
            this.onPropUpdated();
            return val;
        }
        @style[styleName]
        handler this.propName: ref[String] {
            return this.props(String(styleName));
        }
    }

    macro generateStringStyleProp [propName, styleName] {
        handler this.propName = (val: CharsPtr) {
            this.props(String(styleName)) = String(val);
            this.onPropUpdated();
            return val;
        }
        handler this.propName = (val: ref[String]) {
            this.props(String(styleName)) = val;
            this.onPropUpdated();
            return val;
        }
        generateStyleProp[propName, styleName];
    }

    macro generateTypedStyleProp [propName, styleName, Tp] {
        handler this.propName = (val: temp_ref[Tp]) {
            this.props(String(styleName)) = val.toString();
            this.onPropUpdated();
            return val;
        }
        generateStyleProp[propName, styleName];
    }

    macro generateFloatStyleProp [propName, styleName] {
        handler this.propName = (val: Float) {
            this.props(String(styleName)) = String() + val;
            this.onPropUpdated();
            return val;
        }
        generateStyleProp[propName, styleName];
    }

    macro generateIntStyleProp [propName, styleName] {
        handler this.propName = (val: Int) {
            this.props(String(styleName)) = String() + val;
            this.onPropUpdated();
            return val;
        }
        generateStyleProp[propName, styleName];
    }
}
