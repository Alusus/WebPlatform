@merge module WebPlatform {
    //==========================================================================
    // StyleSet
    // Manages a set of styles for an element in different states.
    class StyleSet {
        @injection def mainStyle: Style;
        def otherStyles: Map[String, Style];
        def id: String = getNewId();
        def selector: String = String(".") + id;
        def buildCounter: Int = 0;
        def onInlineStyle: closure (css: String);

        handler this~init() {
            this.mainStyle.onUpdated = closure() {
                if this.buildCounter == 0 return;
                if this.isInlined() {
                    this.onInlineStyle(this.mainStyle.getCssString());
                } else {
                    setStyleRule(this.id, this.selector, this.mainStyle.getCssString());
                }
            };
        }

        handler this.enableInline(c: closure (css: String)) {
            this.onInlineStyle = c;
        }

        handler this.isInlined(): Bool {
            return not this.onInlineStyle.isNull() and this.otherStyles.getLength() == 0;
        }

        handler this(state: CharsPtr): ref[Style] {
            return this({ state });
        }

        handler this(count: Int, selectors: ...[CharsPtr, 1]): ref[Style] {
            def fullSelector: String;
            while count-- > 0 {
                def selector: CharsPtr = selectors~next_arg[CharsPtr];
                if String.compare(selector, ">>$", 3) == 0 {
                    fullSelector += " ";
                    selector = selector + 3;
                } else if String.compare(selector, ">>", 2) == 0 {
                    fullSelector += " .";
                    selector = selector + 2;
                } else if String.compare(selector, ">$", 2) == 0 {
                    fullSelector += " > ";
                    selector = selector + 2;
                } else if String.compare(selector, ">", 1) == 0 {
                    fullSelector += " > .";
                    selector = selector + 1;
                } else if String.compare(selector, ":", 1) == 0 {
                } else {
                    fullSelector += ".";
                }
                fullSelector += selector;
            }

            // If we are currently in inline mode we need to switch back to css class mode otherwise
            // styles won't be correct since inline styles take precedence over css classes.
            if this.buildCounter > 0 and this.isInlined() {
                createElement("style", this.id, "head");
                this.onInlineStyle(String());
                this.buildStyle(this.mainStyle, this.id, this.selector);
            }

            return this.otherStyles(fullSelector)~use_in(style) {
                def completeSelector: String = this.selector + fullSelector;
                onUpdated = closure() {
                    if this.buildCounter == 0 return;
                    setStyleRule(this.id, completeSelector, style.getCssString());
                };
                if this.buildCounter > 0 this.buildStyle(style, this.id, completeSelector);
            };
        }

        handler this.build() {
            if this.buildCounter++ > 0 return;

            if this.isInlined() {
                this.mainStyle.inUse = true;
                this.onInlineStyle(this.mainStyle.getCssString());
                return;
            }

            createElement("style", this.id, "head");
            this.buildStyle(this.mainStyle, this.id, this.selector);
            def i: Int;
            for i = 0, i < this.otherStyles.getLength(), i++ {
                this.buildStyle(this.otherStyles.valAt(i), this.id, this.selector + this.otherStyles.keyAt(i));
            }
        }

        handler this.unbuild() {
            if this.buildCounter == 0 return;
            if --this.buildCounter > 0 return;

            this.mainStyle.inUse = false;

            def i: Int;
            for i = 0, i < this.otherStyles.getLength(), i++ {
                this.otherStyles.valAt(i).inUse = false;
            }

            if not this.isInlined() deleteElement(this.id);
        }

        handler this.buildStyle(style: ref[Style], id: String, selector: String) {
            if !style.vanimation.isNull() style.vanimation.build();
            setStyleRule(id, selector, style.getCssString());
            style.inUse = true;
        }

        handler this_type(): SrdRef[StyleSet] {
            return SrdRef[StyleSet].construct();
        }
    }

    //==========================================================================
    // StateSelector
    // Selectors for different states of a widget.
    def StateSelector: {
        def ACTIVE: ":active";
        def CHECKED: ":checked";
        def DEFAULT: ":default";
        def DISABLED: ":disabled";
        def EMPTY: ":empty";
        def ENABLED: ":enabled";
        def FOCUS: ":focus";
        def FULLSCREEN: ":fullscreen";
        def HOVER: ":hover";
        def IN_RANGE: ":in-range";
        def INTERMEDIATE: ":indeterminate";
        def INVALID: ":invalid";
        def LINK: ":link";
        def OPTIONAL: ":optional";
        def OUT_OF_RANGE: ":out-of-range";
        def READ_ONLY: ":read-only";
        def READ_WRITE: ":read-write";
        def REQUIRED: ":required";
        def TARGET: ":target";
        def VALID: ":valid";
        def VISITED: ":visited";
    }
}

