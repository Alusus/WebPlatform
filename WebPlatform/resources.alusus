@merge module WebPlatform {
    //==========================================================================
    // ImageResource
    // An image resource that can be used with canvas image operations.
    class ImageResource {
        def id: ArchInt = 0;
        def url: String;

        handler this~terminate() {
            if this.id != 0 releaseResource(this.id);
        }

        handler this.load(u: ptr[array[Char]]): SrdRef[Promise[Int]] {
            def p: SrdRef[Promise[Int]] = Promise[Int].new();
            this.url = u;
            loadImage(u, closure (json: Json) {
                def data: Json = json.getObject("eventData");
                if this.id != 0 releaseResource(this.id);
                this.id = data.getInt("resourceId");
                p.resolve(0);
            });
            return p;
        }

        handler this.initFromCanvas(canvas: ref[CanvasResource]) {
            if this.id != 0 releaseResource(this.id);
            this.id = createImageResourceFromCanvasResource(canvas.id);
        }
    }

    //==========================================================================
    // CanvasResource
    // A detached canvas that can be used to generate images dynamically.
    class CanvasResource {
        @injection def drawing: Drawing;
        def id: ArchInt = 0;

        handler this~init() {}
        handler this~init(w: Int, h: Int) {
            this.init(w, h);
        }
        handler this.init(w: Int, h: Int) {
            if this.id != 0 releaseResource(this.id);
            this.id = createCanvasResource(w, h);
        }

        handler this~terminate() {
            if this.id != 0 releaseResource(this.id);
        }

        handler (this: Drawing).getResourceId(): ArchInt set_ptr {
            return this.id;
        }
    }
}

