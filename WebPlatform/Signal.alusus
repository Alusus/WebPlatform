@merge module WebPlatform {
    //==========================================================================
    // Signal
    // A signal that can be subscribed to for handling events. It can have
    // multiple subscriptions.
    class Signal [ownerType: type, payloadType: type] {
        def owner: ref[ownerType];
        def slots: Array[closure (ref[ownerType], payload: ref[payloadType])];

        handler this.emit(payload: ref[payloadType]) {
            def i: Int;
            for i = 0, i < this.slots.getLength(), ++i {
                this.slots(i)(this.owner, payload);
            }
        }

        handler this.connect(slot: closure (ref[ownerType], payload: ref[payloadType])) {
            def i: Int;
            for i = 0, i < this.slots.getLength(), ++i {
                if this.slots(i) == slot return;
            }
            this.slots.add(slot);
            this.owner.onSignalConnectionsChanged(this~ptr, this.slots.getLength());
        }

        handler this.disconnect(slot: closure (ref[ownerType], payload: ref[payloadType])) {
            def i: Int;
            for i = 0, i < this.slots.getLength(), ++i {
                if this.slots(i) == slot {
                    this.slots.remove(i);
                    this.owner.onSignalConnectionsChanged(this~ptr, this.slots.getLength());
                    return;
                }
            }
        }
        
        handler this.getConnectionCount (): Int {
            return this.slots.getLength();
        }
    }

    //==========================================================================
    // handleSignalConnectionChanged
    // A helper macro for handling an event in onSignalConnectionsChanged.
    macro handleSignalConnectionChanged [signalName, eventHtmlIentifier, emitSignal] {
        if connectionCount > 0 and this.__signalName__Id == -1 {
            this.__signalName__Id = registerElementEventHandler(
                this.id,
                eventHtmlIentifier,
                closure (json: Json) {
                    def data: Json = json.getObject("eventData");
                    emitSignal;
                }
            );
        } else if connectionCount == 0 and this.__signalName__Id != -1 {
            unregisterElementEventHandler(this.__signalName__Id);
        }
    }


    //==========================================================================
    // handleKeySignalConnectionChanged
    // A helper macro for handling a key event in onSignalConnectionsChanged.
    macro handleKeySignalConnectionChanged [signalName, eventHtmlIentifier, keysToSwallow, emitSignal] {
        if connectionCount > 0 and this.__signalName__Id == -1 {
            this.__signalName__Id = registerElementKeyEventHandler(
                this.id,
                eventHtmlIentifier,
                keysToSwallow,
                closure (json: Json) {
                    def data: Json = json.getObject("eventData");
                    emitSignal;
                }
            );
        } else if connectionCount == 0 and this.__signalName__Id != -1 {
            unregisterElementEventHandler(this.__signalName__Id);
        }
    }
}

