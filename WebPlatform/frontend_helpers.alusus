@merge module WebPlatform {
    //==========================================================================
    // Functions and Macros

    function getNewId (): String {
        @shared def counter: Int(0);
        return String("id") + (++counter);
    }

    macro generateProperty [propName, upperCasePropName, propType] {
        def v__propName__: propType;
        handler this.set__upperCasePropName__ (val: temp_ref[propType]) {
            this.v__propName__ = val;
            this.onPropUpdated();
        }
        handler this.get__upperCasePropName__ (): ref[propType] {
            return this.v__propName__;
        }
        handler this.propName = (val: temp_ref[propType]) {
            this.v__propName__ = val;
            this.onPropUpdated();
            return this.v__propName__;
        }
        handler this.propName: ref[propType] {
            return this.v__propName__;
        }
    }

    //==========================================================================
    // MouseMovePayload
    // The payload of the mouse-move event.
    class MouseMovePayload {
        def posX: Float = 0;
        def posY: Float = 0;
        def deltaX: Float = 0;
        def deltaY: Float = 0;

        handler this~init() {}
        handler this~init(x: Float, y: Float, dx: Float, dy: Float) {
            this.posX = x;
            this.posY = y;
            this.deltaX = dx;
            this.deltaY = dy;
        }
        handler this~init(temp_ref[MouseMovePayload]) {
            this = value;
        }
        handler this = temp_ref[MouseMovePayload] {
            this.posX = value.posX;
            this.posY = value.posY;
            this.deltaX = value.deltaX;
            this.deltaY = value.deltaY;
        }
    }

    //==========================================================================
    // MouseButtonPayload
    // The payload of the mouse-down and mouse-up events.
    class MouseButtonPayload {
        def button: Int = 0;
        def posX: Float = 0;
        def posY: Float = 0;

        handler this~init() {}
        handler this~init(b: Int, x: Float, y: Float) {
            this.button = b;
            this.posX = x;
            this.posY = y;
        }
        handler this~init(temp_ref[MouseButtonPayload]) {
            this = value;
        }
        handler this = temp_ref[MouseButtonPayload] {
            this.button = value.button;
            this.posX = value.posX;
            this.posY = value.posY;
        }
    }
}
