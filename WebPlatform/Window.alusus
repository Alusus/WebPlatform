@merge module WebPlatform {
    class Window {
        @shared def instance: Window(0~cast[ptr]);
        def _style: SrdRef[StyleSet];
        def id: ptr[array[Char]] = "window";
        def view: SrdRef[Widget];
        def keysToSwallow: String;
        def sessionStorage: Storage(0);
        def localStorage: Storage(1);

        handler this~init(dummy: ptr) {
            this.onKeyDown.owner~no_deref = this;
            this.onKeyUp.owner~no_deref = this;
            this.onPointerLockChange.owner~no_deref = this;
            this.onFullScreenChange.owner~no_deref = this;
            this.onGamepadConnected.owner~no_deref = this;
            this.onGamepadDisconnected.owner~no_deref = this;
            this.onLocationChanged.owner~no_deref = this;
            this.onMessage.owner~no_deref = this;
        }

        //-------
        // Events

        def onKeyDown: DomEventSignal[Window, String];
        def onKeyDownId: ArchInt = -1;
        def onKeyUp: DomEventSignal[Window, String];
        def onKeyUpId: ArchInt = -1;
        def onPointerLockChange: DomEventSignal[Window, Bool];
        def onPointerLockChangeId: ArchInt = -1;
        def onFullScreenChange: DomEventSignal[Window, Bool];
        def onFullScreenChangeId: ArchInt = -1;
        def onGamepadConnected: DomEventSignal[Window, String];
        def onGamepadConnectedId: ArchInt = -1;
        def onGamepadDisconnected: DomEventSignal[Window, String];
        def onGamepadDisconnectedId: ArchInt = -1;
        def onLocationChanged: DomEventSignal[Window, Int];
        def onLocationChangedId: ArchInt = -1;
        def onMessage: DomEventSignal[Window, Json];
        def onMessageId: ArchInt = -1;

        handler this.onSignalConnectionsChanged(signal: ptr[Signal[Window, String]], connectionCount: Int) {
            if signal == this.onKeyDown~ptr {
                handleKeySignalConnectionChanged[onKeyDown, "keydown", this.keysToSwallow, {
                    this.onKeyDown.emit(data.getString("code"));
                }];
            } else if signal == this.onKeyUp~ptr {
                handleKeySignalConnectionChanged[onKeyUp, "keyup", this.keysToSwallow, {
                    this.onKeyUp.emit(data.getString("code"));
                }];
            } else if signal == this.onGamepadConnected~ptr {
                handleSignalConnectionChanged[onGamepadConnected, "gamepadconnected", {
                    this.onGamepadConnected.emit(data.getObject("gamepad").getString("id"));
                }];
            } else if signal == this.onGamepadDisconnected~ptr {
                handleSignalConnectionChanged[onGamepadDisconnected, "gamepaddisconnected", {
                    this.onGamepadDisconnected.emit(data.getObject("gamepad").getString("id"));
                }];
            }
        }

        handler this.onSignalConnectionsChanged(signal: ptr[Signal[Window, Bool]], connectionCount: Int) {
            if signal == this.onPointerLockChange~ptr {
                handleSignalConnectionChanged[onPointerLockChange, "pointerlockchange", {
                    this.onPointerLockChange.emit(Bool().{ this = data.getBool("enabled") });
                }];
            } else if signal == this.onFullScreenChange~ptr {
                handleSignalConnectionChanged[onFullScreenChange, "fullscreenchange", {
                    this.onFullScreenChange.emit(Bool().{ this = data.getBool("enabled") });
                }];
            }
        }

        handler this.onSignalConnectionsChanged(signal: ptr[Signal[Window, Int]], connectionCount: Int) {
            if signal == this.onLocationChanged~ptr {
                handleSignalConnectionChanged[onLocationChanged, "popstate", {
                    this.onLocationChanged.emit(Int(0));
                }];
            }
        }

        handler this.onSignalConnectionsChanged(signal: ptr[Signal[Window, Json]], connectionCount: Int) {
            if signal == this.onMessage~ptr {
                handleSignalConnectionChanged[onMessage, "message", {
                    this.onMessage.emit(data.getObject("data"));
                }];
            }
        }

        //---------
        // Handlers

        handler this.style: SrdRef[StyleSet] {
            if this._style.isNull() {
                this._style = StyleSet();
                this._style.selector = "body";
                this._style.enableInline(closure(css: String) {
                    setElementAttribute("body", "style", css);
                });
                this._style.build();
            }
            return this._style;
        }

        handler this.setView(v: SrdRef[Widget]) {
            this.unsetView();
            this.view = v;
            this.view.build(String("body"));
        }

        handler this.unsetView() {
            if this.view.obj~ptr != 0 this.view.unbuild();
            this.view.release();
        }

        handler this.location: String {
            return String(getLocationPath()~cast[CharsPtr]);
        }

        handler this.hash: String {
            return String(getLocationHash()~cast[CharsPtr]);
        }

        handler this.query: String {
            return String(getLocationSearch()~cast[CharsPtr]);
        }

        handler this.pushLocation (url: ptr[array[Char]]) {
            WebPlatform.pushState(url, "{}");
            this.onLocationChanged.emit(Int(0));
        }

        handler this.resize(width: Int, height: Int) {
            resizeWindow(width, height);
        }
    }
}

