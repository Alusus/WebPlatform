@merge module WebPlatform {
    class Window {
        @shared def _instance: ref[Window];
        @operation[""] func instance (): ref[Window] {
            if _instance~ptr == 0 {
                _instance~ptr = Memory.alloc(Window~size)~cast[ptr[Window]];
                _instance~init(0~cast[ptr]);
            }
            return _instance;
        }

        def _style: SrdRef[StyleSet];
        def id: ptr[array[Char]] = "window";
        def view: SrdRef[Widget];
        def keysToSwallow: String;
        def sessionStorage: Storage(0);
        def localStorage: Storage(1);

        handler this~init(dummy: ptr) {
            this.onKeyDown.onConnectionsChanged = closure (connectionCount: Int) {
                handleSignalConnectionChanged["window", onKeyDown, "keydown", this.keysToSwallow, {
                    this.onKeyDown.emit(this, data("code"));
                }];
            };

            this.onKeyUp.onConnectionsChanged = closure (connectionCount: Int) {
                handleSignalConnectionChanged["window", onKeyUp, "keyup", this.keysToSwallow, {
                    this.onKeyUp.emit(this, data("code"));
                }];
            };

            this.onPointerLockChange.onConnectionsChanged = closure (connectionCount: Int) {
                handleSignalConnectionChanged["window", onPointerLockChange, "pointerlockchange", {
                    this.onPointerLockChange.emit(this, Bool().{ this = data("enabled") });
                }];
            };

            this.onFullScreenChange.onConnectionsChanged = closure (connectionCount: Int) {
                handleSignalConnectionChanged["window", onFullScreenChange, "fullscreenchange", {
                    this.onFullScreenChange.emit(this, Bool().{ this = data("enabled") });
                }];
            };

            this.onGamepadConnected.onConnectionsChanged = closure (connectionCount: Int) {
                handleSignalConnectionChanged["window", onGamepadConnected, "gamepadconnected", {
                    this.onGamepadConnected.emit(this, data("gamepad")("id"));
                }];
            };

            this.onGamepadDisconnected.onConnectionsChanged = closure (connectionCount: Int) {
                handleSignalConnectionChanged["window", onGamepadDisconnected, "gamepaddisconnected", {
                    this.onGamepadDisconnected.emit(this, data("gamepad")("id"));
                }];
            };

            this.onLocationChanged.onConnectionsChanged = closure (connectionCount: Int) {
                handleSignalConnectionChanged["window", onLocationChanged, "popstate", {
                    this.onLocationChanged.emit(this, Int(0));
                }];
            };

            this.onVisibilityChanged.onConnectionsChanged = closure (connectionCount: Int) {
                handleSignalConnectionChanged["document", onVisibilityChanged, "visibilitychange", {
                    this.onVisibilityChanged.emit(this, Int(0));
                }];
            };

            this.onMessage.onConnectionsChanged = closure (connectionCount: Int) {
                handleSignalConnectionChanged["window", onMessage, "message", {
                    this.onMessage.emit(this, data("data"));
                }];
            };
        }

        //-------
        // Events

        def onKeyDown: DomEventSignal[Window, String];
        def onKeyDownId: ArchInt = -1;
        def onKeyUp: DomEventSignal[Window, String];
        def onKeyUpId: ArchInt = -1;
        def onPointerLockChange: DomEventSignal[Window, Bool];
        def onPointerLockChangeId: ArchInt = -1;
        def onFullScreenChange: DomEventSignal[Window, Bool];
        def onFullScreenChangeId: ArchInt = -1;
        def onGamepadConnected: DomEventSignal[Window, String];
        def onGamepadConnectedId: ArchInt = -1;
        def onGamepadDisconnected: DomEventSignal[Window, String];
        def onGamepadDisconnectedId: ArchInt = -1;
        def onLocationChanged: DomEventSignal[Window, Int];
        def onLocationChangedId: ArchInt = -1;
        def onVisibilityChanged: DomEventSignal[Window, Int];
        def onVisibilityChangedId: ArchInt = -1;
        def onMessage: DomEventSignal[Window, Json];
        def onMessageId: ArchInt = -1;

        //---------
        // Handlers

        handler this.style: SrdRef[StyleSet] {
            if this._style.isNull() {
                this._style = StyleSet();
                this._style.selector = "body";
                this._style.enableInline(closure(css: String) {
                    setElementAttribute("body", "style", css);
                });
                this._style.build();
            }
            return this._style;
        }

        handler this.setView(v: SrdRef[Widget]) {
            this.unsetView();
            this.view = v;
            this.view.build(String("body"), String());
        }

        handler this.unsetView() {
            if this.view.obj~ptr != 0 this.view.unbuild();
            this.view.release();
        }

        handler this.location: String {
            return String(getLocationHref()~cast[CharsPtr]);
        }

        handler this.locationProtocol: String {
            return String(getLocationProtocol()~cast[CharsPtr]);
        }

        handler this.locationHost: String {
            return String(getLocationHost()~cast[CharsPtr]);
        }

        handler this.locationPath: String {
            return String(getLocationPath()~cast[CharsPtr]);
        }

        handler this.locationQuery: String {
            return String(getLocationSearch()~cast[CharsPtr]);
        }

        handler this.locationHash: String {
            return String(getLocationHash()~cast[CharsPtr]);
        }

        handler this.getQueryParam (paramName: CharsPtr): String {
            def val: CharsPtr = WebPlatform.getQueryParam(paramName)~cast[CharsPtr];
            if val == 0 return String() else return String(val);
        }

        handler this.pushLocation (url: ptr[array[Char]]) {
            WebPlatform.pushState(url, "{}");
            this.onLocationChanged.emit(this, Int(0));
        }

        handler this.visible: Bool {
            return String.isEqual(getVisibilityState(), "visible");
        }

        handler this.resize(width: Int, height: Int) {
            resizeWindow(width, height);
        }

        handler this.postMessage(msgType: CharsPtr, msgBody: CharsPtr) {
            WebPlatform.postMessage("window", msgType, msgBody);
        }

        handler this.postMessageToParent(msgType: CharsPtr, msgBody: CharsPtr) {
            WebPlatform.postMessage("parent", msgType, msgBody);
        }
    }
}
