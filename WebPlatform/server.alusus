@merge module WebPlatform {
    // Types

    class StaticRoute {
        def uri: String;
        def srcPath: String;
        def buildPath: String;
        handler this~init() {}
        handler this~init(uri: String, path: String) this.set(uri, path, path);
        handler this~init(uri: String, srcPath: String, buildPath: String) this.set(uri, srcPath, buildPath);
        handler this~init(ref[StaticRoute]) this.set(value.uri, value.srcPath, value.buildPath);
        handler this=ref[StaticRoute] this.set(value.uri, value.srcPath, value.buildPath);
        handler this.set (uri: String, srcPath: String, buildPath: String) {
            this.uri = uri;
            this.srcPath = srcPath;
            this.buildPath = buildPath;
        }
    }

    class CallbackContext {
        def mainAssetsPath: String;
        def assetRoutes: Array[StaticRoute];
        def uiEndpoints: Array[StaticRoute];
        def uiEndpointsPath: String;
        def useSrcAssetsPath: Bool;
    }

    class ServerSession {
        def callbackContext: SrdRef[CallbackContext];
        def httpContext: ptr[Http.Context];
    }

    def AstTemplateMap: alias Map[String, ref[Core.Basic.TiObject]];

    // Build Functions

    func generateUiEndpointsFiles (parent: ref[Core.Basic.TiObject], uiEndpointsPath: String) {
        def elements: Array[ref[Core.Basic.TiObject]] = Spp.astMgr.findElements(
            ast { modifier == "uiEndpoint" || modifier == "منفذ_مرئي" },
            parent,
            Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
        );
        def i: Int;
        for i = 0, i < elements.getLength(), ++i {
            def uriParams: Array[String] = getModifierParams(elements(i), "uiEndpoint", "منفذ_مرئي");
            if uriParams.getLength() < 1 {
                System.fail(1, "Invalid @uiEndpoint params");
            }

            def titleParams: Array[String] = getModifierParams(elements(i), "title", "عنوان");
            def title: String;
            if titleParams.getLength() >= 1 title = titleParams(0) else title = "Alusus WebPlatform";

            def iconParams: Array[String] = getModifierParams(elements(i), "icon", "أيقونة");
            def icon: String;
            if iconParams.getLength() >= 1 icon = iconParams(0);

            def appParams: Array[String] = getModifierParams(elements(i), "webApp", "تطبيق_ويب");
            def appManifest: String;
            if appParams.getLength() > 0 appManifest = appParams(0);
            def appVersion: String;
            if appParams.getLength() > 1 appVersion = appParams(1) else appVersion = "v1";

            def preCacheFilenames: Array[String] = getModifierParams(elements(i), "preCache", "خزن_مسبق");
            def dynCacheFilenames: Array[String] = getModifierParams(elements(i), "dynCache", "خزن_تفاعلي");

            generateUiEndpointFiles(
                elements(i), uriParams(0), title, icon, appManifest, appVersion, preCacheFilenames, dynCacheFilenames,
                uiEndpointsPath
            );
        }
    }

    func generateUiEndpointFiles (
        fn: ref[Core.Basic.TiObject], uri: String, title: String, iconFilename: String, manifestFilename: String,
        version: String, preCacheFilenames: Array[String], dynCacheFilenames: Array[String], uiEndpointsPath: String
    ) {
        def fnName: String = generateWasm(fn, uiEndpointsPath);
        if iconFilename != "" {
            def icon: String;
            iconFilename.split("/").{ icon = this(this.getLength() - 1) };
            System.exec(String.format("cp %s \"%s%s\"", iconFilename.buf, uiEndpointsPath.buf, icon.buf));
            iconFilename = icon;
        }
        if manifestFilename != "" {
            System.exec(String.format(
                "cp %s \"%s%s-manifest.json\"",
                manifestFilename.buf,
                uiEndpointsPath.buf,
                fnName.buf
            ));
            preCacheFilenames.add({
                uri,
                String("/api.js"),
                String.format("/%s.wasm", fnName.buf),
                String.format("/%s-manifest.json", fnName.buf),
            });
            if iconFilename != "" preCacheFilenames.add(String.format("/") + iconFilename);
            generateServiceWorker(fnName, preCacheFilenames, dynCacheFilenames, version, uiEndpointsPath);
        }
        generateHtml(fnName, title, iconFilename, manifestFilename != "", uiEndpointsPath);
    }

    func generateWasm(fn: ref[Core.Basic.TiObject], uiEndpointsPath: String): String {
        def binding: ref[Core.Basic.Binding](Core.Basic.getInterface[fn, Core.Basic.Binding]);
        binding.setMember("name", Core.Basic.TiStr("wasmStart"));
        def wasm: Build.Wasm(fn, uiEndpointsPath + "_intermediate.wasm");
        wasm.addDependency(webPlatformPath + String("stdlib-min.wasm"));
        wasm.addFlags({ String("--export=malloc"), String("--export=realloc") });
        wasm.generate();
        def fnName: String = Spp.astMgr.getDefinitionName(fn);
        if System.exec(
            webPlatformPath + "Tools/bin/wasm-opt -O --asyncify " + uiEndpointsPath + "_intermediate.wasm -o " +
            uiEndpointsPath + fnName + ".wasm"
        ) != 0 {
            System.fail(1, "Post-build pass failed\n");
        }
        return fnName;
    }

    func generateServiceWorker(
        fnName: String, preCacheFilenames: Array[String], dynCacheFilenames: Array[String], version: String,
        uiEndpointsPath: String
    ) {
        def workerTemplate: String = Fs.readFile(webPlatformPath + "service-worker.js");
        def content: String = String.format(
            workerTemplate,
            createJsStringArray(preCacheFilenames).buf,
            createJsStringArray(dynCacheFilenames).buf,
            (String("\"") + version.replace("\\", "\\\\").replace("\"", "\\\"") + "\"").buf
        );
        Fs.createFile(
            String.format("%s%s-service-worker.js", uiEndpointsPath.buf, fnName.buf),
            content.buf, content.getLength()
        );
    }

    func createJsStringArray(strs: Array[String]): String {
        def result: String = "[";
        def i: Int;
        for i = 0, i < strs.getLength(), ++i {
            if i != 0 result += ",\n";
            result += "\"";
            result += strs(i).replace("\\", "\\\\").replace("\"", "\\\"");
            result += "\"";
        }
        result += "]";
        return result;
    }

    func generateHtml(fnName: String, title: String, icon: String, webApp: Bool, uiEndpointsPath: String) {
        def htmlTemplate: String = Fs.readFile(webPlatformPath + "wasm.html");
        def extraHeaders: String;
        if icon != "" extraHeaders += String.format("<link rel=\"icon\" href=\"/%s\" />", icon.buf);
        def extraScript: String;
        if webApp {
            extraHeaders += String.format("<link rel=\"manifest\" href=\"/%s-manifest.json\" />", fnName.buf);
            extraScript += String.format("initializeWebApp(\"/%s-service-worker.js\", \"/\");", fnName.buf);
        }
        def content: String = String.format(
            htmlTemplate, title.buf, extraHeaders.buf, extraScript.buf, String.format("/%s.wasm", fnName.buf).buf
        );
        Fs.createFile(uiEndpointsPath + fnName + ".html", content.buf, content.getLength());
    }

    func prepareMainAssets (mainAssetsPath: String) {
        if mainAssetsPath == webPlatformPath return;
        System.exec(String.format("mkdir -p \"%s\"", mainAssetsPath.buf));
        System.exec(String.format("cp %s/api.js \"%s/api.js\"", webPlatformPath.buf, mainAssetsPath.buf));
    }

    func buildUiEndpoints(modulesRef: ref[Core.Basic.TiObject], mainAssetsPath: String, uiEndpointsPath: String) {
        prepareMainAssets(mainAssetsPath);
        def modules: Array[ref[Core.Basic.TiObject]] = getAllModules(modulesRef);
        if modules.getLength() == 0 {
            System.fail(1, "Invalid module argument for buildUiEndpoints.");
        }
        def i: Int;
        for i = 0, i < modules.getLength(), ++i generateUiEndpointsFiles(modules(i), uiEndpointsPath);
    }

    // Code Generation

    func generateUiEndpointsInitialization (modulesRef: ref[Core.Basic.TiObject]) {
        def modules: Array[ref[Core.Basic.TiObject]] = getAllModules(modulesRef);
        if modules.getLength() == 0 {
            Spp.buildMgr.raiseBuildNotice("SPPA1002", 1, modulesRef);
        }
        def j: Int;
        for j = 0, j < modules.getLength(), ++j {
            def elements: Array[ref[Core.Basic.TiObject]] = Spp.astMgr.findElements(
                ast { modifier == "uiEndpoint" || modifier == "منفذ_مرئي" },
                modules(j),
                Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
            );
            def i: Int;
            for i = 0, i < elements.getLength(), ++i {
                def uriParams: Array[String] = getModifierParams(elements(i), "uiEndpoint", "منفذ_مرئي");
                if uriParams.getLength() < 1 {
                    System.fail(1, "Invalid @uiEndpoint params");
                }
                def fnName: String = Spp.astMgr.getDefinitionName(elements(i));
                Spp.astMgr.insertAst(
                    (ast callbackContext.uiEndpoints.add(StaticRoute(String(uri), String(path)))),
                    AstTemplateMap()
                        .set(String("uri"), Core.Data.Ast.StringLiteral(uriParams(0)))
                        .set(String("path"), Core.Data.Ast.StringLiteral(fnName + ".html"))
                );
            }
        }
    }

    func generateBeEndpointsCalls (parent: ref[Core.Basic.TiObject]) {
        def elements: Array[ref[Core.Basic.TiObject]] = Spp.astMgr.findElements(
            ast { modifier == "beEndpoint" || modifier == "منفذ_بياني" },
            parent,
            Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
        );
        def i: Int;
        for i = 0, i < elements.getLength(), ++i {
            def modifier: ref[Core.Basic.TiObject](Spp.astMgr.findModifierForElement(elements(i), "beEndpoint"));
            if modifier~ptr == 0 modifier~no_deref = Spp.astMgr.findModifierForElement(elements(i), "منفذ_بياني");
            def endpointParams: Array[String];
            if !Spp.astMgr.getModifierStringParams(modifier, endpointParams)
                || endpointParams.getLength() < 2 {
                System.fail(1, "Invalid BE endpoint params");
            }
            Spp.astMgr.insertAst(
                ast {
                    if String.isEqual(method, "{{endpointMethod}}") && String.isEqual(uri, "{{endpointUri}}" ) {
                        fullref(connection);
                        return 1;
                    }
                },
                AstTemplateMap()
                    .set(Srl.String("endpointMethod"), Core.Basic.TiStr(endpointParams(0)))
                    .set(Srl.String("endpointUri"), Core.Basic.TiStr(endpointParams(1)))
                    .set(Srl.String("fullref"), constructElementFullReference(elements(i)))
            );
        }
    }

    func generateAssetRoutesInitialization (modulesRef: ref[Core.Basic.TiObject]) {
        def assetRoutes: Array[StaticRoute] = getAssetsRoutesFromModules(modulesRef);
        def i: Int;
        for i = 0, i < assetRoutes.getLength(), ++i {
            Spp.astMgr.insertAst(
                (ast callbackContext.assetRoutes.add(StaticRoute(String(uri), String(srcPath), String(buildPath)))),
                Map[String, ref[Core.Basic.TiObject]]()
                    .set(String("uri"), Core.Data.Ast.StringLiteral(assetRoutes(i).uri))
                    .set(String("srcPath"), Core.Data.Ast.StringLiteral(assetRoutes(i).srcPath))
                    .set(String("buildPath"), Core.Data.Ast.StringLiteral(assetRoutes(i).buildPath))
            );
        }
    }

    // Querying Functions

    func getAssetsRoutesFromModules (modulesRef: ref[Core.Basic.TiObject]): Array[StaticRoute] {
        def result: Array[StaticRoute];
        def modules: Array[ref[Core.Basic.TiObject]] = getAllModules(modulesRef);
        if modules.getLength() == 0 {
            Spp.buildMgr.raiseBuildNotice("SPPA1002", 1, modulesRef);
        }
        def j: Int;
        for j = 0, j < modules.getLength(), ++j {
            def elements: Array[ref[Core.Basic.TiObject]] = Spp.astMgr.findElements(
                ast { modifier == "assetsRoute" || modifier == "مسار_موارد" },
                modules(j),
                Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
            );
            def i: Int;
            for i = 0, i < elements.getLength(), ++i {
                def srcPath: String;
                def buildPath: String;
                extractAssetRoutePaths(elements(i), srcPath, buildPath);
                if srcPath == "" continue;

                def modifier: ref[Core.Basic.TiObject](Spp.astMgr.findModifierForElement(elements(i), "assetsRoute"));
                if modifier~ptr == 0 modifier~no_deref = Spp.astMgr.findModifierForElement(elements(i), "مسار_موارد");
                def uri: String;
                def params: Array[String];
                if Spp.astMgr.getModifierStringParams(modifier, params) && params.getLength() == 1 {
                    uri = params(0);
                } else {
                    if buildPath(0) == '/' or buildPath(0) == '.' {
                        System.fail(
                            1, String("Invalid asset route element; path should not start with / or .: ") + buildPath
                        );
                    }
                    uri = String("/") + buildPath;
                }

                validateAssetRoute(uri, srcPath, buildPath);

                result.add(StaticRoute(uri, srcPath, buildPath));
            }
        }
        return result;
    }

    // Server Functions

    func startServer [modulesRef: ast_ref = Root] (
        mainAssetsPath: String, uiEndpointsPath: String, options: Array[CharsPtr], useSrcAssetsPath: Bool
    ): ptr[ServerSession] {
        // Http library requires that the last options argument is a zero, to denote
        // the end of options.
        options.add(0);

        // Prepare the context.
        def callbackContext: SrdRef[CallbackContext];
        callbackContext.construct();
        callbackContext.mainAssetsPath = mainAssetsPath;
        callbackContext.uiEndpointsPath = uiEndpointsPath;
        callbackContext.useSrcAssetsPath = useSrcAssetsPath;
        preprocess {
            // Dummy statement just to prevent circular code generation.
            Core.Data.Ast.StringLiteral();

            generateUiEndpointsInitialization(modulesRef~ast);
            generateAssetRoutesInitialization(modulesRef~ast);
        };

        // Start the HTTP server.
        def httpContext: ptr[Http.Context] = Http.startServer(
            callbackRequest[modulesRef]~ptr, callbackContext.obj~ptr, options
        );
        if httpContext == 0 return 0;

        def session: ptr[ServerSession] = Memory.alloc(ServerSession~size)~cast[ptr[ServerSession]];
        session~cnt~init();
        session~cnt.callbackContext = callbackContext;
        session~cnt.httpContext = httpContext;
        return session;
    }

    func startServer [modulesRef: ast_ref = Root] (
        mainAssetsPath: String, uiEndpointsPath: String, options: Array[CharsPtr]
    ): ptr[ServerSession] {
        return startServer[modulesRef](mainAssetsPath, uiEndpointsPath, options, false);
    }

    func stopServer(session: ptr[ServerSession]) {
        if session == 0 return;
        Http.stopServer(session~cnt.httpContext);
        session~cnt~terminate();
        Memory.free(session);
    }

    func runServer [modulesRef: ast_ref = Root] (
        mainAssetsPath: String, uiEndpointsPath: String, options: Array[CharsPtr], useSrcAssetsPath: Bool
    ) {
        def session: ptr[ServerSession] = startServer[modulesRef](
            mainAssetsPath, uiEndpointsPath, options, useSrcAssetsPath
        );
        if session == 0 {
            System.fail(1, "Failed to start HTTP server.");
        }
        Console.print("Server started.\nPress Ctrl+C to exit.\n");
        while 1 System.sleep(100000);
    }

    func runServer [modulesRef: ast_ref = Root] (
        mainAssetsPath: String, uiEndpointsPath: String, options: Array[CharsPtr]
    ) {
        runServer[modulesRef](mainAssetsPath, uiEndpointsPath, options, false);
    }

    func buildAndStartServer [modulesRef: ast_ref = Root] (options: Array[CharsPtr]): ptr[ServerSession] {
        buildUiEndpoints(modulesRef~ast, webPlatformPath, String(TEMP_UI_ENDPOINTS_PATH));
        return startServer[modulesRef](webPlatformPath, String(TEMP_UI_ENDPOINTS_PATH), options, true);
    }

    func buildAndRunServer [modulesRef: ast_ref = Root] (options: Array[CharsPtr]) {
        buildUiEndpoints(modulesRef~ast, webPlatformPath, String(TEMP_UI_ENDPOINTS_PATH));
        runServer[modulesRef](webPlatformPath, String(TEMP_UI_ENDPOINTS_PATH), options, true);
    }

    func callbackRequest [modulesRef: ast_ref = Root] (connection: ptr[Http.Connection]): Int {
        def requestInfo: ptr[Http.RequestInfo] = Http.getRequestInfo(connection);
        def context: ref[CallbackContext];
        context~ptr = requestInfo~cnt.userData~cast[ptr[CallbackContext]];
        def uri: ptr[array[Char]] = requestInfo~cnt.localUri;
        def method: ptr[array[Char]] = requestInfo~cnt.requestMethod;

        // `uri` should not contain unsafe parts like .. because requestInfo.localUri is cleaned
        // internally by the Http library. If we don't have uri we'll just return 0 and let
        // Http library handle the request instead.
        if uri == 0 return 0;

        preprocess {
            def modules: Array[ref[Core.Basic.TiObject]] = getAllModules(modulesRef~ast);
            if modules.getLength() == 0 {
                Spp.buildMgr.raiseBuildNotice("SPPA1002", 1, modulesRef~ast);
            }
            def i: Int;
            for i = 0, i < modules.getLength(), ++i generateBeEndpointsCalls(modules(i));
        };

        if String.isEqual(method, "GET") {
            if String.isEqual(uri, "/api.js") {
                Http.sendFile(connection, context.mainAssetsPath + "api.js");
                return 1;
            }

            if !String.isEqual(uri, "/") {
                def fileName: String = context.uiEndpointsPath + uri;
                if Fs.exists(fileName) {
                    Http.sendFile(connection, fileName);
                    return 1;
                }
            }

            def i: Int;
            for i = 0, i < context.assetRoutes.getLength(), ++i {
                if String.find(uri, context.assetRoutes(i).uri) == uri {
                    // We'll avoid String assignment here because it's not thread safe, so we'll just capture
                    // a reference to it instead.
                    def assetsPath: ref[String];
                    if context.useSrcAssetsPath assetsPath~no_deref = context.assetRoutes(i).srcPath
                    else assetsPath~no_deref = context.assetRoutes(i).buildPath;
                    def fileName: String = assetsPath + (uri + context.assetRoutes(i).uri.getLength());
                    if isDir(fileName) {
                        return404(connection, uri);
                        return 1;
                    } else if Fs.exists(fileName) {
                        Http.sendFile(connection, fileName);
                        return 1;
                    }
                }
            }

            for i = 0, i < context.uiEndpoints.getLength(), ++i {
                def len: ArchInt = context.uiEndpoints(i).uri.getLength();
                if context.uiEndpoints(i).uri == uri or (
                    len > 0 and context.uiEndpoints(i).uri(len - 1) == '*' and
                    String.compare(context.uiEndpoints(i).uri, uri, len - 1) == 0
                ) {
                    Http.sendFile(connection, context.uiEndpointsPath + context.uiEndpoints(i).buildPath);
                    return 1;
                }
            }
        }

        return404(connection, uri);
        return 1;
    }

    func return404(connection: ptr[Http.Connection], uri: CharsPtr) {
        def content: array[Char, 1024];
        String.assign(content~ptr, "<h1>404 - Not Found</h1><p> you are in \"%.512s\"", uri);
        Http.print(connection, "HTTP/1.1 404 Not Found\r\n");
        Http.print(connection, "Content-Type: text/html\r\n");
        Http.print(connection, "Content-Length: %d\r\n\r\n", String.getLength(content~ptr));
        Http.print(connection, content~ptr);
    }

    // Helpers

    func constructElementFullReference (element: ref[Core.Basic.TiObject]): SrdRef[Core.Basic.TiObject] {
        def node: ref[Core.Data.Node](castRef[element, Core.Data.Node]);
        if node.owner~ptr == 0 return SrdRef[Core.Basic.TiObject]();
        def name: String = Spp.astMgr.getDefinitionName(node);
        def identifier: SrdRef[Core.Data.Ast.Identifier] = Core.Basic.newSrdObj[Core.Data.Ast.Identifier].{
            value.value = name;
        };
        def ownerRef: SrdRef[Core.Basic.TiObject] = constructElementFullReference(node.owner.owner);
        if ownerRef.isNull() return identifier
        else return Core.Basic.newSrdObj[Core.Data.Ast.LinkOperator].{
            Core.Basic.MapContainerOf[this].{
                setElement("first", ownerRef);
                setElement("second", identifier);
            };
        };
    }

    func getModifierParams (element: ref[Core.Basic.TiObject], enKwd: CharsPtr, arKwd: CharsPtr): Array[String] {
        def modifier: ref[Core.Basic.TiObject](Spp.astMgr.findModifierForElement(element, enKwd));
        if modifier~ptr == 0 modifier~no_deref = Spp.astMgr.findModifierForElement(element, arKwd);
        def endpointParams: Array[String];
        Spp.astMgr.getModifierStringParams(modifier, endpointParams);
        return endpointParams;
    }

    func getAllModules (astRef: ref[Core.Basic.TiObject]): Array[ref[Core.Basic.TiObject]] {
        def result: Array[ref[Core.Basic.TiObject]];
        if astRef~ptr == Root~ast~ptr or Core.Basic.isDerivedFrom[astRef, Spp.Ast.Module] {
            result.add(astRef);
        } else if Core.Basic.isDerivedFrom[astRef, Core.Data.Ast.List] {
            def container: Core.Basic.ContainerOf[astRef];
            def i: Word;
            for i = 0, i < container.getElementCount(), ++i {
                result.add(getAllModules(container.getElement(i)));
            }
        } else {
            def node: ref[Core.Data.Node](castRef[astRef, Core.Data.Node]);
            def elements: Array[ref[Core.Basic.TiObject]] = Spp.astMgr.findElements(
                node, node.owner, Spp.SeekerFlags.SKIP_CHILDREN
            );
            def j: Int;
            for j = 0, j < elements.getLength(), ++j {
                result.add(getAllModules(elements(j)));
            }
        }
        return result;
    }

    func extractAssetRoutePaths (element: ref[Core.Basic.TiObject], srcPath: ref[String], buildPath: ref[String]) {
        use Core.Basic;
        use Core.Data.Ast;
        def strLiteral: ref[StringLiteral](Core.Basic.dynCastRef[element, StringLiteral]);
        if strLiteral~ptr != 0 {
            srcPath = buildPath = strLiteral.value.value;
            return;
        }
        if isDerivedFrom[element, Bracket] {
            def list: ContainerOf[ContainerOf[element].getElement(0)];
            if list~ptr != 0 {
                if list.getElementCount() == 1u {
                    def strLiteral: ref[StringLiteral](Core.Basic.dynCastRef[list.getElement(0), StringLiteral]);
                    if strLiteral~ptr != 0 {
                        srcPath = buildPath = strLiteral.value.value;
                        return;
                    }
                } else if list.getElementCount() == 2u {
                    def strLiteral1: ref[StringLiteral](Core.Basic.dynCastRef[list.getElement(0), StringLiteral]);
                    def strLiteral2: ref[StringLiteral](Core.Basic.dynCastRef[list.getElement(1), StringLiteral]);
                    if strLiteral1~ptr != 0 and strLiteral2~ptr != 0 {
                        srcPath = strLiteral1.value.value;
                        if srcPath(0) == '$' {
                            // If the path starts with $ we'll replace the $ with the path of the source file
                            // instead of having the path absolute or relative to the current working dir.
                            def sourceFilePath: String = Spp.astMgr.getSourceDirectoryForElement(element);
                            srcPath = sourceFilePath + (srcPath.buf + 1);
                        }
                        buildPath = strLiteral2.value.value;
                        return;
                    }
                }
            }
        }
        Spp.buildMgr.raiseBuildNotice("CD1003", 1, element);
    }

    func validateAssetRoute(uri: String, srcPath: String, buildPath: String) {
        if uri.getLength() == 0 {
            System.fail(1, "Invalid asset route; uri is empty");
        }
        if uri(0) != '/' {
            System.fail(1, String("Invalid asset route; uri should start with /: ") + uri);
        }
        if uri(uri.getLength() - 1) != '/' {
            System.fail(1, String("Invalid asset route; uri should end with /: ") + uri);
        }
        if srcPath(srcPath.getLength() - 1) != '/' {
            System.fail(1, String("Invalid asset route; path should end with /: ") + srcPath);
        }
        if buildPath(buildPath.getLength() - 1) != '/' {
            System.fail(1, String("Invalid asset route; path should end with /: ") + buildPath);
        }
    }
}
