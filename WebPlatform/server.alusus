@merge module WebPlatform {
    class Route {
        def uri: String;
        def path: String;
        handler this~init() {}
        handler this~init(uri: String, path: String) this.set(uri, path);
        handler this~init(ref[Route]) this.set(value.uri, value.path);
        handler this=ref[Route] this.set(value.uri, value.path);
        handler this.set (uri: String, path: String) {
            this.uri = uri;
            this.path = path;
        }
    }
    def assetRoutes: Array[Route];
    def uiEndpoints: Array[Route];

    def endpointsModules: Array[ref[Core.Basic.TiObject]];
    func _registerEndpointsModule(m: ref[Core.Basic.TiObject]) {
        endpointsModules.add(m);
    }
    macro registerEndpointsModule[m] _registerEndpointsModule(m~ast);

    def AstTemplateMap: alias Map[String, ref[Core.Basic.TiObject]];

    func getElementName (obj: ref[Core.Basic.TiObject]): String {
        def node: ref[Core.Data.Node](castRef[obj, Core.Data.Node]);
        def d: ref[Core.Data.Ast.Definition](castRef[node.owner, Core.Data.Ast.Definition]);
        def binding: ref[Core.Basic.Binding](Core.Basic.getInterface[d, Core.Basic.Binding]);
        def name: ref[Core.Basic.TiStr](castRef[binding.getMember("name"), Core.Basic.TiStr]);
        return name.value;
    }

    func constructElementFullReference (element: ref[Core.Basic.TiObject]): SrdRef[Core.Basic.TiObject] {
        def node: ref[Core.Data.Node](castRef[element, Core.Data.Node]);
        if node.owner~ptr == 0 return SrdRef[Core.Basic.TiObject]();
        def name: String = getElementName(node);
        def identifier: SrdRef[Core.Data.Ast.Identifier] = Core.Basic.newSrdObj[Core.Data.Ast.Identifier].{
            value.value = name;
        };
        def ownerRef: SrdRef[Core.Basic.TiObject] = constructElementFullReference(node.owner.owner);
        if ownerRef.isNull() return identifier
        else return Core.Basic.newSrdObj[Core.Data.Ast.LinkOperator].{
            Core.Basic.MapContainerOf[this].{
                setElement("first", ownerRef);
                setElement("second", identifier);
            };
        };
    }

    func getModifierParams (element: ref[Core.Basic.TiObject], enKwd: CharsPtr, arKwd: CharsPtr): Array[String] {
        def modifier: ref[Core.Basic.TiObject](Spp.astMgr.findModifierForElement(element, enKwd));
        if modifier~ptr == 0 modifier~no_deref = Spp.astMgr.findModifierForElement(element, arKwd);
        def endpointParams: Array[String];
        Spp.astMgr.getModifierStringParams(modifier, endpointParams);
        return endpointParams;
    }

    func addUiEndpoints (parent: ref[Core.Basic.TiObject]) {
        def elements: Array[ref[Core.Basic.TiObject]] = Spp.astMgr.findElements(
            ast { modifier == "uiEndpoint" || modifier == "منفذ_مرئي" },
            parent,
            Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
        );
        def i: Int;
        for i = 0, i < elements.getLength(), ++i {
            def uriParams: Array[String] = getModifierParams(elements(i), "uiEndpoint", "منفذ_مرئي");
            if uriParams.getLength() < 1 {
                System.fail(1, "Invalid @uiEndpoint params");
            }

            def titleParams: Array[String] = getModifierParams(elements(i), "title", "عنوان");
            def title: String;
            if titleParams.getLength() >= 1 title = titleParams(0) else title = "Alusus WebPlatform";

            def iconParams: Array[String] = getModifierParams(elements(i), "icon", "أيقونة");
            def icon: String;
            if iconParams.getLength() >= 1 icon = iconParams(0);

            def appParams: Array[String] = getModifierParams(elements(i), "webApp", "تطبيق_ويب");
            def appManifest: String;
            if appParams.getLength() > 0 appManifest = appParams(0);
            def appVersion: String;
            if appParams.getLength() > 1 appVersion = appParams(1) else appVersion = "v1";

            def preCacheFilenames: Array[String] = getModifierParams(elements(i), "preCache", "خزن_مسبق");
            def dynCacheFilenames: Array[String] = getModifierParams(elements(i), "dynCache", "خزن_تفاعلي");

            addUiEndpoint(
                elements(i), uriParams(0), title, icon, appManifest, appVersion, preCacheFilenames, dynCacheFilenames
            );
        }
    }

    func addUiEndpoint (
        fn: ref[Core.Basic.TiObject], uri: String, title: String, iconFilename: String, manifestFilename: String,
        version: String, preCacheFilenames: Array[String], dynCacheFilenames: Array[String]
    ) {
        def fnName: String = generateWasm(fn);
        if iconFilename != "" {
            def icon: String;
            iconFilename.split("/").{ icon = this(this.getLength() - 1) };
            System.exec(String.format("cp %s \"%s%s\"", iconFilename.buf, uiEndpointsPath.buf, icon.buf));
            iconFilename = icon;
        }
        if manifestFilename != "" {
            System.exec(String.format("cp %s \"%s%s-manifest.json\"", manifestFilename.buf, uiEndpointsPath.buf, fnName.buf));
            preCacheFilenames.add({
                uri,
                String("/api.js"),
                String.format("/%s.wasm", fnName.buf),
                String.format("/%s-manifest.json", fnName.buf),
            });
            if iconFilename != "" preCacheFilenames.add(String.format("/") + iconFilename);
            generateServiceWorker(fnName, preCacheFilenames, dynCacheFilenames, version);
        }
        generateHtml(fnName, title, iconFilename, manifestFilename != "");
        Spp.astMgr.insertAst(
            (ast uiEndpoints.add(Route(String(uri), String(path)))),
            AstTemplateMap()
                .set(String("uri"), Core.Data.Ast.StringLiteral(uri))
                .set(String("path"), Core.Data.Ast.StringLiteral(fnName + ".html"))
        );
    }

    func generateWasm(fn: ref[Core.Basic.TiObject]): String {
        def binding: ref[Core.Basic.Binding](Core.Basic.getInterface[fn, Core.Basic.Binding]);
        binding.setMember("name", Core.Basic.TiStr("wasmStart"));
        def wasm: Build.Wasm(fn, uiEndpointsPath + "_intermediate.wasm");
        wasm.addDependency(webPlatformPath + String("stdlib-min.wasm"));
        wasm.addFlags({ String("--export=malloc"), String("--export=realloc") });
        wasm.generate();
        def fnName: String = getElementName(fn);
        if System.exec(
            webPlatformPath + "Tools/bin/wasm-opt -O --asyncify " + uiEndpointsPath + "_intermediate.wasm -o " +
            uiEndpointsPath + fnName + ".wasm"
        ) != 0 {
            System.fail(1, "Post-build pass failed\n");
        }
        return fnName;
    }

    func generateServiceWorker(
        fnName: String, preCacheFilenames: Array[String], dynCacheFilenames: Array[String], version: String
    ) {
        def workerTemplate: String = Fs.readFile(webPlatformPath + "service-worker.js");
        def content: String = String.format(
            workerTemplate,
            createJsStringArray(preCacheFilenames).buf,
            createJsStringArray(dynCacheFilenames).buf,
            (String("\"") + version.replace("\\", "\\\\").replace("\"", "\\\"") + "\"").buf
        );
        Fs.createFile(
            String.format("%s%s-service-worker.js", uiEndpointsPath.buf, fnName.buf),
            content.buf, content.getLength()
        );
    }

    func createJsStringArray(strs: Array[String]): String {
        def result: String = "[";
        def i: Int;
        for i = 0, i < strs.getLength(), ++i {
            if i != 0 result += ",\n";
            result += "\"";
            result += strs(i).replace("\\", "\\\\").replace("\"", "\\\"");
            result += "\"";
        }
        result += "]";
        return result;
    }

    func generateHtml(fnName: String, title: String, icon: String, webApp: Bool) {
        def htmlTemplate: String = Fs.readFile(webPlatformPath + "wasm.html");
        def extraHeaders: String;
        if icon != "" extraHeaders += String.format("<link rel=\"icon\" href=\"/%s\" />", icon.buf);
        def extraScript: String;
        if webApp {
            extraHeaders += String.format("<link rel=\"manifest\" href=\"/%s-manifest.json\" />", fnName.buf);
            extraScript += String.format("initializeWebApp(\"/%s-service-worker.js\", \"/\");", fnName.buf);
        }
        def content: String = String.format(
            htmlTemplate, title.buf, extraHeaders.buf, extraScript.buf, String.format("/%s.wasm", fnName.buf).buf
        );
        Fs.createFile(uiEndpointsPath + fnName + ".html", content.buf, content.getLength());
    }

    func addBeEndpoints (parent: ref[Core.Basic.TiObject]) {
        def elements: Array[ref[Core.Basic.TiObject]] = Spp.astMgr.findElements(
            ast { modifier == "beEndpoint" || modifier == "منفذ_بياني" },
            parent,
            Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
        );
        def i: Int;
        for i = 0, i < elements.getLength(), ++i {
            def modifier: ref[Core.Basic.TiObject](Spp.astMgr.findModifierForElement(elements(i), "beEndpoint"));
            if modifier~ptr == 0 modifier~no_deref = Spp.astMgr.findModifierForElement(elements(i), "منفذ_بياني");
            def endpointParams: Array[String];
            if !Spp.astMgr.getModifierStringParams(modifier, endpointParams)
                || endpointParams.getLength() < 2 {
                System.fail(1, "Invalid BE endpoint params");
            }
            Spp.astMgr.insertAst(
                ast {
                    if String.isEqual(method, "{{endpointMethod}}") && String.isEqual(uri, "{{endpointUri}}" ) {
                        fullref(connection);
                        return 1;
                    }
                },
                AstTemplateMap()
                    .set(Srl.String("endpointMethod"), Core.Basic.TiStr(endpointParams(0)))
                    .set(Srl.String("endpointUri"), Core.Basic.TiStr(endpointParams(1)))
                    .set(Srl.String("fullref"), constructElementFullReference(elements(i)))
            );
        }
    }

    func addAssetRoutes (parent: ref[Core.Basic.TiObject]) {
        def elements: Array[ref[Core.Basic.TiObject]] = Spp.astMgr.findElements(
            ast { modifier == "assetsRoute" || modifier == "مسار_موارد" },
            parent,
            Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
        );
        def i: Int;
        for i = 0, i < elements.getLength(), ++i {
            def endpointParams: Array[String];
            if !Core.Basic.isDerivedFrom[elements(i), Core.Data.Ast.StringLiteral] {
                System.fail(1, "Invalid asset route");
            }
            def path: String = Core.Basic.dynCastRef[elements(i), Core.Data.Ast.StringLiteral].value.value;
            if path(0) == '/' || path(0) == '.' {
                System.fail(1, String("Invalid asset route element; path should not start with / or .: ") + path);
            }
            Spp.astMgr.insertAst(
                (ast addAssetRoute(String("/") + path, String(path))),
                Map[String, ref[Core.Basic.TiObject]]()
                    .set(String("path"), Core.Data.Ast.StringLiteral(path))
            );
        }
    }

    func addAssetRoute (uri: String, path: String) {
        validateAssetRoute(uri, path);
        assetRoutes.add(Route(uri, path));
    }

    func validateAssetRoute(uri: String, path: String) {
        if uri.getLength() == 0 {
            System.fail(1, "Invalid asset route; path is empty");
        }
        if uri(0) != '/' {
            System.fail(1, String("Invalid asset route; uri should start with /: ") + uri);
        }
        if uri(uri.getLength() - 1) != '/' {
            System.fail(1, String("Invalid asset route; uri should end with /: ") + uri);
        }
        if path(path.getLength() - 1) != '/' {
            System.fail(1, String("Invalid asset route; path should end with /: ") + path);
        }
    }

    func prepareMainAssets {
        if mainAssetsPath == webPlatformPath return;
        System.exec(String.format("mkdir -p \"%s\"", mainAssetsPath.buf));
        System.exec(String.format("cp %s/api.js \"%s/api.js\"", webPlatformPath.buf, mainAssetsPath.buf));
    }

    func startServer [parent: ast_ref = Root] (options: ref[Array[CharsPtr]]): ptr[Http.Context] {
        preprocess { prepareMainAssets() };
        preprocess {
            addUiEndpoints(parent~ast);
            def i: Int;
            for i = 0, i < endpointsModules.getLength(), ++i addUiEndpoints(endpointsModules(i));
        };
        preprocess { addAssetRoutes(parent~ast) };

        options.add(0);

        return Http.startServer(callbackRequest[parent]~ptr, options);
    }

    func startServer [parent: ast_ref = Root] (optsCount: Int, opts: ...CharsPtr): ptr[Http.Context] {
        def options: Array[CharsPtr];
        while optsCount-- > 0 options.add(opts~next_arg[CharsPtr]);
        return startServer[parent](options);
    }

    func runServer [parent: ast_ref = Root] (optsCount: Int, opts: ...CharsPtr) {
        def options: Array[CharsPtr];
        while optsCount-- > 0 options.add(opts~next_arg[CharsPtr]);

        def context: ptr[Http.Context] = startServer[parent](options);
        Console.print("Server started.\npress enter to close server: ");
        Console.getChar(); // stop proccess here waiting user to press enter
        Http.stopServer(context); // stop the server
    }

    func callbackRequest [parent: ast_ref = Root] (connection: ptr[Http.Connection]): Int {
        def requestInfo: ptr[Http.RequestInfo] = Http.getRequestInfo(connection);
        def uri: ptr[array[Char]] = requestInfo~cnt.requestUri;
        def method: ptr[array[Char]] = requestInfo~cnt.requestMethod;

        preprocess {
            addBeEndpoints(parent~ast);
            def i: Int;
            for i = 0, i < endpointsModules.getLength(), ++i addBeEndpoints(endpointsModules(i));
        };

        if String.isEqual(method, "GET") {
            if String.isEqual(uri, "/api.js") {
                Http.sendFile(connection, mainAssetsPath + "api.js");
                return 1;
            }

            if !String.isEqual(uri, "/") {
                def fileName: String = uiEndpointsPath + uri;
                if Fs.exists(fileName) {
                    Http.sendFile(connection, fileName);
                    return 1;
                }
            }

            def i: Int;
            for i = 0, i < assetRoutes.getLength(), ++i {
                if String.find(uri, assetRoutes(i).uri) == uri and assetRoutes(i).uri != uri {
                    def fileName: String = assetRoutes(i).path + (uri + assetRoutes(i).uri.getLength());
                    if Fs.exists(fileName) {
                        Http.sendFile(connection, fileName);
                        return 1;
                    }
                }
            }

            for i = 0, i < uiEndpoints.getLength(), ++i {
                def len: ArchInt = uiEndpoints(i).uri.getLength();
                if uiEndpoints(i).uri == uri or (
                    len > 0 and uiEndpoints(i).uri(len - 1) == '*' and
                    String.compare(uiEndpoints(i).uri, uri, len - 1) == 0
                ) {
                    Http.sendFile(connection, uiEndpointsPath + uiEndpoints(i).path);
                    return 1;
                }
            }
        }

        def content: array[Char, 1024];
        String.assign(content~ptr, "<h1>404 - Not Found</h1><p> you are in \"%.512s\"", requestInfo~cnt.localUri);
        Http.print(connection, "HTTP/1.1 404 Not Found\r\n");
        Http.print(connection, "Content-Type: text/html\r\n");
        Http.print(connection, "Content-Length: %d\r\n\r\n", String.getLength(content~ptr));
        Http.print(connection, content~ptr);

        return 1;
    }
}
