@merge module WebPlatform {
    // Element Management
    @expname[createElement] function createElement (type: ptr[Char], name: ptr[Char], parent: ptr[Char]);
    @expname[deleteElement] function deleteElement (name: ptr[Char]);
    @expname[setStyleRule] function setStyleRule (name: ptr[Char], selector: ptr[Char], css: ptr[Char]);
    @expname[removeStyleRule] function removeStyleRule (name: ptr[Char], selector: ptr[Char]);
    @expname[setElementAttribute] function setElementAttribute (name: ptr[Char], prop: ptr[Char], value: ptr[Char]);
    @expname[getElementAttribute] function getElementAttribute (name: ptr[Char], prop: ptr[Char]): ptr[array[Char]];
    @expname[getElementDimensions] function getElementDimensions (name: ptr[Char], result: ref[Dimensions]);
    @expname[getElementBoundingRect] function getElementBoundingRect (name: ptr[Char], result: ref[Rectangle]);
    // Element Interaction
    @expname[selectItem] function selectItem (selectId: ptr[Char], selectedValue: ptr[Char]);
    @expname[getSelectedItemValue] function getSelectedItemValue (selectId: ptr[Char]): ptr[array[Char]];
    @expname[scrollElementIntoView] function scrollElementIntoView (name: ptr[Char]);
    // Event Loop
    @expname[fetchNextEvent] function fetchNextEvent (): ptr[array[Char]];
    @expname[registerElementEventHandler] function _registerElementEventHandler (
      elementName: ptr[Char], eventName: ptr[Char], preventDefault: Bool, cbId: ArchInt
    );
    @expname[registerElementKeyEventHandler] function _registerElementKeyEventHandler (
      elementName: ptr[Char], eventName: ptr[Char], keysToSwallow: ptr[Char], cbId: ArchInt
    );
    @expname[unregisterElementEventHandler] function _unregisterElementEventHandler (
        elementName: ptr[Char], eventName: ptr[Char]
    );
    @expname[observeResize] function _observeResize (elementName: ptr[Char], cbId: ArchInt);
    @expname[unobserveResize] function _unobserveResize (elementName: ptr[Char]);
    @expname[waitForEvent] function waitForEvent;
    // Async Operations
    @expname[sendRequest] function _sendRequest (
        method: ptr[Char], uri: ptr[Char], headers: ptr[Char], body: ptr[Char], timeoutInMs: Int, cbId: ArchInt
    );
    @expname[startTimer] function _startTimer (duration: Word, cbId: ArchInt): Word;
    @expname[stopTimer] function _stopTimer (id: Word);
    @expname[setTimeout] function _setTimeout (duration: Word, cbId: ArchInt): Word;
    @expname[cancelTimeout] function _cancelTimeout (id: Word);
    // Resource Management
    @expname[loadImage] function _loadImage (url: ptr[Char], cbId: ArchInt);
    @expname[getImageDimensions] function getImageDimensions (imgId: Int, result: ref[Dimensions]);
    @expname[createCanvasResource] function createCanvasResource (width: Int, height: Int): ArchInt;
    @expname[resizeCanvasResource] function resizeCanvasResource (canvasId: ArchInt, width: Int, height: Int);
    @expname[createImageResourceFromCanvasResource] function _createImageResourceFromCanvasResource (
        canvasId: ArchInt, cbId: ArchInt
    );
    @expname[registerElementAsResource] function registerElementAsResource (id: ptr[Char]): ArchInt;
    @expname[loadAudio] function _loadAudio (url: ptr[Char], cbId: ArchInt);
    @expname[releaseResource] function releaseResource (resourceId: ArchInt);
    @expname[loadFont] function _loadFont (fontName: ptr[Char], url: ptr[Char], cbId: ArchInt);
    @expname[loadJsScript] function _loadJsScript (url: ptr[Char], cbId: ArchInt);
    @expname[setResourceAttribute] function setResourceAttribute (
        resourceId: ArchInt, name: ptr[Char], value: ptr[Char]
    );
    // Canvas Operations
    @expname[drawLine] function drawLine (canvasId: ArchInt, x1: Int, y1: Int, x2: Int, y2: Int);
    @expname[drawPolygon] function drawPolygon (
        canvasId: ArchInt, pointCount: Int, points: ref[array[Int]], filled: Bool
    );
    @expname[drawFilledRect] function drawFilledRect (canvasId: ArchInt, x: Int, y: Int, w: Int, h: Int);
    @expname[clearRect] function clearRect (canvasId: ArchInt, x: Int, y: Int, w: Int, h: Int);
    @expname[drawCircle] function drawCircle (canvasId: ArchInt, x: Int, y: Int, r: Int);
    @expname[drawText] function drawText (
        canvasId: ArchInt, text: ptr[Char], font: ptr[Char], x: Int, y: Int, rtl: Bool
    );
    @expname[measureText] function measureText (
        canvasId: ArchInt, text: ptr[Char], font: ptr[Char], result: ref[Dimensions]
    );
    @expname[setFillStyle] function setFillStyle (
        canvasId: ArchInt, c1:ptr[Char], c2:ptr[Char], x1: Int, y1: Int, x2: Int, y2: Int
    );
    @expname[setStrokeStyle] function setStrokeStyle (canvasId: ArchInt, ss: ptr[Char]);
    @expname[setLineWidth] function setLineWidth (canvasId: ArchInt, lw: Int);
    @expname[drawImage] function drawImage (
        canvasId: ArchInt, imgId: Int, x: Int, y: Int, w: Int, h: Int, alpha: Float
    );
    @expname[clearCanvas] function clearCanvas (canvasId: ArchInt);
    // Audio Operations
    @expname[suspendAudioContext] function suspendAudioContext();
    @expname[resumeAudioContext] function resumeAudioContext();
    @expname[playAudio] function playAudio (audioId: ArchInt, loop: Bool, stopPrevious: Bool);
    @expname[stopAudio] function stopAudio (audioId: ArchInt);
    @expname[pauseAudio] function pauseAudio (audioId: ArchInt);
    @expname[resumeAudio] function resumeAudio (audioId: ArchInt);
    @expname[setAudioVolume] function setAudioVolume (audioId: ArchInt, volume: Float);
    @expname[getAudioVolume] function getAudioVolume (audioId: ArchInt): Float;
    @expname[isAudioPlaying] function isAudioPlaying (audioId: ArchInt): Bool;
    // Gamepads
    @expname[getGamepadsCount] function getGamepadsCount (): Int;
    @expname[getGamepadId] function getGamepadId (gpIndex: Int): ptr[array[Char]];
    @expname[getGamepadAxesCount] function getGamepadAxesCount (gpIndex: Int): Int;
    @expname[getGamepadButtonsCount] function getGamepadButtonsCount (gpIndex: Int): Int;
    @expname[getGamepadAxis] function getGamepadAxis (gpIndex: Int, axisIndex: Int): Float;
    @expname[getGamepadButton] function getGamepadButton (gpIndex: Int, btnIndex: Int): Float;
    // Misc
    @expname[getTimestamp] function getTimestamp (): Int[64];
    @expname[getDate] function getDate (type: ptr[array[Char]], timestamp: Int[64]): ptr[array[Char]];
    @expname[requestPointerLock] function requestPointerLock (elementName: ptr[Char]);
    @expname[exitPointerLock] function exitPointerLock();
    @expname[requestFullScreen] function requestFullScreen (elementName: ptr[Char]);
    @expname[exitFullScreen] function exitFullScreen();
    @expname[requestWakeLock] function _requestWakeLock(cbId: ArchInt);
    @expname[exitWakeLock] function _exitWakeLock(cbId: ArchInt);
    @expname[httpRedirect] function httpRedirect (address: ptr[Char]);
    @expname[getLocationHref] function getLocationHref (): ptr[Char];
    @expname[getLocationProtocol] function getLocationProtocol (): ptr[Char];
    @expname[getLocationHost] function getLocationHost (): ptr[Char];
    @expname[getLocationPath] function getLocationPath (): ptr[Char];
    @expname[getLocationSearch] function getLocationSearch (): ptr[Char];
    @expname[getLocationHash] function getLocationHash (): ptr[Char];
    @expname[getQueryParam] function getQueryParam (paramName: ptr[Char]): ptr[Char];
    @expname[pushState] function pushState (url: ptr[Char], state: ptr[Char]);
    @expname[setCookie] function setCookie (cName: ptr[Char], vName: ptr[Char], exDay: ptr[Char]);
    @expname[getCookie] function getCookie (cName: ptr[Char]): ptr[array[Char]];
    @expname[addVarToSession] function addVarToSession (varName: ptr[Char], varValue: ptr[Char]);
    @expname[getVarFromSession] function getVarFromSession (varName: ptr[Char]): ptr[array[Char]];
    @expname[getVisibilityState] function getVisibilityState (): ptr[array[Char]];
    @expname[logToConsole] function logToConsole (msg: ptr[Char]);
    @expname[showAlert] function showAlert (message: ptr[Char]): Bool;
    @expname[postMessage] function postMessage (target: ptr[Char], msgType: ptr[Char], msgBody: ptr[Char]);
    @expname[callCustomJsFn] function callCustomJsFn (fnName: ptr[Char], arg: ptr[Char]): ptr[Char];
    @expname[callCustomAsyncJsFn] function _callCustomAsyncJsFn (fnName: ptr[Char], arg: ptr[Char], cbId: ArchInt);
    @expname[getUserLanguages] function _getUserLanguages (): ptr[Char];
    @expname[isDarkColorSchemePreferred] function isDarkColorSchemePreferred (): Bool;
    @expname[resizeWindow] function resizeWindow(width: Int, height: Int);
    // PWA
    @expname[isAppUpdateAvailable] function isAppUpdateAvailable(): Bool;
    @expname[updateApp] function updateApp();
    @expname[getAppDisplayMode] function getAppDisplayMode(): ptr[Char];
    @expname[isAppInstallPromptAvailable] function isAppInstallPromptAvailable(): Bool;
    @expname[showAppInstallPrompt] function showAppInstallPrompt(): Bool;
    // String
    @expname[createRegex] function createRegex (regexStr: ptr[Char]): ArchInt;
    @expname[matchRegex] function _matchRegex (
        str: ptr[Char], regexStr: ptr[Char], regexId: ArchInt, lastIndex: ref[Int]
    ): ptr[Char];
    // Storage
    @expname[getStorageLength] function getStorageLength (storageType: Int): Int;
    @expname[getStorageKey] function getStorageKey (storageType: Int, index: Int): ptr[Char];
    @expname[getStorageItem] function getStorageItem (storageType: Int, key: ptr[Char]): ptr[Char];
    @expname[setStorageItem] function setStorageItem (storageType: Int, key: ptr[Char], value: ptr[Char]);
    @expname[removeStorageItem] function removeStorageItem (storageType: Int, key: ptr[Char]);
    @expname[clearStorage] function clearStorage (storageType: Int);
}
