@merge module WebPlatform {
    //==========================================================================
    // EventSignal
    // A signal that is used for dom events.
    class DomEventSignal [ownerType: type, payloadType: type] {
        @injection def signal: Signal[ownerType, payloadType];
        def defaultPrevented: Bool = false;
    }

    //==========================================================================
    // handleSignalConnectionChanged
    // A helper macro for handling an event in onSignalConnectionsChanged.
    macro handleSignalConnectionChanged [elementId, signalName, eventHtmlIentifier, emitSignal] {
        if connectionCount > 0 and this.__signalName__Id == -1 {
            this.__signalName__Id = registerElementEventHandler(
                elementId,
                eventHtmlIentifier,
                this.signalName.defaultPrevented,
                closure (json: Json) {
                    def data: Json = json.getObject("eventData");
                    emitSignal;
                }
            );
        } else if connectionCount == 0 and this.__signalName__Id != -1 {
            unregisterElementEventHandler(this.__signalName__Id);
        }
    }


    //==========================================================================
    // handleSignalConnectionChanged
    // A helper macro for handling a key event in onSignalConnectionsChanged.
    macro handleSignalConnectionChanged [elementId, signalName, eventHtmlIentifier, keysToSwallow, emitSignal] {
        if connectionCount > 0 and this.__signalName__Id == -1 {
            this.__signalName__Id = registerElementKeyEventHandler(
                elementId,
                eventHtmlIentifier,
                keysToSwallow,
                closure (json: Json) {
                    def data: Json = json.getObject("eventData");
                    emitSignal;
                }
            );
        } else if connectionCount == 0 and this.__signalName__Id != -1 {
            unregisterElementEventHandler(this.__signalName__Id);
        }
    }
}
