@merge module WebPlatform {
    class ElementEventIdentification {
        def elementName: String;
        def eventName: String;
    }

    function registerElementEventHandler (
        elementName: ptr[array[Char]], eventName: ptr[array[Char]], preventDefault: Bool, cb: closure (Json)
    ): ArchInt {
        def index: ArchInt = addEventHandler(cb);
        _registerElementEventHandler(elementName, eventName, preventDefault, eventHandlers(index).id);
        def eventIdentification: SrdRef[ElementEventIdentification];
        eventIdentification.construct();
        eventIdentification.elementName = elementName;
        eventIdentification.eventName = eventName;
        eventHandlers(index).info = castSrdRef[eventIdentification, Void];
        return eventHandlers(index).id;
    }

    function registerElementKeyEventHandler (
        elementName: ptr[array[Char]], eventName: ptr[array[Char]], keysToSwallow: ptr[array[Char]], cb: closure (Json)
    ): ArchInt {
        def index: ArchInt = addEventHandler(cb);
        _registerElementKeyEventHandler(elementName, eventName, keysToSwallow, eventHandlers(index).id);
        def eventIdentification: SrdRef[ElementEventIdentification];
        eventIdentification.construct();
        eventIdentification.elementName = elementName;
        eventIdentification.eventName = eventName;
        eventHandlers(index).info = castSrdRef[eventIdentification, Void];
        return eventHandlers(index).id;
    }

    function unregisterElementEventHandler (id: ArchInt) {
        def i: ArchInt = findEventHandlerIndex(id);
        if i == -1 return;
        def eventIdentification: SrdRef[ElementEventIdentification] =
            castSrdRef[eventHandlers(i).info, ElementEventIdentification];
        _unregisterElementEventHandler(eventIdentification.elementName, eventIdentification.eventName);
        eventHandlers.remove(i);
    }

    function observeResize (elementName: ptr[array[Char]], cb: closure (Json)): ArchInt {
        def index: ArchInt = addEventHandler(cb);
        _observeResize(elementName, eventHandlers(index).id);
        def eventIdentification: SrdRef[ElementEventIdentification];
        eventIdentification.construct();
        eventIdentification.elementName = elementName;
        eventIdentification.eventName = "observeResize";
        eventHandlers(index).info = castSrdRef[eventIdentification, Void];
        return eventHandlers(index).id;
    }

    function unobserveResize (id: ArchInt) {
        def i: ArchInt = findEventHandlerIndex(id);
        if i == -1 return;
        def eventIdentification: SrdRef[ElementEventIdentification] =
            castSrdRef[eventHandlers(i).info, ElementEventIdentification];
        _unobserveResize(eventIdentification.elementName);
        eventHandlers.remove(i);
    }
}
